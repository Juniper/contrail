{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "title": "Contrail API OpenAPI2.0 Definitions",
        "license": {
            "name": "Apache2.0"
        },
        "version": "4.0"
    },
    "basePath": "/",
    "paths": {
        "/access-control-list/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AccessControlListAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessControlListAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AccessControlListAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/access-control-lists": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AccessControlListAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessControlListAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AccessControlListAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/address-group/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AddressGroupAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AddressGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/address-groups": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AddressGroupAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AddressGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/alarm/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AlarmAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AlarmAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AlarmAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/alarms": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AlarmAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AlarmAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AlarmAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/alias-ip-pool/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPPoolAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AliasIPPoolAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPPoolAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/alias-ip-pools": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPPoolAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AliasIPPoolAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPPoolAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/alias-ip/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AliasIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/alias-ips": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AliasIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AliasIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/analytics-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/analytics-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AnalyticsNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/api-access-list/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/APIAccessListAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/APIAccessListAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/APIAccessListAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/api-access-lists": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/APIAccessListAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/APIAccessListAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/APIAccessListAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/appformix-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/AppformixNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppformixNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/AppformixNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/appformix-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/AppformixNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppformixNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/AppformixNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/application-policy-set/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ApplicationPolicySetAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationPolicySetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ApplicationPolicySetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/application-policy-sets": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ApplicationPolicySetAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationPolicySetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ApplicationPolicySetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/baremetal-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaremetalNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/baremetal-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaremetalNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/baremetal-port/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalPortAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaremetalPortAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalPortAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/baremetal-ports": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalPortAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaremetalPortAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/BaremetalPortAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bgp-as-a-service/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/BGPAsAServiceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BGPAsAServiceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPAsAServiceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bgp-as-a-services": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPAsAServiceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BGPAsAServiceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPAsAServiceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bgp-router/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/BGPRouterAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BGPRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bgp-routers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPRouterAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BGPRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bgpvpn/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/BGPVPNAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BGPVPNAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPVPNAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bgpvpns": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPVPNAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BGPVPNAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/BGPVPNAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bridge-domain/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/BridgeDomainAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BridgeDomainAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/BridgeDomainAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/bridge-domains": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/BridgeDomainAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BridgeDomainAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/BridgeDomainAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/config-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/config-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/config-root/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigRootAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfigRootAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigRootAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/config-roots": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigRootAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfigRootAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ConfigRootAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-analytics-database-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-analytics-database-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-analytics-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-analytics-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailAnalyticsNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-cluster/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailClusterAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailClusterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailClusterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-clusters": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailClusterAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailClusterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailClusterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-config-database-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigDatabaseNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigDatabaseNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigDatabaseNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-config-database-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigDatabaseNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigDatabaseNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigDatabaseNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-config-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-config-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailConfigNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-control-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailControlNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailControlNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailControlNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-control-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailControlNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailControlNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailControlNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-storage-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailStorageNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailStorageNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailStorageNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-storage-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailStorageNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailStorageNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailStorageNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-vrouter-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailVrouterNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailVrouterNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailVrouterNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-vrouter-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailVrouterNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailVrouterNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailVrouterNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-webui-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailWebuiNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailWebuiNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailWebuiNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/contrail-webui-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailWebuiNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContrailWebuiNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ContrailWebuiNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/customer-attachment/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/customer-attachments": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/CustomerAttachmentAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/dashboard/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/DashboardAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DashboardAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/DashboardAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/dashboards": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/DashboardAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DashboardAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/DashboardAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/database-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/database-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/DatabaseNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/discovery-service-assignment/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/discovery-service-assignments": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/DiscoveryServiceAssignmentAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/domain/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/DomainAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DomainAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/DomainAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/domains": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/DomainAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DomainAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/DomainAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/dsa-rule/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/DsaRuleAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DsaRuleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/DsaRuleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/dsa-rules": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/DsaRuleAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DsaRuleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/DsaRuleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/e2-service-provider/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/E2ServiceProviderAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/E2ServiceProviderAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/E2ServiceProviderAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/e2-service-providers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/E2ServiceProviderAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/E2ServiceProviderAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/E2ServiceProviderAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/firewall-policy/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallPolicyAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FirewallPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/firewall-policys": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallPolicyAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FirewallPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/firewall-rule/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/firewall-rules": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/FirewallRuleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/flavor/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/FlavorAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FlavorAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/FlavorAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/flavors": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/FlavorAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FlavorAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/FlavorAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/floating-ip-pool/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPPoolAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FloatingIPPoolAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPPoolAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/floating-ip-pools": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPPoolAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FloatingIPPoolAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPPoolAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/floating-ip/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FloatingIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/floating-ips": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FloatingIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/FloatingIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/forwarding-class/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/forwarding-classs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ForwardingClassAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/global-qos-config/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/global-qos-configs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalQosConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/global-system-config/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/global-system-configs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalSystemConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/global-vrouter-config/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/global-vrouter-configs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/GlobalVrouterConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/instance-ip/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/InstanceIPAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InstanceIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/InstanceIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/instance-ips": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/InstanceIPAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InstanceIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/InstanceIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/interface-route-table/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/interface-route-tables": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/InterfaceRouteTableAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/keypair/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/KeypairAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeypairAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/KeypairAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/keypairs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/KeypairAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeypairAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/KeypairAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/kubernetes-master-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesMasterNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KubernetesMasterNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesMasterNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/kubernetes-master-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesMasterNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KubernetesMasterNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesMasterNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/kubernetes-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KubernetesNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/kubernetes-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KubernetesNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/KubernetesNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-healthmonitor/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-healthmonitors": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerHealthmonitorAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-listener/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-listeners": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerListenerAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-member/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-members": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerMemberAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-pool/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer-pools": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerPoolAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancer/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/loadbalancers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LoadbalancerAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/location/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LocationAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocationAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LocationAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/locations": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LocationAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocationAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LocationAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/logical-interface/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/logical-interfaces": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalInterfaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/logical-router/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/logical-routers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/LogicalRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/namespace/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/NamespaceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NamespaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/NamespaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/namespaces": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/NamespaceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NamespaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/NamespaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/network-device-config/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceConfigAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/network-device-configs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceConfigAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/network-ipam/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/network-ipams": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkIpamAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/network-policy/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/network-policys": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/NetworkPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/NodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/NodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/NodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/NodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-compute-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackComputeNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackComputeNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackComputeNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-compute-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackComputeNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackComputeNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackComputeNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-control-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackControlNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackControlNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackControlNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-control-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackControlNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackControlNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackControlNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-monitoring-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackMonitoringNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackMonitoringNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackMonitoringNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-monitoring-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackMonitoringNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackMonitoringNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackMonitoringNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-network-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackNetworkNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackNetworkNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackNetworkNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-network-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackNetworkNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackNetworkNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackNetworkNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-storage-node/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackStorageNodeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackStorageNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackStorageNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/openstack-storage-nodes": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackStorageNodeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenstackStorageNodeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/OpenstackStorageNodeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/os-image/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/OsImageAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OsImageAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/OsImageAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/os-images": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/OsImageAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OsImageAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/OsImageAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/peering-policy/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/PeeringPolicyAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PeeringPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/PeeringPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/peering-policys": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/PeeringPolicyAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PeeringPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/PeeringPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/physical-interface/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/physical-interfaces": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalInterfaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/physical-router/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/physical-routers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/PhysicalRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/policy-management/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/PolicyManagementAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PolicyManagementAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/PolicyManagementAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/policy-managements": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/PolicyManagementAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PolicyManagementAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/PolicyManagementAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/port-tuple/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/PortTupleAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PortTupleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/PortTupleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/port-tuples": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/PortTupleAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PortTupleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/PortTupleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/port/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/PortAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PortAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/PortAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/ports": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/PortAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PortAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/PortAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/project/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ProjectAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ProjectAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ProjectAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProjectAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ProjectAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/provider-attachment/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/provider-attachments": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ProviderAttachmentAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/qos-config/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/QosConfigAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QosConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/QosConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/qos-configs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/QosConfigAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QosConfigAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/QosConfigAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/qos-queue/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/QosQueueAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QosQueueAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/QosQueueAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/qos-queues": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/QosQueueAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QosQueueAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/QosQueueAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/route-aggregate/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/route-aggregates": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteAggregateAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/route-table/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTableAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteTableAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTableAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/route-tables": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTableAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteTableAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTableAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/route-target/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTargetAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteTargetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTargetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/route-targets": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTargetAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RouteTargetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/RouteTargetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/routing-instance/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/routing-instances": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingInstanceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/routing-policy/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/routing-policys": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/RoutingPolicyAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/security-group/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/security-groups": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/security-logging-object/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityLoggingObjectAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecurityLoggingObjectAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityLoggingObjectAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/security-logging-objects": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityLoggingObjectAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecurityLoggingObjectAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/SecurityLoggingObjectAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/server/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServerAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServerAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServerAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/servers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServerAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServerAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServerAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-appliance-set/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-appliance-sets": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceSetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-appliance/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-appliances": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceApplianceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-connection-module/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceConnectionModuleAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceConnectionModuleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceConnectionModuleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-connection-modules": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceConnectionModuleAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceConnectionModuleAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceConnectionModuleAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-endpoint/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceEndpointAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceEndpointAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceEndpointAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-endpoints": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceEndpointAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceEndpointAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceEndpointAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-group/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceGroupAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-groups": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceGroupAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-health-check/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-health-checks": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceHealthCheckAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-instance/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-instances": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceInstanceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-object/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceObjectAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceObjectAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceObjectAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-objects": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceObjectAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceObjectAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceObjectAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-template/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/service-templates": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/ServiceTemplateAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/subnet/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/SubnetAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SubnetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/SubnetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/subnets": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/SubnetAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SubnetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/SubnetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/tag-type/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/TagTypeAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TagTypeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/TagTypeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/tag-types": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/TagTypeAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TagTypeAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/TagTypeAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/tag/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/TagAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TagAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/TagAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/TagAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TagAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/TagAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/UserAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/UserAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/UserAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/UserAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-DNS-record/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSRecordAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSRecordAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSRecordAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-DNS-records": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSRecordAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSRecordAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSRecordAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-DNS/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-DNSs": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualDNSAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-ip/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualIPAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-ips": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualIPAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualIPAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualIPAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-machine-interface/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-machine-interfaces": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineInterfaceAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-machine/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-machines": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualMachineAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-network/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-networks": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualNetworkAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-router/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/virtual-routers": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VirtualRouterAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/vpn-group/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/VPNGroupAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VPNGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/VPNGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/vpn-groups": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/VPNGroupAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VPNGroupAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/VPNGroupAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/widget/{id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Show resource",
                        "schema": {
                            "$ref": "#/definitions/WidgetAPISingleType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WidgetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update a resource",
                        "schema": {
                            "$ref": "#/definitions/WidgetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Delete a resource"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        },
        "/widgets": {
            "get": {
                "parameters": [
                    {
                        "description": "parent_uuid",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "description": "parent’s fully-qualified name delimited by ‘:’",
                        "name": "parent_fq_name_str",
                        "in": "query"
                    },
                    {
                        "description": "Commna separated object uuids \u003cexample1_uuid\u003e,\u003cexample2_uuid\u003e",
                        "name": "pobj_uuids",
                        "in": "query"
                    },
                    {
                        "description": "True if you need detailed data",
                        "name": "detail",
                        "in": "query"
                    },
                    {
                        "description": "back_ref_uuid",
                        "name": "back_ref_id",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation start marker",
                        "name": "page_marker",
                        "in": "query"
                    },
                    {
                        "description": "Pagenation limit",
                        "name": "page_limit",
                        "in": "query"
                    },
                    {
                        "description": "Return only resource counts",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "description": " Comma separated object field list you are interested in",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "description": "Included shared object in response.",
                        "name": "shared",
                        "in": "query"
                    },
                    {
                        "description": "Comma separated fileter list. Example check==a,check==b,name==Bob",
                        "name": "filters",
                        "in": "query"
                    },
                    {
                        "name": "exclude_hrefs",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "list a resource",
                        "schema": {
                            "$ref": "#/definitions/WidgetAPIListType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WidgetAPISingleType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a resource",
                        "schema": {
                            "$ref": "#/definitions/WidgetAPISingleType"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "409": {
                        "description": "Data conflict"
                    },
                    "500": {
                        "description": "Server Side Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "APIAccessListAPIListType": {
            "properties": {
                "api-access-lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIAccessListAPIType"
                    }
                }
            }
        },
        "APIAccessListAPISingleType": {
            "properties": {
                "api-access-list": {
                    "$ref": "#/definitions/APIAccessListAPIType"
                }
            }
        },
        "APIAccessListAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "api_access_list_entries": {
                    "description": "List of rules e.g network.* =\u003e admin:CRUD (admin can perform all ops on networks).",
                    "$ref": "#/definitions/RbacRuleEntriesType"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AccessControlListAPIListType": {
            "properties": {
                "access-control-lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessControlListAPIType"
                    }
                }
            }
        },
        "AccessControlListAPISingleType": {
            "properties": {
                "access-control-list": {
                    "$ref": "#/definitions/AccessControlListAPIType"
                }
            }
        },
        "AccessControlListAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "access_control_list_entries": {
                    "description": "Automatically generated by system based on security groups or network policies.",
                    "$ref": "#/definitions/AclEntriesType"
                },
                "access_control_list_hash": {
                    "id": "access_control_list_hash",
                    "description": "A hash value of all the access-control-list-entries in this ACL objects automatically generated by system.",
                    "type": "integer",
                    "items": null
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AccessType": {
            "type": "integer",
            "items": null
        },
        "AclEntriesType": {
            "type": "object",
            "items": null,
            "properties": {
                "acl_rule": {
                    "id": "acl_rule",
                    "description": "For Internal use only",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AclRuleType"
                    }
                },
                "dynamic": {
                    "id": "dynamic",
                    "description": "For Internal use only",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "AclRuleType": {
            "type": "object",
            "items": null,
            "properties": {
                "action_list": {
                    "description": "Actions to be performed if packets match condition",
                    "$ref": "#/definitions/ActionListType"
                },
                "direction": {
                    "description": "Direction in the rule",
                    "$ref": "#/definitions/DirectionType"
                },
                "match_condition": {
                    "description": "Match condition for packets",
                    "$ref": "#/definitions/MatchConditionType"
                },
                "rule_uuid": {
                    "id": "rule_uuid",
                    "description": "Rule UUID is identifier used in flow records to identify rule",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ActionListType": {
            "type": "object",
            "items": null,
            "properties": {
                "alert": {
                    "id": "alert",
                    "description": "For internal use only",
                    "type": "boolean",
                    "items": null
                },
                "apply_service": {
                    "id": "apply_service",
                    "description": "Ordered list of service instances in service chain applied to traffic matching the rule",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "assign_routing_instance": {
                    "id": "assign_routing_instance",
                    "description": "For internal use only",
                    "type": "string",
                    "items": null
                },
                "gateway_name": {
                    "id": "gateway_name",
                    "description": "For internal use only",
                    "type": "string",
                    "items": null
                },
                "log": {
                    "id": "log",
                    "description": "Flow records for traffic matching this rule are sent at higher priority",
                    "type": "boolean",
                    "items": null
                },
                "mirror_to": {
                    "description": "Mirror traffic matching this rule",
                    "$ref": "#/definitions/MirrorActionType"
                },
                "qos_action": {
                    "id": "qos_action",
                    "description": "FQN of Qos configuration object for QoS marking",
                    "type": "string",
                    "items": null
                },
                "simple_action": {
                    "description": "Simple allow(pass) or deny action for traffic matching this rule",
                    "$ref": "#/definitions/SimpleActionType"
                }
            }
        },
        "AddressAllocationModeType": {
            "type": "string",
            "items": null
        },
        "AddressGroupAPIListType": {
            "properties": {
                "address-groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressGroupAPIType"
                    }
                }
            }
        },
        "AddressGroupAPISingleType": {
            "properties": {
                "address-group": {
                    "$ref": "#/definitions/AddressGroupAPIType"
                }
            }
        },
        "AddressGroupAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "address_group_prefix": {
                    "description": "List of IP prefix",
                    "$ref": "#/definitions/SubnetListType"
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AddressMode": {
            "type": "string",
            "items": null
        },
        "AddressType": {
            "type": "object",
            "items": null,
            "properties": {
                "network_policy": {
                    "id": "network_policy",
                    "description": "Any address that belongs to virtual network which has this policy attached",
                    "type": "string",
                    "items": null
                },
                "security_group": {
                    "id": "security_group",
                    "description": "Any address that belongs to interface with this security-group",
                    "type": "string",
                    "items": null
                },
                "subnet": {
                    "description": "Any address that belongs to this subnet",
                    "$ref": "#/definitions/SubnetType"
                },
                "subnet_list": {
                    "id": "subnet_list",
                    "description": "Any address that belongs to any one of subnet in this list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubnetType"
                    }
                },
                "virtual_network": {
                    "id": "virtual_network",
                    "description": "Any address that belongs to this virtual network ",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AlarmAPIListType": {
            "properties": {
                "alarms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmAPIType"
                    }
                }
            }
        },
        "AlarmAPISingleType": {
            "properties": {
                "alarm": {
                    "$ref": "#/definitions/AlarmAPIType"
                }
            }
        },
        "AlarmAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "alarm_rules": {
                    "description": "Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example: \"alarm_rules\": {\"or_list\": [{\"and_list\": [{AlarmExpression1}, {AlarmExpression2}, ...]}, {\"and_list\": [{AlarmExpression3}, {AlarmExpression4}, ...]}]}",
                    "$ref": "#/definitions/AlarmOrList"
                },
                "alarm_severity": {
                    "description": "Severity level for the alarm.",
                    "$ref": "#/definitions/AlarmSeverity"
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "uve_keys": {
                    "description": "List of UVE tables or UVE objects where this alarm config should be applied. For example, rules based on NodeStatus UVE can be applied to multiple object types or specific uve objects such as analytics-node, config-node, control-node:\u003chostname\u003e, etc.,",
                    "$ref": "#/definitions/UveKeysType"
                }
            }
        },
        "AlarmAndList": {
            "type": "object",
            "items": null,
            "properties": {
                "and_list": {
                    "id": "and_list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmExpression"
                    }
                }
            }
        },
        "AlarmExpression": {
            "type": "object",
            "items": null,
            "properties": {
                "operand1": {
                    "id": "operand1",
                    "description": "UVE attribute specified in the dotted format. Example: NodeStatus.process_info.process_state",
                    "type": "string",
                    "items": null
                },
                "operand2": {
                    "description": "UVE attribute or a json value to compare with the UVE attribute in operand1",
                    "$ref": "#/definitions/AlarmOperand2"
                },
                "operations": {
                    "description": "operation to compare operand1 and operand2",
                    "$ref": "#/definitions/AlarmOperation"
                },
                "variables": {
                    "id": "variables",
                    "description": "List of UVE attributes that would be useful when the alarm is raised. For example, user may want to raise an alarm if the NodeStatus.process_info.process_state != PROCESS_STATE_RUNNING. But, it would be useful to know the process_name whose state != PROCESS_STATE_RUNNING. This UVE attribute which is neither part of operand1 nor operand2 may be specified in variables",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "AlarmOperand2": {
            "type": "object",
            "items": null,
            "properties": {
                "json_value": {
                    "id": "json_value",
                    "description": "json value as string",
                    "type": "string",
                    "items": null
                },
                "uve_attribute": {
                    "id": "uve_attribute",
                    "description": "UVE attribute specified in the dotted format. Example: NodeStatus.process_info.process_state",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AlarmOperation": {
            "type": "string",
            "items": null
        },
        "AlarmOrList": {
            "type": "object",
            "items": null,
            "properties": {
                "or_list": {
                    "id": "or_list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmAndList"
                    }
                }
            }
        },
        "AlarmSeverity": {
            "type": "integer",
            "items": null
        },
        "AliasIPAPIListType": {
            "properties": {
                "alias-ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AliasIPAPIType"
                    }
                }
            }
        },
        "AliasIPAPISingleType": {
            "properties": {
                "alias-ip": {
                    "$ref": "#/definitions/AliasIPAPIType"
                }
            }
        },
        "AliasIPAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "alias_ip_address": {
                    "description": "Alias ip address.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "alias_ip_address_family": {
                    "description": "Ip address family of the alias ip, IpV4 or IpV6",
                    "$ref": "#/definitions/IpAddressFamilyType"
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "project_ref": {
                    "description": "Reference to project from which this alias ip was allocated.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to virtual machine interface to which this alias ip is attached.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "AliasIPPoolAPIListType": {
            "properties": {
                "alias-ip-pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AliasIPPoolAPIType"
                    }
                }
            }
        },
        "AliasIPPoolAPISingleType": {
            "properties": {
                "alias-ip-pool": {
                    "$ref": "#/definitions/AliasIPPoolAPIType"
                }
            }
        },
        "AliasIPPoolAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "alias_ips": {
                    "description": "alias ip is a ip that can be assigned to virtual-machine-interface(VMI), By doing so VMI can now be part of the alias ip network. packets originating with alias-ip as the source-ip belongs to alias-ip-network",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AliasIPAPIType"
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AllocationPoolType": {
            "type": "object",
            "items": null,
            "properties": {
                "end": {
                    "id": "end",
                    "type": "string",
                    "items": null
                },
                "start": {
                    "id": "start",
                    "type": "string",
                    "items": null
                },
                "vrouter_specific_pool": {
                    "id": "vrouter_specific_pool",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "AllowedAddressPair": {
            "type": "object",
            "items": null,
            "properties": {
                "address_mode": {
                    "description": "Address-mode active-backup is used for VRRP address.                           Address-mode active-active is used for ECMP.",
                    "$ref": "#/definitions/AddressMode"
                },
                "ip": {
                    "$ref": "#/definitions/SubnetType"
                },
                "mac": {
                    "id": "mac",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AllowedAddressPairs": {
            "type": "object",
            "items": null,
            "properties": {
                "allowed_address_pair": {
                    "id": "allowed_address_pair",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllowedAddressPair"
                    }
                }
            }
        },
        "AnalyticsNodeAPIListType": {
            "properties": {
                "analytics-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AnalyticsNodeAPIType"
                    }
                }
            }
        },
        "AnalyticsNodeAPISingleType": {
            "properties": {
                "analytics-node": {
                    "$ref": "#/definitions/AnalyticsNodeAPIType"
                }
            }
        },
        "AnalyticsNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "analytics_node_ip_address": {
                    "description": "Ip address of the analytics node, set while provisioning.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AppformixNodeAPIListType": {
            "properties": {
                "appformix-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppformixNodeAPIType"
                    }
                }
            }
        },
        "AppformixNodeAPISingleType": {
            "properties": {
                "appformix-node": {
                    "$ref": "#/definitions/AppformixNodeAPIType"
                }
            }
        },
        "AppformixNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this appformix node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ApplicationPolicySetAPIListType": {
            "properties": {
                "application-policy-sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationPolicySetAPIType"
                    }
                }
            }
        },
        "ApplicationPolicySetAPISingleType": {
            "properties": {
                "application-policy-set": {
                    "$ref": "#/definitions/ApplicationPolicySetAPIType"
                }
            }
        },
        "ApplicationPolicySetAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "all_applications": {
                    "id": "all_applications",
                    "description": "If set, indicates application policy set to be applied to all application tags",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "firewall_policy_ref": {
                    "description": "Reference to firewall-policy attached to this application-policy",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/FirewallSequence"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "global_vrouter_config_ref": {
                    "description": "Reference to global-vrouter-config is automatically created by system for global           application policy sets",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "AutonomousSystemType": {
            "type": "integer",
            "items": null
        },
        "BGPAsAServiceAPIListType": {
            "properties": {
                "bgp-as-a-services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BGPAsAServiceAPIType"
                    }
                }
            }
        },
        "BGPAsAServiceAPISingleType": {
            "properties": {
                "bgp-as-a-service": {
                    "$ref": "#/definitions/BGPAsAServiceAPIType"
                }
            }
        },
        "BGPAsAServiceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "autonomous_system": {
                    "description": "16 bit BGP Autonomous System number for the cluster.",
                    "$ref": "#/definitions/AutonomousSystemType"
                },
                "bgpaas_ip_address": {
                    "description": "Ip address of the BGP peer.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "bgpaas_ipv4_mapped_ipv6_nexthop": {
                    "id": "bgpaas_ipv4_mapped_ipv6_nexthop",
                    "description": "True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to regular ipv6 address) as the bgp nexthop for ipv6 routes.",
                    "type": "boolean",
                    "items": null
                },
                "bgpaas_session_attributes": {
                    "id": "bgpaas_session_attributes",
                    "description": "BGP peering session attributes.",
                    "type": "string",
                    "items": null
                },
                "bgpaas_shared": {
                    "id": "bgpaas_shared",
                    "description": "True if only one BGP router needs to be created. Otherwise, one BGP router is created for each VMI",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "bgpaas_suppress_route_advertisement": {
                    "id": "bgpaas_suppress_route_advertisement",
                    "description": "True when server should not advertise any routes to the client i.e. the client has static routes (typically a default) configured.",
                    "type": "boolean",
                    "items": null
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_health_check_ref": {
                    "description": "Reference to health check object attached to BGPaaS object, used to enable BFD health check over active BGPaaS VMI.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to VMI on which BGPaaS BGP peering will happen.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "BGPRouterAPIListType": {
            "properties": {
                "bgp-routers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BGPRouterAPIType"
                    }
                }
            }
        },
        "BGPRouterAPISingleType": {
            "properties": {
                "bgp-router": {
                    "$ref": "#/definitions/BGPRouterAPIType"
                }
            }
        },
        "BGPRouterAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "BGPVPNAPIListType": {
            "properties": {
                "bgpvpns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BGPVPNAPIType"
                    }
                }
            }
        },
        "BGPVPNAPISingleType": {
            "properties": {
                "bgpvpn": {
                    "$ref": "#/definitions/BGPVPNAPIType"
                }
            }
        },
        "BGPVPNAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "bgpvpn_type": {
                    "description": "BGP VPN type selection between IP VPN (l3) and Ethernet VPN (l2) (default: l3).",
                    "$ref": "#/definitions/VpnType"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "export_route_target_list": {
                    "description": "List of route targets that are used as export for this virtual network.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "import_route_target_list": {
                    "description": "List of route targets that are used as import for this virtual network.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "route_target_list": {
                    "description": "List of route targets that are used as both import and export for this virtual network.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "BGPaaServiceParametersType": {
            "type": "object",
            "items": null,
            "properties": {
                "port_end": {
                    "$ref": "#/definitions/L4PortType"
                },
                "port_start": {
                    "$ref": "#/definitions/L4PortType"
                }
            }
        },
        "BaremetalNodeAPIListType": {
            "properties": {
                "baremetal-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BaremetalNodeAPIType"
                    }
                }
            }
        },
        "BaremetalNodeAPISingleType": {
            "properties": {
                "baremetal-node": {
                    "$ref": "#/definitions/BaremetalNodeAPIType"
                }
            }
        },
        "BaremetalNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "bm_properties": {
                    "description": "Details of baremetal hardware for scheduler",
                    "$ref": "#/definitions/BaremetalProperties"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "console_enabled": {
                    "id": "console_enabled",
                    "description": "Indicates whether console access is enabled or disabled on this node",
                    "type": "boolean",
                    "items": null
                },
                "created_at": {
                    "id": "created_at",
                    "description": "The UTC date and time when the resource was created, ISO 8601 format",
                    "type": "string",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "driver_info": {
                    "description": "Details of the driver for power management",
                    "$ref": "#/definitions/DriverInfo"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "instance_info": {
                    "description": "Details of Instance launched on the baremetal",
                    "$ref": "#/definitions/InstanceInfo"
                },
                "instance_uuid": {
                    "id": "instance_uuid",
                    "description": "UUID of the Nova instance associated with this Node",
                    "type": "string",
                    "items": null
                },
                "last_error": {
                    "id": "last_error",
                    "description": "Any error from the most recent (last) transaction that started but failed to finish.",
                    "type": "string",
                    "items": null
                },
                "maintenance": {
                    "id": "maintenance",
                    "description": "Whether or not this Node is currently in maintenance mode",
                    "type": "boolean",
                    "items": null
                },
                "maintenance_reason": {
                    "id": "maintenance_reason",
                    "description": "Reason why this Node was placed into maintenance mode",
                    "type": "string",
                    "items": null
                },
                "name": {
                    "id": "name",
                    "description": "Name of the nodename to easily identify Baremetal",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "power_state": {
                    "id": "power_state",
                    "description": "The current power state of this Node",
                    "type": "string",
                    "items": null
                },
                "provision_state": {
                    "id": "provision_state",
                    "description": "The current provisioning state of this Node",
                    "type": "string",
                    "items": null
                },
                "target_power_state": {
                    "id": "target_power_state",
                    "description": "If a power state transition has been requested, this field represents the requested state",
                    "type": "string",
                    "items": null
                },
                "target_provision_state": {
                    "id": "target_provision_state",
                    "description": "If a provisioning action has been requested, this field represents the requested state",
                    "type": "string",
                    "items": null
                },
                "updated_at": {
                    "id": "updated_at",
                    "description": "The UTC date and time when the resource was created, ISO 8601 format",
                    "type": "string",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "BaremetalPortAPIListType": {
            "properties": {
                "baremetal-ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BaremetalPortAPIType"
                    }
                }
            }
        },
        "BaremetalPortAPISingleType": {
            "properties": {
                "baremetal-port": {
                    "$ref": "#/definitions/BaremetalPortAPIType"
                }
            }
        },
        "BaremetalPortAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "created_at": {
                    "id": "created_at",
                    "description": "The UTC date and time when the resource was created, ISO 8601 format",
                    "type": "string",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "local_link_connection": {
                    "description": "The Port binding profile",
                    "$ref": "#/definitions/LocalLinkConnection"
                },
                "mac_address": {
                    "id": "mac_address",
                    "description": "Mac Address of the NIC of Baremetal",
                    "type": "string",
                    "items": null
                },
                "node": {
                    "id": "node",
                    "description": "UUID of the node where this port is connected",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "pxe_enabled": {
                    "id": "pxe_enabled",
                    "description": "Indicates whether PXE is enabled or disabled on the Port.",
                    "type": "boolean",
                    "items": null
                },
                "updated_at": {
                    "id": "updated_at",
                    "description": "The UTC date and time when the resource was created, ISO 8601 format",
                    "type": "string",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "BaremetalProperties": {
            "type": "object",
            "items": null,
            "properties": {
                "cpu_arch": {
                    "id": "cpu_arch",
                    "description": "Architecture of the baremetal server",
                    "type": "string",
                    "default": "x86_64",
                    "items": null
                },
                "cpu_count": {
                    "id": "cpu_count",
                    "description": "Number of CPU cores on the baremetal",
                    "type": "integer",
                    "items": null
                },
                "disk_gb": {
                    "id": "disk_gb",
                    "description": "Disk size of root device (in GB)",
                    "type": "integer",
                    "items": null
                },
                "memory_mb": {
                    "id": "memory_mb",
                    "description": "RAM of the Baremetal server (in MB)",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "BridgeDomainAPIListType": {
            "properties": {
                "bridge-domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BridgeDomainAPIType"
                    }
                }
            }
        },
        "BridgeDomainAPISingleType": {
            "properties": {
                "bridge-domain": {
                    "$ref": "#/definitions/BridgeDomainAPIType"
                }
            }
        },
        "BridgeDomainAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "isid": {
                    "description": "i-sid value",
                    "$ref": "#/definitions/IsidType"
                },
                "mac_aging_time": {
                    "description": "MAC aging time on the network",
                    "$ref": "#/definitions/MACAgingTime"
                },
                "mac_learning_enabled": {
                    "id": "mac_learning_enabled",
                    "description": "Enable MAC learning on the network",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "mac_limit_control": {
                    "description": "MAC limit control on the network",
                    "$ref": "#/definitions/MACLimitControlType"
                },
                "mac_move_control": {
                    "description": "MAC move control on the network",
                    "$ref": "#/definitions/MACMoveLimitControlType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "BridgeDomainMembershipType": {
            "type": "object",
            "items": null,
            "properties": {
                "vlan_tag": {
                    "description": "VLAN tag of the incoming packet that maps the                      virtual-machine-interface to bridge domain",
                    "$ref": "#/definitions/Dot1QTagType"
                }
            }
        },
        "CommunityAttribute": {
            "type": "array",
            "items": {
                "type": "string",
                "items": null
            }
        },
        "CommunityAttributes": {
            "type": "object",
            "items": null,
            "properties": {
                "community_attribute": {
                    "$ref": "#/definitions/CommunityAttribute"
                }
            }
        },
        "ConfigNodeAPIListType": {
            "properties": {
                "config-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConfigNodeAPIType"
                    }
                }
            }
        },
        "ConfigNodeAPISingleType": {
            "properties": {
                "config-node": {
                    "$ref": "#/definitions/ConfigNodeAPIType"
                }
            }
        },
        "ConfigNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "config_node_ip_address": {
                    "description": "Ip address of the config node, set while provisioning.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ConfigRootAPIListType": {
            "properties": {
                "config-roots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConfigRootAPIType"
                    }
                }
            }
        },
        "ConfigRootAPISingleType": {
            "properties": {
                "config-root": {
                    "$ref": "#/definitions/ConfigRootAPIType"
                }
            }
        },
        "ConfigRootAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "domains": {
                    "description": "Domain is authentication namespace, a collection of projects.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DomainAPIType"
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "global_system_configs": {
                    "description": "Global system config is object where all global system configuration is present.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalSystemConfigAPIType"
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "tag_ref": {
                    "description": "Attribute attached to objects - has a type and value",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "tags": {
                    "description": "Attribute attached to objects - has a type and value",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ConfiguredSecurityGroupIdType": {
            "type": "integer",
            "default": "0",
            "items": null
        },
        "ContrailAnalyticsDatabaseNodeAPIListType": {
            "properties": {
                "contrail-analytics-database-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPIType"
                    }
                }
            }
        },
        "ContrailAnalyticsDatabaseNodeAPISingleType": {
            "properties": {
                "contrail-analytics-database-node": {
                    "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPIType"
                }
            }
        },
        "ContrailAnalyticsDatabaseNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this analyticsdb node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailAnalyticsNodeAPIListType": {
            "properties": {
                "contrail-analytics-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailAnalyticsNodeAPIType"
                    }
                }
            }
        },
        "ContrailAnalyticsNodeAPISingleType": {
            "properties": {
                "contrail-analytics-node": {
                    "$ref": "#/definitions/ContrailAnalyticsNodeAPIType"
                }
            }
        },
        "ContrailAnalyticsNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this analytics node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailClusterAPIListType": {
            "properties": {
                "contrail-clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailClusterAPIType"
                    }
                }
            }
        },
        "ContrailClusterAPISingleType": {
            "properties": {
                "contrail-cluster": {
                    "$ref": "#/definitions/ContrailClusterAPIType"
                }
            }
        },
        "ContrailClusterAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "appformix_nodes": {
                    "description": "Parent of this appformix node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppformixNodeAPIType"
                    }
                },
                "config_audit_ttl": {
                    "id": "config_audit_ttl",
                    "description": "Configuration Audit Retention Time in hours",
                    "type": "string",
                    "title": "Configuration Audit Retention Time",
                    "default": "2160",
                    "items": null
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "container_registry": {
                    "id": "container_registry",
                    "description": "Container registry to pull contrail containers",
                    "type": "string",
                    "title": "Container Registry",
                    "default": "opencontrailnightly",
                    "items": null
                },
                "contrail_analytics_database_nodes": {
                    "description": "Parent of this analyticsdb node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailAnalyticsDatabaseNodeAPIType"
                    }
                },
                "contrail_analytics_nodes": {
                    "description": "Parent of this analytics node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailAnalyticsNodeAPIType"
                    }
                },
                "contrail_config_database_nodes": {
                    "description": "Parent of this configdb node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailConfigDatabaseNodeAPIType"
                    }
                },
                "contrail_config_nodes": {
                    "description": "Parent of this config node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailConfigNodeAPIType"
                    }
                },
                "contrail_control_nodes": {
                    "description": "Parent of this control node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailControlNodeAPIType"
                    }
                },
                "contrail_storage_nodes": {
                    "description": "Parent of this storage node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailStorageNodeAPIType"
                    }
                },
                "contrail_version": {
                    "id": "contrail_version",
                    "description": "Version of contrail containers to be used.",
                    "type": "string",
                    "title": "Contrail Version",
                    "items": null
                },
                "contrail_vrouter_nodes": {
                    "description": "Parent of this vrouter node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailVrouterNodeAPIType"
                    }
                },
                "contrail_webui_nodes": {
                    "description": "Parent of this webui node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailWebuiNodeAPIType"
                    }
                },
                "default_gateway": {
                    "id": "default_gateway",
                    "description": "Default Gateway",
                    "type": "string",
                    "title": "Default Gateway",
                    "default": "",
                    "items": null
                },
                "default_vrouter_bond_interface": {
                    "id": "default_vrouter_bond_interface",
                    "description": "vRouter Bond Interface",
                    "type": "string",
                    "title": "Default vRouter Bond Interface",
                    "default": "bond0",
                    "items": null
                },
                "default_vrouter_bond_interface_members": {
                    "id": "default_vrouter_bond_interface_members",
                    "description": "vRouter Bond Interface Members",
                    "type": "string",
                    "title": "Default vRouter Bond Interface Members",
                    "default": "ens7f0,ens7f1",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "flow_ttl": {
                    "id": "flow_ttl",
                    "description": "Flow Data Retention Time in hours",
                    "type": "string",
                    "title": "Flow Data Retention Time",
                    "default": "2160",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "kubernetes_master_nodes": {
                    "description": "Parent of this kubernetes master node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KubernetesMasterNodeAPIType"
                    }
                },
                "kubernetes_nodes": {
                    "description": "Parent of this kubernetes node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KubernetesNodeAPIType"
                    }
                },
                "openstack_compute_nodes": {
                    "description": "Parent of this openstack_compute node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackComputeNodeAPIType"
                    }
                },
                "openstack_control_nodes": {
                    "description": "Parent of this openstack_control node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackControlNodeAPIType"
                    }
                },
                "openstack_enable_haproxy": {
                    "id": "openstack_enable_haproxy",
                    "description": "Configure haproxy in openstack control node",
                    "type": "string",
                    "title": "Openstack Enable Haproxy",
                    "default": "yes",
                    "items": null
                },
                "openstack_external_vip": {
                    "id": "openstack_external_vip",
                    "description": "VIP for openstack external network",
                    "type": "string",
                    "title": "Openstack External VIP",
                    "items": null
                },
                "openstack_external_vip_interface": {
                    "id": "openstack_external_vip_interface",
                    "description": "Interface to configure VIP for openstack external network",
                    "type": "string",
                    "title": "Openstack External VIP Interface",
                    "items": null
                },
                "openstack_internal_vip": {
                    "id": "openstack_internal_vip",
                    "description": "VIP for openstack internal network",
                    "type": "string",
                    "title": "Openstack Internal VIP",
                    "items": null
                },
                "openstack_internal_vip_interface": {
                    "id": "openstack_internal_vip_interface",
                    "description": "VIP for openstack internal network",
                    "type": "string",
                    "title": "Openstack Internal VIP",
                    "items": null
                },
                "openstack_monitoring_nodes": {
                    "description": "Parent of this openstack_monitoring node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackMonitoringNodeAPIType"
                    }
                },
                "openstack_network_nodes": {
                    "description": "Parent of this openstack_network node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackNetworkNodeAPIType"
                    }
                },
                "openstack_storage_nodes": {
                    "description": "Parent of this openstack_storage node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackStorageNodeAPIType"
                    }
                },
                "orchestrator": {
                    "id": "orchestrator",
                    "description": "Orchestrator to use with contrrail",
                    "type": "string",
                    "title": "Orchestrator",
                    "default": "",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioner_type": {
                    "id": "provisioner_type",
                    "description": "Tool to be used to provision the cluster",
                    "type": "string",
                    "title": "Provisioning Tool",
                    "default": "ansible",
                    "items": null
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "rabbitmq_port": {
                    "id": "rabbitmq_port",
                    "description": "RabbitMQ port used to connect to RabbitMQ.",
                    "type": "string",
                    "title": "RabbitMQ Port",
                    "default": 5672,
                    "items": null
                },
                "statistics_ttl": {
                    "id": "statistics_ttl",
                    "description": "Statistics Data Retention Time in hours",
                    "type": "string",
                    "title": "Statistics Data Retention Time",
                    "default": "2160",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailConfigDatabaseNodeAPIListType": {
            "properties": {
                "contrail-config-database-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailConfigDatabaseNodeAPIType"
                    }
                }
            }
        },
        "ContrailConfigDatabaseNodeAPISingleType": {
            "properties": {
                "contrail-config-database-node": {
                    "$ref": "#/definitions/ContrailConfigDatabaseNodeAPIType"
                }
            }
        },
        "ContrailConfigDatabaseNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this configdb node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailConfigNodeAPIListType": {
            "properties": {
                "contrail-config-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailConfigNodeAPIType"
                    }
                }
            }
        },
        "ContrailConfigNodeAPISingleType": {
            "properties": {
                "contrail-config-node": {
                    "$ref": "#/definitions/ContrailConfigNodeAPIType"
                }
            }
        },
        "ContrailConfigNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this config node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailControlNodeAPIListType": {
            "properties": {
                "contrail-control-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailControlNodeAPIType"
                    }
                }
            }
        },
        "ContrailControlNodeAPISingleType": {
            "properties": {
                "contrail-control-node": {
                    "$ref": "#/definitions/ContrailControlNodeAPIType"
                }
            }
        },
        "ContrailControlNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this control node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailStorageNodeAPIListType": {
            "properties": {
                "contrail-storage-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailStorageNodeAPIType"
                    }
                }
            }
        },
        "ContrailStorageNodeAPISingleType": {
            "properties": {
                "contrail-storage-node": {
                    "$ref": "#/definitions/ContrailStorageNodeAPIType"
                }
            }
        },
        "ContrailStorageNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "journal_drives": {
                    "id": "journal_drives",
                    "description": "SSD Drives to use for journals",
                    "type": "string",
                    "title": "Journal Drives",
                    "default": "sdf",
                    "items": null
                },
                "node_ref": {
                    "description": "Reference to node object for this storage node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "osd_drives": {
                    "id": "osd_drives",
                    "description": "Drives to use for cloud storage",
                    "type": "string",
                    "title": "Stoage Drives",
                    "default": "sdc,sdd,sde",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "storage_access_bond_interface_members": {
                    "id": "storage_access_bond_interface_members",
                    "description": "Storage Management  Bond Interface Members",
                    "type": "string",
                    "title": "Storage Access  Bond Interface Members",
                    "default": "ens8f0,ens8f1",
                    "items": null
                },
                "storage_backend_bond_interface_members": {
                    "id": "storage_backend_bond_interface_members",
                    "description": "Storage Backend Bond Interface Members",
                    "type": "string",
                    "title": "Storage Backend Bond Interface Members",
                    "default": "ens9f0,ens9f1",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ContrailVrouterNodeAPIListType": {
            "properties": {
                "contrail-vrouter-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailVrouterNodeAPIType"
                    }
                }
            }
        },
        "ContrailVrouterNodeAPISingleType": {
            "properties": {
                "contrail-vrouter-node": {
                    "$ref": "#/definitions/ContrailVrouterNodeAPIType"
                }
            }
        },
        "ContrailVrouterNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "default_gateway": {
                    "id": "default_gateway",
                    "description": "Default Gateway",
                    "type": "string",
                    "title": "Default Gateway",
                    "default": "",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this vrouter node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "vrouter_bond_interface": {
                    "id": "vrouter_bond_interface",
                    "description": "vRouter Bond Interface",
                    "type": "string",
                    "title": "vRouter Bond Interface",
                    "default": "bond0",
                    "items": null
                },
                "vrouter_bond_interface_members": {
                    "id": "vrouter_bond_interface_members",
                    "description": "vRouter Bond Interface Members",
                    "type": "string",
                    "title": "vRouter Bond Interface Members",
                    "default": "ens7f0,ens7f1",
                    "items": null
                },
                "vrouter_type": {
                    "id": "vrouter_type",
                    "type": "string",
                    "title": "vRouter Type",
                    "default": "kernel",
                    "items": null
                }
            }
        },
        "ContrailWebuiNodeAPIListType": {
            "properties": {
                "contrail-webui-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContrailWebuiNodeAPIType"
                    }
                }
            }
        },
        "ContrailWebuiNodeAPISingleType": {
            "properties": {
                "contrail-webui-node": {
                    "$ref": "#/definitions/ContrailWebuiNodeAPIType"
                }
            }
        },
        "ContrailWebuiNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this webui node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ControlTrafficDscpType": {
            "type": "object",
            "items": null,
            "properties": {
                "analytics": {
                    "description": "DSCP value for traffic towards analytics",
                    "$ref": "#/definitions/DscpValueType"
                },
                "control": {
                    "description": "DSCP value for control protocols traffic",
                    "$ref": "#/definitions/DscpValueType"
                },
                "dns": {
                    "description": "DSCP value for DNS traffic",
                    "$ref": "#/definitions/DscpValueType"
                }
            }
        },
        "CustomerAttachmentAPIListType": {
            "properties": {
                "customer-attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomerAttachmentAPIType"
                    }
                }
            }
        },
        "CustomerAttachmentAPISingleType": {
            "properties": {
                "customer-attachment": {
                    "$ref": "#/definitions/CustomerAttachmentAPIType"
                }
            }
        },
        "CustomerAttachmentAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "floating_ip_ref": {
                    "description": "Not in Use.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Not in Use.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "DashboardAPIListType": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardAPIType"
                    }
                }
            }
        },
        "DashboardAPISingleType": {
            "properties": {
                "dashboard": {
                    "$ref": "#/definitions/DashboardAPIType"
                }
            }
        },
        "DashboardAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "container_config": {
                    "id": "container_config",
                    "type": "string",
                    "title": "Container Config",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DatabaseNodeAPIListType": {
            "properties": {
                "database-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DatabaseNodeAPIType"
                    }
                }
            }
        },
        "DatabaseNodeAPISingleType": {
            "properties": {
                "database-node": {
                    "$ref": "#/definitions/DatabaseNodeAPIType"
                }
            }
        },
        "DatabaseNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "database_node_ip_address": {
                    "description": "Ip address of the database node, set while provisioning.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DhcpOptionType": {
            "type": "object",
            "items": null,
            "properties": {
                "dhcp_option_name": {
                    "id": "dhcp_option_name",
                    "description": "Name of the DHCP option",
                    "type": "string",
                    "items": null
                },
                "dhcp_option_value": {
                    "id": "dhcp_option_value",
                    "description": "Encoded DHCP option value (decimal)",
                    "type": "string",
                    "items": null
                },
                "dhcp_option_value_bytes": {
                    "id": "dhcp_option_value_bytes",
                    "description": "Value of the DHCP option to be copied byte by byte",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DhcpOptionsListType": {
            "type": "object",
            "items": null,
            "properties": {
                "dhcp_option": {
                    "id": "dhcp_option",
                    "description": "List of DHCP options",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DhcpOptionType"
                    }
                }
            }
        },
        "DirectionType": {
            "type": "string",
            "items": null
        },
        "DiscoveryPubSubEndPointType": {
            "type": "object",
            "items": null,
            "properties": {
                "ep_id": {
                    "id": "ep_id",
                    "description": "Specific service or client which is set of one.",
                    "type": "string",
                    "items": null
                },
                "ep_prefix": {
                    "description": "All  servers or clients whose ip match this prefix",
                    "$ref": "#/definitions/SubnetType"
                },
                "ep_type": {
                    "id": "ep_type",
                    "description": "Type of service or client",
                    "type": "string",
                    "items": null
                },
                "ep_version": {
                    "id": "ep_version",
                    "description": "All  servers or clients whose version match this version",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DiscoveryServiceAssignmentAPIListType": {
            "properties": {
                "discovery-service-assignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiscoveryServiceAssignmentAPIType"
                    }
                }
            }
        },
        "DiscoveryServiceAssignmentAPISingleType": {
            "properties": {
                "discovery-service-assignment": {
                    "$ref": "#/definitions/DiscoveryServiceAssignmentAPIType"
                }
            }
        },
        "DiscoveryServiceAssignmentAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "dsa_rules": {
                    "description": "Discovery service rule for assigning subscriber to publisher. (set of subscriber) can be assigned to (set of publisher).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsaRuleAPIType"
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DiscoveryServiceAssignmentType": {
            "type": "object",
            "items": null,
            "properties": {
                "publisher": {
                    "description": "Publisher set",
                    "$ref": "#/definitions/DiscoveryPubSubEndPointType"
                },
                "subscriber": {
                    "id": "subscriber",
                    "description": "subscriber set",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiscoveryPubSubEndPointType"
                    }
                }
            }
        },
        "DnsRecordClassType": {
            "type": "string",
            "items": null
        },
        "DnsRecordOrderType": {
            "type": "string",
            "items": null
        },
        "DnsRecordTypeType": {
            "type": "string",
            "items": null
        },
        "DomainAPIListType": {
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DomainAPIType"
                    }
                }
            }
        },
        "DomainAPISingleType": {
            "properties": {
                "domain": {
                    "$ref": "#/definitions/DomainAPIType"
                }
            }
        },
        "DomainAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "api_access_lists": {
                    "description": "API access list is list of rules that define role based access to each API and its properties at domain level.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIAccessListAPIType"
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "domain_limits": {
                    "description": "Domain level quota, not currently implemented",
                    "$ref": "#/definitions/DomainLimitsType"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "namespaces": {
                    "description": "Namespace is unique networking namespace within this domain. If namespace is not present then default namespace of default project is used.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NamespaceAPIType"
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "projects": {
                    "description": "Project represent one instance of application or tenant.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectAPIType"
                    }
                },
                "service_templates": {
                    "description": "Service template defines how a service may be deployed in the network. Service instance is instantiated from config in service template.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceTemplateAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_DNSs": {
                    "description": "Virtual DNS server is DNS as service for tenants. It is inbound DNS service for virtual machines in this project. DNS requests by end points inside this project/IPAM are served by this DNS server rules.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualDNSAPIType"
                    }
                }
            }
        },
        "DomainLimitsType": {
            "type": "object",
            "items": null,
            "properties": {
                "project_limit": {
                    "id": "project_limit",
                    "description": "Maximum number of projects allowed in this domain",
                    "type": "integer",
                    "items": null
                },
                "security_group_limit": {
                    "id": "security_group_limit",
                    "description": "Maximum number of security groups allowed in this domain",
                    "type": "integer",
                    "items": null
                },
                "virtual_network_limit": {
                    "id": "virtual_network_limit",
                    "description": "Maximum number of virtual networks allowed in this domain",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "Dot1QTagType": {
            "type": "integer",
            "items": null
        },
        "DriverInfo": {
            "type": "object",
            "items": null,
            "properties": {
                "deploy_kernel": {
                    "id": "deploy_kernel",
                    "description": "UUID of the deploy kernel",
                    "type": "string",
                    "items": null
                },
                "deploy_ramdisk": {
                    "id": "deploy_ramdisk",
                    "description": "UUID of the deploy initrd/ramdisk",
                    "type": "string",
                    "items": null
                },
                "ipmi_address": {
                    "id": "ipmi_address",
                    "description": "IPMI address of the server to manage boot device and power management",
                    "type": "string",
                    "items": null
                },
                "ipmi_password": {
                    "id": "ipmi_password",
                    "description": "Password to access IPMI",
                    "type": "string",
                    "items": null
                },
                "ipmi_username": {
                    "id": "ipmi_username",
                    "description": "Username to access IPMI",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DsaRuleAPIListType": {
            "properties": {
                "dsa-rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DsaRuleAPIType"
                    }
                }
            }
        },
        "DsaRuleAPISingleType": {
            "properties": {
                "dsa-rule": {
                    "$ref": "#/definitions/DsaRuleAPIType"
                }
            }
        },
        "DsaRuleAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "dsa_rule_entry": {
                    "description": "rule entry defining publisher set and subscriber set.",
                    "$ref": "#/definitions/DiscoveryServiceAssignmentType"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "DscpValueType": {
            "type": "integer",
            "items": null
        },
        "E2ServiceProviderAPIListType": {
            "properties": {
                "e2-service-providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/E2ServiceProviderAPIType"
                    }
                }
            }
        },
        "E2ServiceProviderAPISingleType": {
            "properties": {
                "e2-service-provider": {
                    "$ref": "#/definitions/E2ServiceProviderAPIType"
                }
            }
        },
        "E2ServiceProviderAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "e2_service_provider_promiscuous": {
                    "id": "e2_service_provider_promiscuous",
                    "description": "This service provider is connected to all other service providers.",
                    "type": "boolean",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "peering_policy_ref": {
                    "description": "Links the service provider to a peering policy.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_router_ref": {
                    "description": "Links the service provider to peer routers.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "E2servicetype": {
            "type": "string",
            "items": null
        },
        "EcmpHashingIncludeFields": {
            "type": "object",
            "items": null,
            "properties": {
                "destination_ip": {
                    "id": "destination_ip",
                    "description": "When false, do not use destination ip in the ECMP hash calculation",
                    "type": "boolean",
                    "items": null
                },
                "destination_port": {
                    "id": "destination_port",
                    "description": "When false, do not use destination port in the ECMP hash calculation",
                    "type": "boolean",
                    "items": null
                },
                "hashing_configured": {
                    "id": "hashing_configured",
                    "description": "When True, Packet header fields used in calculating ECMP hash is decided by following flags",
                    "type": "boolean",
                    "items": null
                },
                "ip_protocol": {
                    "id": "ip_protocol",
                    "description": "When false, do not use ip protocol in the ECMP hash calculation",
                    "type": "boolean",
                    "items": null
                },
                "source_ip": {
                    "id": "source_ip",
                    "description": "When false, do not use source ip in the ECMP hash calculation",
                    "type": "boolean",
                    "items": null
                },
                "source_port": {
                    "id": "source_port",
                    "description": "When false, do not use source port in the ECMP hash calculation",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "EncapsulationPrioritiesType": {
            "type": "object",
            "items": null,
            "properties": {
                "encapsulation": {
                    "description": "Ordered list of encapsulation types to be used in priority",
                    "$ref": "#/definitions/EncapsulationType"
                }
            }
        },
        "EncapsulationType": {
            "type": "array",
            "items": {
                "type": "string",
                "items": null
            }
        },
        "EndOfRibTimeType": {
            "type": "integer",
            "items": null
        },
        "EtherType": {
            "type": "string",
            "items": null
        },
        "FatFlowProtocols": {
            "type": "object",
            "items": null,
            "properties": {
                "fat_flow_protocol": {
                    "id": "fat_flow_protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProtocolType"
                    }
                }
            }
        },
        "FirewallPolicyAPIListType": {
            "properties": {
                "firewall-policys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallPolicyAPIType"
                    }
                }
            }
        },
        "FirewallPolicyAPISingleType": {
            "properties": {
                "firewall-policy": {
                    "$ref": "#/definitions/FirewallPolicyAPIType"
                }
            }
        },
        "FirewallPolicyAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "firewall_rule_ref": {
                    "description": "Reference to firewall-rule attached to this firewall-policy",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/FirewallSequence"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "security_logging_object_ref": {
                    "description": "Reference to security-logging-object attached to this firewall-policy",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "FirewallRuleAPIListType": {
            "properties": {
                "firewall-rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallRuleAPIType"
                    }
                }
            }
        },
        "FirewallRuleAPISingleType": {
            "properties": {
                "firewall-rule": {
                    "$ref": "#/definitions/FirewallRuleAPIType"
                }
            }
        },
        "FirewallRuleAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "action_list": {
                    "description": "Actions to be performed if packets match condition",
                    "$ref": "#/definitions/ActionListType"
                },
                "address_group_ref": {
                    "description": "Reference to address group attached to endpoints",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "direction": {
                    "description": "Direction in the rule",
                    "$ref": "#/definitions/FirewallRuleDirectionType"
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "endpoint_1": {
                    "description": "match condition for traffic source",
                    "$ref": "#/definitions/FirewallRuleEndpointType"
                },
                "endpoint_2": {
                    "description": "match condition for traffic destination",
                    "$ref": "#/definitions/FirewallRuleEndpointType"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "match_tag_types": {
                    "description": "matching tags ids for source and destination endpoints",
                    "$ref": "#/definitions/FirewallRuleMatchTagsTypeIdList"
                },
                "match_tags": {
                    "description": "matching tags for source and destination endpoints",
                    "$ref": "#/definitions/FirewallRuleMatchTagsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "security_logging_object_ref": {
                    "description": "Reference to security-logging-object attached to this firewall-rule",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service": {
                    "description": "Service (port, protocol) for packets match condition",
                    "$ref": "#/definitions/FirewallServiceType"
                },
                "service_group_ref": {
                    "description": "Reference to service-group attached to this firewall policy",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_network_ref": {
                    "description": "Reference to virtual network attached to endpoints",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "FirewallRuleDirectionType": {
            "type": "string",
            "items": null
        },
        "FirewallRuleEndpointType": {
            "type": "object",
            "items": null,
            "properties": {
                "address_group": {
                    "id": "address_group",
                    "description": "Any workload with interface in this address-group",
                    "type": "string",
                    "items": null
                },
                "any": {
                    "id": "any",
                    "description": "Match any workload",
                    "type": "boolean",
                    "items": null
                },
                "subnet": {
                    "description": "Any workload that belongs to this subnet",
                    "$ref": "#/definitions/SubnetType"
                },
                "tag_ids": {
                    "id": "tag_ids",
                    "description": "Any workload with tags ids matching all the tags ids in this list",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "items": null
                    }
                },
                "tags": {
                    "id": "tags",
                    "description": "Any workload with tags matching tags in this list",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "virtual_network": {
                    "id": "virtual_network",
                    "description": "Any workload that belongs to this virtual network ",
                    "type": "string",
                    "items": null
                }
            }
        },
        "FirewallRuleMatchTagsType": {
            "type": "object",
            "items": null,
            "properties": {
                "tag_list": {
                    "id": "tag_list",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "FirewallRuleMatchTagsTypeIdList": {
            "type": "object",
            "items": null,
            "properties": {
                "tag_type": {
                    "id": "tag_type",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "items": null
                    }
                }
            }
        },
        "FirewallSequence": {
            "type": "object",
            "items": null,
            "properties": {
                "sequence": {
                    "id": "sequence",
                    "type": "string",
                    "items": null
                }
            }
        },
        "FirewallServiceGroupType": {
            "type": "object",
            "items": null,
            "properties": {
                "firewall_service": {
                    "id": "firewall_service",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallServiceType"
                    }
                }
            }
        },
        "FirewallServiceType": {
            "type": "object",
            "items": null,
            "properties": {
                "dst_ports": {
                    "description": "Range of destination port for layer 4 protocol",
                    "$ref": "#/definitions/PortType"
                },
                "protocol": {
                    "id": "protocol",
                    "description": "Layer 4 protocol in ip packet",
                    "type": "string",
                    "items": null
                },
                "protocol_id": {
                    "id": "protocol_id",
                    "description": "Layer 4 protocol id in ip packet",
                    "type": "integer",
                    "items": null
                },
                "src_ports": {
                    "description": "Range of source port for layer 4 protocol",
                    "$ref": "#/definitions/PortType"
                }
            }
        },
        "FlavorAPIListType": {
            "properties": {
                "flavors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FlavorAPIType"
                    }
                }
            }
        },
        "FlavorAPISingleType": {
            "properties": {
                "flavor": {
                    "$ref": "#/definitions/FlavorAPIType"
                }
            }
        },
        "FlavorAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "disk": {
                    "id": "disk",
                    "description": "The size of the root disk that will be created in GiB",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "ephemeral": {
                    "id": "ephemeral",
                    "description": "The size of the ephemeral disk that will be created, in GiB",
                    "type": "integer",
                    "default": 0,
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id": {
                    "id": "id",
                    "description": "The ID of the flavor, if not provided UUID will be auto-generated",
                    "type": "string",
                    "items": null
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "is_public": {
                    "id": "is_public",
                    "description": "Whether the flavor is public",
                    "type": "boolean",
                    "default": true,
                    "items": null
                },
                "links": {
                    "description": "links for the image for server instance",
                    "$ref": "#/definitions/OpenStackLink"
                },
                "name": {
                    "id": "name",
                    "description": "The display name of a flavor",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "property": {
                    "id": "property",
                    "description": "Extra specs needed to boot the image",
                    "type": "string",
                    "items": null
                },
                "ram": {
                    "id": "ram",
                    "description": "The amount of RAM a flavor has, in MiB",
                    "type": "integer",
                    "items": null
                },
                "rxtx_factor": {
                    "id": "rxtx_factor",
                    "description": "The receive / transmit factor (as a float) that will be set on ports if the network backend supports the QOS extension. Otherwise it will be ignored. It defaults to 1.0.",
                    "type": "integer",
                    "items": null
                },
                "swap": {
                    "id": "swap",
                    "description": "The size of a dedicated swap disk that will be allocated, in MiB. If 0 (the default), no dedicated swap disk will be created.",
                    "type": "integer",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "vcpus": {
                    "id": "vcpus",
                    "description": "The number of virtual CPUs that will be allocated to the server",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "FloatingIPAPIListType": {
            "properties": {
                "floating-ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FloatingIPAPIType"
                    }
                }
            }
        },
        "FloatingIPAPISingleType": {
            "properties": {
                "floating-ip": {
                    "$ref": "#/definitions/FloatingIPAPIType"
                }
            }
        },
        "FloatingIPAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "floating_ip_address": {
                    "description": "Floating ip address.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "floating_ip_address_family": {
                    "description": "Ip address family of the floating ip, IpV4 or IpV6",
                    "$ref": "#/definitions/IpAddressFamilyType"
                },
                "floating_ip_fixed_ip_address": {
                    "description": "This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "floating_ip_is_virtual_ip": {
                    "id": "floating_ip_is_virtual_ip",
                    "description": "This floating ip is used as virtual ip (VIP) in case of LBaaS.",
                    "type": "boolean",
                    "items": null
                },
                "floating_ip_port_mappings": {
                    "description": "List of PortMaps for this floating-ip.",
                    "$ref": "#/definitions/PortMappings"
                },
                "floating_ip_port_mappings_enable": {
                    "id": "floating_ip_port_mappings_enable",
                    "description": "If it is false, floating-ip Nat is done for all Ports. If it is true, floating-ip Nat is done to the list of PortMaps.",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "floating_ip_traffic_direction": {
                    "description": "Specifies direction of traffic for the floating-ip",
                    "$ref": "#/definitions/TrafficDirectionType"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "project_ref": {
                    "description": "Reference to project is which this floating ip was allocated.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to virtual machine interface to which this floating ip is attached.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "FloatingIPPoolAPIListType": {
            "properties": {
                "floating-ip-pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FloatingIPPoolAPIType"
                    }
                }
            }
        },
        "FloatingIPPoolAPISingleType": {
            "properties": {
                "floating-ip-pool": {
                    "$ref": "#/definitions/FloatingIPPoolAPIType"
                }
            }
        },
        "FloatingIPPoolAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "floating_ip_pool_subnets": {
                    "description": "Subnets that restrict floating ip allocation from the corresponding virtual network.",
                    "$ref": "#/definitions/FloatingIpPoolSubnetType"
                },
                "floating_ips": {
                    "description": "Floating ip is a ip that can be assigned to (virtual machine interface(VMI), ip), By doing so VMI can no be part of the floating ip network and floating ip is used as one:one to NAT for doing so.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FloatingIPAPIType"
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "FloatingIpDnsNotation": {
            "type": "string",
            "items": null
        },
        "FloatingIpPoolSubnetType": {
            "type": "object",
            "items": null,
            "properties": {
                "subnet_uuid": {
                    "id": "subnet_uuid",
                    "description": "List of subnets associated with this floating ip pool.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "FlowAgingTimeout": {
            "type": "object",
            "items": null,
            "properties": {
                "port": {
                    "id": "port",
                    "type": "integer",
                    "items": null
                },
                "protocol": {
                    "id": "protocol",
                    "type": "string",
                    "items": null
                },
                "timeout_in_seconds": {
                    "id": "timeout_in_seconds",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "FlowAgingTimeoutList": {
            "type": "object",
            "items": null,
            "properties": {
                "flow_aging_timeout": {
                    "id": "flow_aging_timeout",
                    "description": "List of (ip protocol, port number, timeout in seconds)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FlowAgingTimeout"
                    }
                }
            }
        },
        "ForwardingClassAPIListType": {
            "properties": {
                "forwarding-classs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ForwardingClassAPIType"
                    }
                }
            }
        },
        "ForwardingClassAPISingleType": {
            "properties": {
                "forwarding-class": {
                    "$ref": "#/definitions/ForwardingClassAPIType"
                }
            }
        },
        "ForwardingClassAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "forwarding_class_dscp": {
                    "description": "DSCP value to be written on outgoing packet for this forwarding-class.",
                    "$ref": "#/definitions/DscpValueType"
                },
                "forwarding_class_id": {
                    "description": "Unique ID for this forwarding class.",
                    "$ref": "#/definitions/ForwardingClassId"
                },
                "forwarding_class_mpls_exp": {
                    "description": "MPLS exp value to be written on outgoing packet for this forwarding-class.",
                    "$ref": "#/definitions/MplsExpType"
                },
                "forwarding_class_vlan_priority": {
                    "description": "802.1p value to be written on outgoing packet for this forwarding-class.",
                    "$ref": "#/definitions/VlanPriorityType"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "qos_queue_ref": {
                    "description": "Qos queue to be used for this forwarding class.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ForwardingClassId": {
            "type": "integer",
            "default": "0",
            "items": null
        },
        "ForwardingModeType": {
            "type": "string",
            "items": null
        },
        "GlobalQosConfigAPIListType": {
            "properties": {
                "global-qos-configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalQosConfigAPIType"
                    }
                }
            }
        },
        "GlobalQosConfigAPISingleType": {
            "properties": {
                "global-qos-config": {
                    "$ref": "#/definitions/GlobalQosConfigAPIType"
                }
            }
        },
        "GlobalQosConfigAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "control_traffic_dscp": {
                    "description": "DSCP value of IP header for control traffic",
                    "$ref": "#/definitions/ControlTrafficDscpType"
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "forwarding_classs": {
                    "description": "Link to global-qos config.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ForwardingClassAPIType"
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "qos_configs": {
                    "description": "Global system QoS config for vhost and fabric traffic .",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QosConfigAPIType"
                    }
                },
                "qos_queues": {
                    "description": "QOS queue config object in this project.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QosQueueAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "GlobalSystemConfigAPIListType": {
            "properties": {
                "global-system-configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalSystemConfigAPIType"
                    }
                }
            }
        },
        "GlobalSystemConfigAPISingleType": {
            "properties": {
                "global-system-config": {
                    "$ref": "#/definitions/GlobalSystemConfigAPIType"
                }
            }
        },
        "GlobalSystemConfigAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "alarm_enable": {
                    "id": "alarm_enable",
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set.",
                    "type": "boolean",
                    "items": null
                },
                "alarms": {
                    "description": "List of alarms that are applicable to objects anchored under global-system-config.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmAPIType"
                    }
                },
                "analytics_nodes": {
                    "description": "Analytics node is object representing a logical node in system which serves operational API and analytics collector.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AnalyticsNodeAPIType"
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "api_access_lists": {
                    "description": "Global API access list applicable to all domain and projects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIAccessListAPIType"
                    }
                },
                "autonomous_system": {
                    "description": "16 bit BGP Autonomous System number for the cluster.",
                    "$ref": "#/definitions/AutonomousSystemType"
                },
                "bgp_always_compare_med": {
                    "id": "bgp_always_compare_med",
                    "description": "Always compare MED even if paths are received from different ASes.",
                    "type": "boolean",
                    "items": null
                },
                "bgp_router_ref": {
                    "description": "List of references to all bgp routers in systems.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "bgpaas_parameters": {
                    "description": "BGP As A Service Parameters configuration",
                    "$ref": "#/definitions/BGPaaServiceParametersType"
                },
                "config_nodes": {
                    "description": "Config node is object representing a logical node in system which serves config API.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConfigNodeAPIType"
                    }
                },
                "config_version": {
                    "id": "config_version",
                    "description": "Version of OpenContrail software that generated this config.",
                    "type": "string",
                    "items": null
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "database_nodes": {
                    "description": "Database node is object representing a logical node in system which host Cassandra DB and Zookeeper.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DatabaseNodeAPIType"
                    }
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "global_qos_configs": {
                    "description": "Global QoS system config is object where all global system QoS configuration is present.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalQosConfigAPIType"
                    }
                },
                "global_vrouter_configs": {
                    "description": "Global vrouter config is object where all global vrouter config is present.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalVrouterConfigAPIType"
                    }
                },
                "graceful_restart_parameters": {
                    "description": "Graceful Restart parameters",
                    "$ref": "#/definitions/GracefulRestartParametersType"
                },
                "ibgp_auto_mesh": {
                    "id": "ibgp_auto_mesh",
                    "description": "When true, system will automatically create BGP peering mesh with all control-nodes that have same BGP AS number as global AS number.",
                    "type": "boolean",
                    "items": null
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "ip_fabric_subnets": {
                    "description": "List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic GRE tunnels on the SDN gateway.",
                    "$ref": "#/definitions/SubnetListType"
                },
                "mac_aging_time": {
                    "description": "MAC aging time on the network",
                    "$ref": "#/definitions/MACAgingTime"
                },
                "mac_limit_control": {
                    "description": "MAC limit control on the network",
                    "$ref": "#/definitions/MACLimitControlType"
                },
                "mac_move_control": {
                    "description": "MAC move control on the network",
                    "$ref": "#/definitions/MACMoveLimitControlType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_routers": {
                    "description": "Physical router object represent any physical device that participates in virtual networking, like routers, switches, servers, firewalls etc.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhysicalRouterAPIType"
                    }
                },
                "plugin_tuning": {
                    "description": "Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.",
                    "$ref": "#/definitions/PluginProperties"
                },
                "service_appliance_sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceApplianceSetAPIType"
                    }
                },
                "user_defined_log_statistics": {
                    "description": "stats name and patterns",
                    "$ref": "#/definitions/UserDefinedLogStatList"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_routers": {
                    "description": "Virtual router is packet forwarding system on devices such as compute nodes(servers), TOR(s), routers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualRouterAPIType"
                    }
                }
            }
        },
        "GlobalVrouterConfigAPIListType": {
            "properties": {
                "global-vrouter-configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GlobalVrouterConfigAPIType"
                    }
                }
            }
        },
        "GlobalVrouterConfigAPISingleType": {
            "properties": {
                "global-vrouter-config": {
                    "$ref": "#/definitions/GlobalVrouterConfigAPIType"
                }
            }
        },
        "GlobalVrouterConfigAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.",
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                },
                "enable_security_logging": {
                    "id": "enable_security_logging",
                    "description": "Enable or disable security-logging in the system",
                    "type": "boolean",
                    "default": true,
                    "items": null
                },
                "encapsulation_priorities": {
                    "description": "Ordered list of encapsulations that vrouter will use in priority order.",
                    "$ref": "#/definitions/EncapsulationPrioritiesType"
                },
                "flow_aging_timeout_list": {
                    "description": "Flow aging timeout per application (protocol, port) list.",
                    "$ref": "#/definitions/FlowAgingTimeoutList"
                },
                "flow_export_rate": {
                    "id": "flow_export_rate",
                    "description": "Flow export rate is global config, rate at which each vrouter will sample and export flow records to analytics",
                    "type": "integer",
                    "items": null
                },
                "forwarding_mode": {
                    "description": "Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default.",
                    "$ref": "#/definitions/ForwardingModeType"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "linklocal_services": {
                    "description": "Global services provided on link local subnet to the virtual machines.",
                    "$ref": "#/definitions/LinklocalServicesTypes"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "security_logging_objects": {
                    "description": "Reference to security logging object for global-vrouter-config.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SecurityLoggingObjectAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "vxlan_network_identifier_mode": {
                    "$ref": "#/definitions/VxlanNetworkIdentifierModeType"
                }
            }
        },
        "GracefulRestartParametersType": {
            "type": "object",
            "items": null,
            "properties": {
                "bgp_helper_enable": {
                    "id": "bgp_helper_enable",
                    "description": "Enable GR Helper mode for BGP peers in contrail-control",
                    "type": "boolean",
                    "items": null
                },
                "enable": {
                    "id": "enable",
                    "description": "Enable/Disable knob for all GR parameters to take effect",
                    "type": "boolean",
                    "items": null
                },
                "end_of_rib_timeout": {
                    "description": "Maximum time (in seconds) to wait for EndOfRib reception/transmission",
                    "$ref": "#/definitions/EndOfRibTimeType"
                },
                "long_lived_restart_time": {
                    "description": "Extended Time (in seconds) taken by the restarting speaker after restart-time to get back to stable state",
                    "$ref": "#/definitions/LongLivedGracefulRestartTimeType"
                },
                "restart_time": {
                    "description": "Time (in seconds) taken by the restarting speaker to get back to stable state",
                    "$ref": "#/definitions/GracefulRestartTimeType"
                },
                "xmpp_helper_enable": {
                    "id": "xmpp_helper_enable",
                    "description": "Enable GR Helper mode for XMPP peers (agents) in contrail-control",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "GracefulRestartTimeType": {
            "type": "integer",
            "items": null
        },
        "HealthCheckProtocolType": {
            "type": "string",
            "items": null
        },
        "HealthCheckType": {
            "type": "string",
            "items": null
        },
        "HealthmonitorType": {
            "type": "string",
            "items": null
        },
        "IdPermsType": {
            "type": "object",
            "items": null,
            "properties": {
                "created": {
                    "id": "created",
                    "description": "Time when this object was created",
                    "type": "string",
                    "items": null
                },
                "creator": {
                    "id": "creator",
                    "description": "Id of tenant who created this object",
                    "type": "string",
                    "items": null
                },
                "description": {
                    "id": "description",
                    "description": "User provided text",
                    "type": "string",
                    "items": null
                },
                "enable": {
                    "id": "enable",
                    "description": "Administratively Enable/Disable this object",
                    "type": "boolean",
                    "items": null
                },
                "last_modified": {
                    "id": "last_modified",
                    "description": "Time when this object was created",
                    "type": "string",
                    "items": null
                },
                "permissions": {
                    "description": "No longer used, will be removed",
                    "$ref": "#/definitions/PermType"
                },
                "user_visible": {
                    "id": "user_visible",
                    "description": "System created internal objects will have this flag set and will not be visible",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "InstanceIPAPIListType": {
            "properties": {
                "instance-ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InstanceIPAPIType"
                    }
                }
            }
        },
        "InstanceIPAPISingleType": {
            "properties": {
                "instance-ip": {
                    "$ref": "#/definitions/InstanceIPAPIType"
                }
            }
        },
        "InstanceIPAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "floating_ips": {
                    "description": "floating-ip can be child of instance-ip. By doing so instance-ip can be used as floating-ip.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FloatingIPAPIType"
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "instance_ip_address": {
                    "description": "Ip address value for instance ip.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "instance_ip_family": {
                    "description": "Ip address family for instance ip, IPv4(v4) or IPv6(v6).",
                    "$ref": "#/definitions/IpAddressFamilyType"
                },
                "instance_ip_local_ip": {
                    "id": "instance_ip_local_ip",
                    "description": "This instance ip is local to compute and will not be exported to other nodes.",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "instance_ip_mode": {
                    "description": "Ip address HA mode in case this instance ip is used in more than one interface, active-Active or active-Standby.",
                    "$ref": "#/definitions/AddressMode"
                },
                "instance_ip_secondary": {
                    "id": "instance_ip_secondary",
                    "description": "This instance ip is secondary ip of the interface.",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "network_ipam_ref": {
                    "description": "Reference to network ipam of this instance ip.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_router_ref": {
                    "description": "This instance ip is used as IRB address on the referenced physical router (e.g.MX), In case of OVSDB TOR usecase this address will be used as default gateway for Host behind the TOR.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "secondary_ip_tracking_ip": {
                    "description": "When this instance ip is secondary ip, it can track activeness of another ip.",
                    "$ref": "#/definitions/SubnetType"
                },
                "service_health_check_ip": {
                    "id": "service_health_check_ip",
                    "description": "This instance ip is used as service health check source ip",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "service_instance_ip": {
                    "id": "service_instance_ip",
                    "description": "This instance ip is used as service chain next hop",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "subnet_uuid": {
                    "id": "subnet_uuid",
                    "description": "This instance ip was allocated from this Subnet(UUID).",
                    "type": "string",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to virtual machine interface to which this instance ip is attached.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_network_ref": {
                    "description": "Reference to virtual network of this instance ip.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_router_ref": {
                    "description": "Reference to virtual router of this instance ip.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "InstanceInfo": {
            "type": "object",
            "items": null,
            "properties": {
                "capabilities": {
                    "id": "capabilities",
                    "type": "string",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Name of the nova instance",
                    "type": "string",
                    "items": null
                },
                "image_source": {
                    "id": "image_source",
                    "description": "UUID of the image for instance",
                    "type": "string",
                    "items": null
                },
                "local_gb": {
                    "id": "local_gb",
                    "type": "string",
                    "items": null
                },
                "memory_mb": {
                    "id": "memory_mb",
                    "type": "string",
                    "items": null
                },
                "nova_host_id": {
                    "id": "nova_host_id",
                    "type": "string",
                    "items": null
                },
                "root_gb": {
                    "id": "root_gb",
                    "type": "string",
                    "items": null
                },
                "swap_mb": {
                    "id": "swap_mb",
                    "type": "string",
                    "items": null
                },
                "vcpus": {
                    "id": "vcpus",
                    "type": "string",
                    "items": null
                }
            }
        },
        "InterfaceMirrorType": {
            "type": "object",
            "items": null,
            "properties": {
                "mirror_to": {
                    "description": "Mirror destination configuration",
                    "$ref": "#/definitions/MirrorActionType"
                },
                "traffic_direction": {
                    "description": "Specifies direction of traffic to mirror, Ingress, Egress or both",
                    "$ref": "#/definitions/TrafficDirectionType"
                }
            }
        },
        "InterfaceRouteTableAPIListType": {
            "properties": {
                "interface-route-tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InterfaceRouteTableAPIType"
                    }
                }
            }
        },
        "InterfaceRouteTableAPISingleType": {
            "properties": {
                "interface-route-table": {
                    "$ref": "#/definitions/InterfaceRouteTableAPIType"
                }
            }
        },
        "InterfaceRouteTableAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "interface_route_table_routes": {
                    "description": "Interface route table used same structure as route table, however the next hop field is irrelevant.",
                    "$ref": "#/definitions/RouteTableType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_instance_ref": {
                    "description": "Reference to interface route table attached to (service instance, interface), This is used to add interface static routes to service instance interface.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/ServiceInterfaceTag"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "IpAddressFamilyType": {
            "type": "string",
            "items": null
        },
        "IpAddressType": {
            "type": "string",
            "items": null
        },
        "IpAddressesType": {
            "type": "object",
            "items": null,
            "properties": {
                "ip_address": {
                    "$ref": "#/definitions/IpAddressType"
                }
            }
        },
        "IpamDnsAddressType": {
            "type": "object",
            "items": null,
            "properties": {
                "tenant_dns_server_address": {
                    "description": "In case of tenant DNS server method, Ip address of DNS server. This will be given in DHCP",
                    "$ref": "#/definitions/IpAddressesType"
                },
                "virtual_dns_server_name": {
                    "id": "virtual_dns_server_name",
                    "description": "In case of virtual DNS server, name of virtual DNS server",
                    "type": "string",
                    "items": null
                }
            }
        },
        "IpamDnsMethodType": {
            "type": "string",
            "items": null
        },
        "IpamMethodType": {
            "type": "string",
            "items": null
        },
        "IpamSubnetType": {
            "type": "object",
            "items": null,
            "properties": {
                "addr_from_start": {
                    "id": "addr_from_start",
                    "description": "Start address allocation from start or from end of address range.",
                    "type": "boolean",
                    "items": null
                },
                "alloc_unit": {
                    "id": "alloc_unit",
                    "description": "allocation unit for this subnet to allocate bulk ip addresses",
                    "type": "integer",
                    "items": null
                },
                "allocation_pools": {
                    "id": "allocation_pools",
                    "description": "List of ranges of ip address within the subnet from which to allocate ip address. default is entire prefix",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllocationPoolType"
                    }
                },
                "created": {
                    "id": "created",
                    "description": "timestamp when subnet object gets created",
                    "type": "string",
                    "items": null
                },
                "default_gateway": {
                    "description": "default-gateway ip address in the subnet, if not provided one is auto generated by the system.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "dhcp_option_list": {
                    "description": "DHCP options list to be sent via DHCP for  VM(s) in this subnet",
                    "$ref": "#/definitions/DhcpOptionsListType"
                },
                "dns_nameservers": {
                    "id": "dns_nameservers",
                    "description": "Tenant DNS servers ip address in tenant DNS method",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "dns_server_address": {
                    "description": "DNS server ip address in the subnet, if not provided one is auto generated by the system.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "enable_dhcp": {
                    "id": "enable_dhcp",
                    "description": "Enable DHCP for the VM(s) in this subnet",
                    "type": "boolean",
                    "items": null
                },
                "host_routes": {
                    "description": "Host routes to be sent via DHCP for VM(s) in this subnet, Next hop for these routes is always default gateway",
                    "$ref": "#/definitions/RouteTableType"
                },
                "last_modified": {
                    "id": "last_modified",
                    "description": "timestamp when subnet object gets updated",
                    "type": "string",
                    "items": null
                },
                "subnet": {
                    "description": "ip prefix and length for the subnet",
                    "$ref": "#/definitions/SubnetType"
                },
                "subnet_name": {
                    "id": "subnet_name",
                    "description": "User provided name for this subnet",
                    "type": "string",
                    "items": null
                },
                "subnet_uuid": {
                    "id": "subnet_uuid",
                    "description": "Subnet UUID is auto generated by the system",
                    "type": "string",
                    "items": null
                }
            }
        },
        "IpamSubnets": {
            "type": "object",
            "items": null,
            "properties": {
                "subnets": {
                    "id": "subnets",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IpamSubnetType"
                    }
                }
            }
        },
        "IpamType": {
            "type": "object",
            "items": null,
            "properties": {
                "cidr_block": {
                    "$ref": "#/definitions/SubnetType"
                },
                "dhcp_option_list": {
                    "$ref": "#/definitions/DhcpOptionsListType"
                },
                "host_routes": {
                    "$ref": "#/definitions/RouteTableType"
                },
                "ipam_dns_method": {
                    "$ref": "#/definitions/IpamDnsMethodType"
                },
                "ipam_dns_server": {
                    "$ref": "#/definitions/IpamDnsAddressType"
                },
                "ipam_method": {
                    "$ref": "#/definitions/IpamMethodType"
                }
            }
        },
        "IsidType": {
            "type": "integer",
            "items": null
        },
        "JunosServicePorts": {
            "type": "object",
            "items": null,
            "properties": {
                "service_port": {
                    "id": "service_port",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "KeyValuePair": {
            "type": "object",
            "items": null,
            "properties": {
                "key": {
                    "id": "key",
                    "type": "string",
                    "items": null
                },
                "value": {
                    "id": "value",
                    "type": "string",
                    "items": null
                }
            }
        },
        "KeyValuePairs": {
            "type": "object",
            "items": null,
            "properties": {
                "key_value_pair": {
                    "id": "key_value_pair",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeyValuePair"
                    }
                }
            }
        },
        "KeypairAPIListType": {
            "properties": {
                "keypairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KeypairAPIType"
                    }
                }
            }
        },
        "KeypairAPISingleType": {
            "properties": {
                "keypair": {
                    "$ref": "#/definitions/KeypairAPIType"
                }
            }
        },
        "KeypairAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "name": {
                    "id": "name",
                    "description": "A name for the keypair which will be used to reference it later",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "public_key": {
                    "id": "public_key",
                    "description": "SSH Public Key",
                    "type": "string",
                    "title": "SSH public key",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "KubernetesMasterNodeAPIListType": {
            "properties": {
                "kubernetes-master-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KubernetesMasterNodeAPIType"
                    }
                }
            }
        },
        "KubernetesMasterNodeAPISingleType": {
            "properties": {
                "kubernetes-master-node": {
                    "$ref": "#/definitions/KubernetesMasterNodeAPIType"
                }
            }
        },
        "KubernetesMasterNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this kubernetes master node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "KubernetesNodeAPIListType": {
            "properties": {
                "kubernetes-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/KubernetesNodeAPIType"
                    }
                }
            }
        },
        "KubernetesNodeAPISingleType": {
            "properties": {
                "kubernetes-node": {
                    "$ref": "#/definitions/KubernetesNodeAPIType"
                }
            }
        },
        "KubernetesNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this kubernetes node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "L4PortType": {
            "type": "integer",
            "items": null
        },
        "LinklocalServiceEntryType": {
            "type": "object",
            "items": null,
            "properties": {
                "ip_fabric_DNS_service_name": {
                    "id": "ip_fabric_DNS_service_name",
                    "description": "DNS name to which link local service will be proxied",
                    "type": "string",
                    "items": null
                },
                "ip_fabric_service_ip": {
                    "id": "ip_fabric_service_ip",
                    "description": "Destination ip address to which link local traffic will forwarded",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "ip_fabric_service_port": {
                    "id": "ip_fabric_service_port",
                    "description": "Destination TCP port number to which link local traffic will forwarded",
                    "type": "integer",
                    "items": null
                },
                "linklocal_service_ip": {
                    "id": "linklocal_service_ip",
                    "description": "ip address of the link local service.",
                    "type": "string",
                    "items": null
                },
                "linklocal_service_name": {
                    "id": "linklocal_service_name",
                    "description": "Name of the link local service. VM name resolution of this name will result in link local ip address",
                    "type": "string",
                    "items": null
                },
                "linklocal_service_port": {
                    "id": "linklocal_service_port",
                    "description": "Destination TCP port number of link local service",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "LinklocalServicesTypes": {
            "type": "object",
            "items": null,
            "properties": {
                "linklocal_service_entry": {
                    "id": "linklocal_service_entry",
                    "description": "List of link local services",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LinklocalServiceEntryType"
                    }
                }
            }
        },
        "LoadbalancerAPIListType": {
            "properties": {
                "loadbalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerAPIType"
                    }
                }
            }
        },
        "LoadbalancerAPISingleType": {
            "properties": {
                "loadbalancer": {
                    "$ref": "#/definitions/LoadbalancerAPIType"
                }
            }
        },
        "LoadbalancerAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "loadbalancer_properties": {
                    "description": "Loadbalancer configuration like  admin state, VIP, VIP subnet etc.",
                    "$ref": "#/definitions/LoadbalancerType"
                },
                "loadbalancer_provider": {
                    "id": "loadbalancer_provider",
                    "description": "Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the backend.",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_appliance_set_ref": {
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_instance_ref": {
                    "description": "Reference to the service instance, created automatically by the system.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to the virtual machine interface for VIP, created automatically by the system.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "LoadbalancerHealthmonitorAPIListType": {
            "properties": {
                "loadbalancer-healthmonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerHealthmonitorAPIType"
                    }
                }
            }
        },
        "LoadbalancerHealthmonitorAPISingleType": {
            "properties": {
                "loadbalancer-healthmonitor": {
                    "$ref": "#/definitions/LoadbalancerHealthmonitorAPIType"
                }
            }
        },
        "LoadbalancerHealthmonitorAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "loadbalancer_healthmonitor_properties": {
                    "description": "Configuration parameters for health monitor like type, method, retries etc.",
                    "$ref": "#/definitions/LoadbalancerHealthmonitorType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LoadbalancerHealthmonitorType": {
            "type": "object",
            "items": null,
            "properties": {
                "admin_state": {
                    "id": "admin_state",
                    "description": "Administratively up or dowm.",
                    "type": "boolean",
                    "items": null
                },
                "delay": {
                    "id": "delay",
                    "description": "Time in seconds  at which health check is repeated",
                    "type": "integer",
                    "items": null
                },
                "expected_codes": {
                    "id": "expected_codes",
                    "description": "In case monitor protocol is HTTP, expected return code for HTTP operations like 200 ok.",
                    "type": "string",
                    "items": null
                },
                "http_method": {
                    "id": "http_method",
                    "description": "In case monitor protocol is HTTP, type of http method used like GET, PUT, POST etc",
                    "type": "string",
                    "items": null
                },
                "max_retries": {
                    "id": "max_retries",
                    "description": "Number of failures before declaring health bad",
                    "type": "integer",
                    "items": null
                },
                "monitor_type": {
                    "description": "Protocol used to monitor health, PING, HTTP, HTTPS or TCP",
                    "$ref": "#/definitions/HealthmonitorType"
                },
                "timeout": {
                    "id": "timeout",
                    "description": "Time in seconds to wait for response",
                    "type": "integer",
                    "items": null
                },
                "url_path": {
                    "id": "url_path",
                    "description": "In case monitor protocol is HTTP, URL to be used. In case of ICMP, ip address",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LoadbalancerListenerAPIListType": {
            "properties": {
                "loadbalancer-listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerListenerAPIType"
                    }
                }
            }
        },
        "LoadbalancerListenerAPISingleType": {
            "properties": {
                "loadbalancer-listener": {
                    "$ref": "#/definitions/LoadbalancerListenerAPIType"
                }
            }
        },
        "LoadbalancerListenerAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "loadbalancer_listener_properties": {
                    "$ref": "#/definitions/LoadbalancerListenerType"
                },
                "loadbalancer_ref": {
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LoadbalancerListenerType": {
            "type": "object",
            "items": null,
            "properties": {
                "admin_state": {
                    "id": "admin_state",
                    "type": "boolean",
                    "items": null
                },
                "connection_limit": {
                    "id": "connection_limit",
                    "type": "integer",
                    "items": null
                },
                "default_tls_container": {
                    "id": "default_tls_container",
                    "type": "string",
                    "items": null
                },
                "protocol": {
                    "$ref": "#/definitions/LoadbalancerProtocolType"
                },
                "protocol_port": {
                    "id": "protocol_port",
                    "type": "integer",
                    "items": null
                },
                "sni_containers": {
                    "id": "sni_containers",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "LoadbalancerMemberAPIListType": {
            "properties": {
                "loadbalancer-members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerMemberAPIType"
                    }
                }
            }
        },
        "LoadbalancerMemberAPISingleType": {
            "properties": {
                "loadbalancer-member": {
                    "$ref": "#/definitions/LoadbalancerMemberAPIType"
                }
            }
        },
        "LoadbalancerMemberAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "loadbalancer_member_properties": {
                    "description": "Member configuration like ip address, destination port, weight etc.",
                    "$ref": "#/definitions/LoadbalancerMemberType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LoadbalancerMemberType": {
            "type": "object",
            "items": null,
            "properties": {
                "address": {
                    "description": "Ip address of the member",
                    "$ref": "#/definitions/IpAddressType"
                },
                "admin_state": {
                    "id": "admin_state",
                    "description": "Administrative up or down.",
                    "type": "boolean",
                    "items": null
                },
                "protocol_port": {
                    "id": "protocol_port",
                    "description": "Destination port for the application on the member.",
                    "type": "integer",
                    "items": null
                },
                "status": {
                    "id": "status",
                    "description": "Operational status of the member.",
                    "type": "string",
                    "items": null
                },
                "status_description": {
                    "id": "status_description",
                    "description": "Operational status description of the member.",
                    "type": "string",
                    "items": null
                },
                "weight": {
                    "id": "weight",
                    "description": "Weight for load balancing",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "LoadbalancerMethodType": {
            "type": "string",
            "items": null
        },
        "LoadbalancerPoolAPIListType": {
            "properties": {
                "loadbalancer-pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerPoolAPIType"
                    }
                }
            }
        },
        "LoadbalancerPoolAPISingleType": {
            "properties": {
                "loadbalancer-pool": {
                    "$ref": "#/definitions/LoadbalancerPoolAPIType"
                }
            }
        },
        "LoadbalancerPoolAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "loadbalancer_healthmonitor_ref": {
                    "description": "Reference to loadbalancer healthmonitor that this pool uses.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "loadbalancer_listener_ref": {
                    "description": "Reference to loadbalancer listener served by this pool, applicable to LBaaS V2.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "loadbalancer_members": {
                    "description": "Configuration object representing each member of load balancer pool.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerMemberAPIType"
                    }
                },
                "loadbalancer_pool_custom_attributes": {
                    "description": "Custom loadbalancer config, opaque to the system. Specified as list of Key:Value pairs. Applicable to LBaaS V1.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "loadbalancer_pool_properties": {
                    "description": "Configuration for loadbalancer pool like protocol, subnet, etc.",
                    "$ref": "#/definitions/LoadbalancerPoolType"
                },
                "loadbalancer_pool_provider": {
                    "id": "loadbalancer_pool_provider",
                    "description": "Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the backend. Applicable to LBaaS V1",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_appliance_set_ref": {
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_instance_ref": {
                    "description": "Reference to the service instance serving this pool, applicable to LBaaS V1.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to the virtual machine interface reaching pool subnet, applicable to LBaaS V1.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "LoadbalancerPoolType": {
            "type": "object",
            "items": null,
            "properties": {
                "admin_state": {
                    "id": "admin_state",
                    "description": "Administrative up or down",
                    "type": "boolean",
                    "items": null
                },
                "loadbalancer_method": {
                    "description": "Load balancing method ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP",
                    "$ref": "#/definitions/LoadbalancerMethodType"
                },
                "persistence_cookie_name": {
                    "id": "persistence_cookie_name",
                    "description": "To Be Added",
                    "type": "string",
                    "items": null
                },
                "protocol": {
                    "description": "IP protocol string like http, https or tcp.",
                    "$ref": "#/definitions/LoadbalancerProtocolType"
                },
                "session_persistence": {
                    "description": "Method for persistence. HTTP_COOKIE, SOURCE_IP or APP_COOKIE.",
                    "$ref": "#/definitions/SessionPersistenceType"
                },
                "status": {
                    "id": "status",
                    "description": "Operating status for this loadbalancer pool.",
                    "type": "string",
                    "items": null
                },
                "status_description": {
                    "id": "status_description",
                    "description": "Operating status description for this loadbalancer pool.",
                    "type": "string",
                    "items": null
                },
                "subnet_id": {
                    "description": "UUID of the subnet from where the members of the pool are reachable.",
                    "$ref": "#/definitions/UuidStringType"
                }
            }
        },
        "LoadbalancerProtocolType": {
            "type": "string",
            "items": null
        },
        "LoadbalancerType": {
            "type": "object",
            "items": null,
            "properties": {
                "admin_state": {
                    "id": "admin_state",
                    "description": "Administrative up or down",
                    "type": "boolean",
                    "items": null
                },
                "operating_status": {
                    "id": "operating_status",
                    "description": "Operational status of the load balancer updated by system.",
                    "type": "string",
                    "items": null
                },
                "provisioning_status": {
                    "id": "provisioning_status",
                    "description": "Provisioning  status of the load balancer updated by system.",
                    "type": "string",
                    "items": null
                },
                "status": {
                    "id": "status",
                    "description": "Operational status of the load balancer updated by system.",
                    "type": "string",
                    "items": null
                },
                "vip_address": {
                    "description": "Virtual ip for this LBaaS",
                    "$ref": "#/definitions/IpAddressType"
                },
                "vip_subnet_id": {
                    "description": "Subnet UUID of the subnet of VIP, representing virtual network.",
                    "$ref": "#/definitions/UuidStringType"
                }
            }
        },
        "LocalLinkConnection": {
            "type": "object",
            "items": null,
            "properties": {
                "port_id": {
                    "id": "port_id",
                    "description": "Port ID of switch where Baremetal is connected",
                    "type": "string",
                    "items": null
                },
                "switch_id": {
                    "id": "switch_id",
                    "description": "Switch hostname",
                    "type": "string",
                    "items": null
                },
                "switch_info": {
                    "id": "switch_info",
                    "description": "UUID of the Physical-Port with contrail database",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LocationAPIListType": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LocationAPIType"
                    }
                }
            }
        },
        "LocationAPISingleType": {
            "properties": {
                "location": {
                    "$ref": "#/definitions/LocationAPIType"
                }
            }
        },
        "LocationAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "aws_access_key": {
                    "id": "aws_access_key",
                    "type": "string",
                    "title": "Access Key",
                    "default": "",
                    "items": null
                },
                "aws_region": {
                    "id": "aws_region",
                    "type": "string",
                    "title": "Region",
                    "default": "us-west-1",
                    "items": null
                },
                "aws_secret_key": {
                    "id": "aws_secret_key",
                    "type": "string",
                    "title": "Secret Key",
                    "default": "",
                    "items": null
                },
                "aws_subnet": {
                    "id": "aws_subnet",
                    "type": "string",
                    "title": "Subnet",
                    "default": "10.0.0.0/16",
                    "items": null
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "gcp_account_info": {
                    "id": "gcp_account_info",
                    "description": "copy and paste contents of account.json",
                    "type": "string",
                    "title": "Account info",
                    "default": "",
                    "items": null
                },
                "gcp_asn": {
                    "id": "gcp_asn",
                    "type": "integer",
                    "title": "ASN",
                    "default": 65001,
                    "items": null
                },
                "gcp_region": {
                    "id": "gcp_region",
                    "type": "string",
                    "title": "Region",
                    "default": "us-west1",
                    "items": null
                },
                "gcp_subnet": {
                    "id": "gcp_subnet",
                    "type": "string",
                    "title": "Subnet",
                    "default": "10.1.0.0/16",
                    "items": null
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_routers": {
                    "description": "Physical router location.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhysicalRouterAPIType"
                    }
                },
                "private_dns_servers": {
                    "id": "private_dns_servers",
                    "description": "List of DNS servers",
                    "type": "string",
                    "title": "DNS Servers",
                    "default": "8.8.8.8",
                    "items": null
                },
                "private_ntp_hosts": {
                    "id": "private_ntp_hosts",
                    "description": "List of NTP sources",
                    "type": "string",
                    "title": "NTP Hosts",
                    "default": "",
                    "items": null
                },
                "private_ospd_package_url": {
                    "id": "private_ospd_package_url",
                    "description": "Location of Contrail Networking Packages",
                    "type": "string",
                    "title": "Location of OSPD Contrail Networking Packages",
                    "default": "",
                    "items": null
                },
                "private_ospd_user_name": {
                    "id": "private_ospd_user_name",
                    "description": "OSPD Non-Root User Account",
                    "type": "string",
                    "title": "OSPD User Name",
                    "default": "stack",
                    "items": null
                },
                "private_ospd_user_password": {
                    "id": "private_ospd_user_password",
                    "description": "OSPD Passowrd for account",
                    "type": "string",
                    "title": "OSPD User Passowrd",
                    "default": "",
                    "items": null
                },
                "private_ospd_vm_disk_gb": {
                    "id": "private_ospd_vm_disk_gb",
                    "description": "disk spae to assign to RH OSPD vm",
                    "type": "string",
                    "title": "OSPD Disk Size in gigabytes",
                    "default": "100",
                    "items": null
                },
                "private_ospd_vm_name": {
                    "id": "private_ospd_vm_name",
                    "description": "Name of RH OSPD VM",
                    "type": "string",
                    "title": "OSPD Virtual Machine Name",
                    "default": "undercloud",
                    "items": null
                },
                "private_ospd_vm_ram_mb": {
                    "id": "private_ospd_vm_ram_mb",
                    "description": "ram to assign to RH OSPD vm",
                    "type": "string",
                    "title": "OSPD RAM in megabyts",
                    "default": "24576",
                    "items": null
                },
                "private_ospd_vm_vcpus": {
                    "id": "private_ospd_vm_vcpus",
                    "description": "vcpus to assign to RH OSPD vm",
                    "type": "string",
                    "title": "OSPD vCPUs",
                    "default": "8",
                    "items": null
                },
                "private_redhat_pool_id": {
                    "id": "private_redhat_pool_id",
                    "description": "Repo Pool ID",
                    "type": "string",
                    "title": "Redhat Pool ID",
                    "default": "",
                    "items": null
                },
                "private_redhat_subscription_key": {
                    "id": "private_redhat_subscription_key",
                    "description": "Subscription Activation Key",
                    "type": "string",
                    "title": "Redhat Subscription Acctivation Key",
                    "default": "",
                    "items": null
                },
                "private_redhat_subscription_pasword": {
                    "id": "private_redhat_subscription_pasword",
                    "description": "Password for subscription account",
                    "type": "string",
                    "title": "Redhat Subscription Password",
                    "default": "",
                    "items": null
                },
                "private_redhat_subscription_user": {
                    "id": "private_redhat_subscription_user",
                    "description": "User name for RedHat subscription account",
                    "type": "string",
                    "title": "Redhat Subscription User",
                    "default": "",
                    "items": null
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "type": {
                    "id": "type",
                    "description": "Type of location",
                    "type": "string",
                    "title": "Location Type",
                    "default": "private",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LogicalInterfaceAPIListType": {
            "properties": {
                "logical-interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalInterfaceAPIType"
                    }
                }
            }
        },
        "LogicalInterfaceAPISingleType": {
            "properties": {
                "logical-interface": {
                    "$ref": "#/definitions/LogicalInterfaceAPIType"
                }
            }
        },
        "LogicalInterfaceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "logical_interface_type": {
                    "$ref": "#/definitions/LogicalInterfaceType"
                },
                "logical_interface_vlan_tag": {
                    "id": "logical_interface_vlan_tag",
                    "description": "VLAN tag (.1Q) classifier for this logical interface.",
                    "type": "integer",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "References to virtual machine interfaces that represent end points that are reachable by this logical interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "LogicalInterfaceType": {
            "type": "string",
            "items": null
        },
        "LogicalRouterAPIListType": {
            "properties": {
                "logical-routers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalRouterAPIType"
                    }
                }
            }
        },
        "LogicalRouterAPISingleType": {
            "properties": {
                "logical-router": {
                    "$ref": "#/definitions/LogicalRouterAPIType"
                }
            }
        },
        "LogicalRouterAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "bgpvpn_ref": {
                    "description": "Back reference to logical router associated to the BGP VPN resource",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "configured_route_target_list": {
                    "description": "List of route targets that represent this logical router, all virtual networks connected to this logical router will have this as their route target list.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_router_ref": {
                    "description": "Reference to physical router, when this link is present device manager configures logical router associated route targets/interfaces on the Physical Router.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "route_table_ref": {
                    "description": "Reference to the route table attached to this logical router. By attaching route table, system will create static routes with the route target only of route targets linked to this logical router",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "route_target_ref": {
                    "description": "Route target that represent this logical router.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_instance_ref": {
                    "description": "Reference to service instance doing SNAT functionality for external gateway.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to the interface attached to this logical router. By attaching a interface to logical network all subnets in the virtual network of the interface has this router.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_network_ref": {
                    "description": "Reference to virtual network used as external gateway for this logical network. This link will cause a SNAT being spawned between all networks connected to logical router and external network.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "vxlan_network_identifier": {
                    "id": "vxlan_network_identifier",
                    "description": "The VNI that needs to be associated with the internal VN if vxlan_routing mode is enabled.",
                    "type": "string",
                    "items": null
                }
            }
        },
        "LongLivedGracefulRestartTimeType": {
            "type": "integer",
            "items": null
        },
        "MACAgingTime": {
            "type": "integer",
            "default": "300",
            "items": null
        },
        "MACLimitControlType": {
            "type": "object",
            "items": null,
            "properties": {
                "mac_limit": {
                    "id": "mac_limit",
                    "description": "Number of MACs that can be learnt",
                    "type": "integer",
                    "items": null
                },
                "mac_limit_action": {
                    "description": "Action to be taken when MAC limit exceeds",
                    "$ref": "#/definitions/MACLimitExceedActionType"
                }
            }
        },
        "MACLimitExceedActionType": {
            "type": "string",
            "items": null
        },
        "MACMoveLimitControlType": {
            "type": "object",
            "items": null,
            "properties": {
                "mac_move_limit": {
                    "id": "mac_move_limit",
                    "description": "Number of MAC moves permitted in mac move time window",
                    "type": "integer",
                    "items": null
                },
                "mac_move_limit_action": {
                    "description": "Action to be taken when MAC move limit exceeds",
                    "$ref": "#/definitions/MACLimitExceedActionType"
                },
                "mac_move_time_window": {
                    "description": "MAC move time window",
                    "$ref": "#/definitions/MACMoveTimeWindow"
                }
            }
        },
        "MACMoveTimeWindow": {
            "type": "integer",
            "items": null
        },
        "MacAddressesType": {
            "type": "object",
            "items": null,
            "properties": {
                "mac_address": {
                    "id": "mac_address",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "MatchConditionType": {
            "type": "object",
            "items": null,
            "properties": {
                "dst_address": {
                    "description": "Destination ip matching criteria",
                    "$ref": "#/definitions/AddressType"
                },
                "dst_port": {
                    "description": "Range of destination  port for layer 4 protocol",
                    "$ref": "#/definitions/PortType"
                },
                "ethertype": {
                    "$ref": "#/definitions/EtherType"
                },
                "protocol": {
                    "id": "protocol",
                    "description": "Layer 4 protocol in ip packet",
                    "type": "string",
                    "items": null
                },
                "src_address": {
                    "description": "Source ip matching criteria",
                    "$ref": "#/definitions/AddressType"
                },
                "src_port": {
                    "description": "Range of source port for layer 4 protocol",
                    "$ref": "#/definitions/PortType"
                }
            }
        },
        "MemberType": {
            "type": "object",
            "items": null,
            "properties": {
                "role": {
                    "id": "role",
                    "description": "User role for the project",
                    "type": "string",
                    "items": null
                }
            }
        },
        "MirrorActionType": {
            "type": "object",
            "items": null,
            "properties": {
                "analyzer_ip_address": {
                    "id": "analyzer_ip_address",
                    "description": "ip address of interface to which mirrored packets are sent",
                    "type": "string",
                    "items": null
                },
                "analyzer_mac_address": {
                    "id": "analyzer_mac_address",
                    "description": "mac address of interface to which mirrored packets are sent ",
                    "type": "string",
                    "items": null
                },
                "analyzer_name": {
                    "id": "analyzer_name",
                    "description": "Name of service instance used as analyzer",
                    "type": "string",
                    "items": null
                },
                "encapsulation": {
                    "id": "encapsulation",
                    "description": "Encapsulation for Mirrored packet, not used currently",
                    "type": "string",
                    "items": null
                },
                "juniper_header": {
                    "id": "juniper_header",
                    "description": "This flag is used to determine with/without juniper-header",
                    "type": "boolean",
                    "items": null
                },
                "nh_mode": {
                    "description": "This mode used to determine static or dynamic nh ",
                    "$ref": "#/definitions/NHModeType"
                },
                "nic_assisted_mirroring": {
                    "id": "nic_assisted_mirroring",
                    "description": "This flag is used to select nic assisted mirroring",
                    "type": "boolean",
                    "items": null
                },
                "nic_assisted_mirroring_vlan": {
                    "description": "The VLAN to be tagged on the traffic for NIC to Mirror",
                    "$ref": "#/definitions/VlanIdType"
                },
                "routing_instance": {
                    "id": "routing_instance",
                    "description": "Internal use only, should be set to -1",
                    "type": "string",
                    "items": null
                },
                "static_nh_header": {
                    "description": "vtep details required if static nh enabled",
                    "$ref": "#/definitions/StaticMirrorNhType"
                },
                "udp_port": {
                    "id": "udp_port",
                    "description": "ip udp port used in contrail default encapsulation for mirroring",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "MplsExpType": {
            "type": "integer",
            "items": null
        },
        "NHModeType": {
            "type": "string",
            "items": null
        },
        "NamespaceAPIListType": {
            "properties": {
                "namespaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NamespaceAPIType"
                    }
                }
            }
        },
        "NamespaceAPISingleType": {
            "properties": {
                "namespace": {
                    "$ref": "#/definitions/NamespaceAPIType"
                }
            }
        },
        "NamespaceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "namespace_cidr": {
                    "description": "All networks in this namespace belong to this list of Prefixes. Not implemented.",
                    "$ref": "#/definitions/SubnetType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "NetworkDeviceConfigAPIListType": {
            "properties": {
                "network-device-configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetworkDeviceConfigAPIType"
                    }
                }
            }
        },
        "NetworkDeviceConfigAPISingleType": {
            "properties": {
                "network-device-config": {
                    "$ref": "#/definitions/NetworkDeviceConfigAPIType"
                }
            }
        },
        "NetworkDeviceConfigAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_router_ref": {
                    "description": "Network device config of a physical router.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "NetworkIpamAPIListType": {
            "properties": {
                "network-ipams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetworkIpamAPIType"
                    }
                }
            }
        },
        "NetworkIpamAPISingleType": {
            "properties": {
                "network-ipam": {
                    "$ref": "#/definitions/NetworkIpamAPIType"
                }
            }
        },
        "NetworkIpamAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "ipam_subnet_method": {
                    "description": "Subnet method configuration for ipam, user can configure user-defined, flat or auto.",
                    "$ref": "#/definitions/SubnetMethodType"
                },
                "ipam_subnets": {
                    "description": "List of subnets for this ipam.",
                    "$ref": "#/definitions/IpamSubnets"
                },
                "network_ipam_mgmt": {
                    "description": "Network IP Address Management configuration.",
                    "$ref": "#/definitions/IpamType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_DNS_ref": {
                    "description": "Reference to virtual DNS used by this IPAM.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "NetworkPolicyAPIListType": {
            "properties": {
                "network-policys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetworkPolicyAPIType"
                    }
                }
            }
        },
        "NetworkPolicyAPISingleType": {
            "properties": {
                "network-policy": {
                    "$ref": "#/definitions/NetworkPolicyAPIType"
                }
            }
        },
        "NetworkPolicyAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "network_policy_entries": {
                    "description": "Network policy rule entries.",
                    "$ref": "#/definitions/PolicyEntriesType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "NodeAPIListType": {
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodeAPIType"
                    }
                }
            }
        },
        "NodeAPISingleType": {
            "properties": {
                "node": {
                    "$ref": "#/definitions/NodeAPIType"
                }
            }
        },
        "NodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "aws_ami": {
                    "id": "aws_ami",
                    "type": "string",
                    "title": "AMI",
                    "default": "ami-73f7da13",
                    "items": null
                },
                "aws_instance_type": {
                    "id": "aws_instance_type",
                    "type": "string",
                    "title": "Instance Type",
                    "default": "t2.micro",
                    "items": null
                },
                "bm_properties": {
                    "description": "Details of baremetal hardware for scheduler",
                    "$ref": "#/definitions/BaremetalProperties"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "driver_info": {
                    "description": "Details of the driver for power management",
                    "$ref": "#/definitions/DriverInfo"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "gcp_image": {
                    "id": "gcp_image",
                    "type": "string",
                    "title": "Image",
                    "default": "ubuntu-os-cloud/ubuntu-1604-lts",
                    "items": null
                },
                "gcp_machine_type": {
                    "id": "gcp_machine_type",
                    "type": "string",
                    "title": "Machine Type",
                    "default": "n1-standard-1",
                    "items": null
                },
                "hostname": {
                    "id": "hostname",
                    "description": "Fully qualified host name",
                    "type": "string",
                    "title": "Hostname",
                    "default": "",
                    "items": null
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "ip_address": {
                    "id": "ip_address",
                    "description": "IP Address",
                    "type": "string",
                    "title": "IP Address",
                    "default": "",
                    "items": null
                },
                "keypair_ref": {
                    "description": "Reference to keypair object to import.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "mac_address": {
                    "id": "mac_address",
                    "description": "Provisioning Interface MAC Address",
                    "type": "string",
                    "title": "Interface MAC Address",
                    "default": "",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "password": {
                    "id": "password",
                    "description": "UserPassword",
                    "type": "string",
                    "title": "UserPassword",
                    "default": "ADMIN",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "ports": {
                    "description": "Parent of this port.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortAPIType"
                    }
                },
                "private_machine_properties": {
                    "id": "private_machine_properties",
                    "description": "Machine Properties from ironic",
                    "type": "string",
                    "title": "Machine Properties",
                    "default": "",
                    "items": null
                },
                "private_machine_state": {
                    "id": "private_machine_state",
                    "description": "Machine State",
                    "type": "string",
                    "title": "Machine State",
                    "default": "enroll",
                    "items": null
                },
                "ssh_key": {
                    "id": "ssh_key",
                    "description": "SSH Public Key",
                    "type": "string",
                    "title": "SSH public key",
                    "items": null
                },
                "type": {
                    "id": "type",
                    "description": "Type of machine resource",
                    "type": "string",
                    "title": "Machine Type",
                    "default": "private",
                    "items": null
                },
                "username": {
                    "id": "username",
                    "description": "User Name",
                    "type": "string",
                    "title": "User Name",
                    "default": "ADMIN",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenStackAddress": {
            "type": "object",
            "items": null,
            "properties": {
                "addr": {
                    "id": "addr",
                    "description": "IP Address given to the instance",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenStackFlavorProperty": {
            "type": "object",
            "items": null,
            "properties": {
                "id": {
                    "id": "id",
                    "description": "UUID of the flavor used to boot server instance or empty",
                    "type": "string",
                    "items": null
                },
                "links": {
                    "description": "links for the flavor used to boot server instance",
                    "$ref": "#/definitions/OpenStackLink"
                }
            }
        },
        "OpenStackImageProperty": {
            "type": "object",
            "items": null,
            "properties": {
                "id": {
                    "id": "id",
                    "description": "UUID of the image for server instance",
                    "type": "string",
                    "items": null
                },
                "links": {
                    "description": "links for the image for server instance",
                    "$ref": "#/definitions/OpenStackLink"
                }
            }
        },
        "OpenStackLink": {
            "type": "object",
            "items": null,
            "properties": {
                "href": {
                    "id": "href",
                    "description": "Link of the resource",
                    "type": "string",
                    "items": null
                },
                "rel": {
                    "id": "rel",
                    "description": "Type of the link",
                    "type": "string",
                    "items": null
                },
                "type": {
                    "id": "type",
                    "description": "provides a hint as to the type of representation to expect when following the link",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenstackComputeNodeAPIListType": {
            "properties": {
                "openstack-compute-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackComputeNodeAPIType"
                    }
                }
            }
        },
        "OpenstackComputeNodeAPISingleType": {
            "properties": {
                "openstack-compute-node": {
                    "$ref": "#/definitions/OpenstackComputeNodeAPIType"
                }
            }
        },
        "OpenstackComputeNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this openstack_compute node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenstackControlNodeAPIListType": {
            "properties": {
                "openstack-control-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackControlNodeAPIType"
                    }
                }
            }
        },
        "OpenstackControlNodeAPISingleType": {
            "properties": {
                "openstack-control-node": {
                    "$ref": "#/definitions/OpenstackControlNodeAPIType"
                }
            }
        },
        "OpenstackControlNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this openstack_control node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenstackMonitoringNodeAPIListType": {
            "properties": {
                "openstack-monitoring-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackMonitoringNodeAPIType"
                    }
                }
            }
        },
        "OpenstackMonitoringNodeAPISingleType": {
            "properties": {
                "openstack-monitoring-node": {
                    "$ref": "#/definitions/OpenstackMonitoringNodeAPIType"
                }
            }
        },
        "OpenstackMonitoringNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this openstack_monitoring node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenstackNetworkNodeAPIListType": {
            "properties": {
                "openstack-network-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackNetworkNodeAPIType"
                    }
                }
            }
        },
        "OpenstackNetworkNodeAPISingleType": {
            "properties": {
                "openstack-network-node": {
                    "$ref": "#/definitions/OpenstackNetworkNodeAPIType"
                }
            }
        },
        "OpenstackNetworkNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this openstack_network node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OpenstackStorageNodeAPIListType": {
            "properties": {
                "openstack-storage-nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpenstackStorageNodeAPIType"
                    }
                }
            }
        },
        "OpenstackStorageNodeAPISingleType": {
            "properties": {
                "openstack-storage-node": {
                    "$ref": "#/definitions/OpenstackStorageNodeAPIType"
                }
            }
        },
        "OpenstackStorageNodeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "node_ref": {
                    "description": "Reference to node object for this openstack_storage node.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "OsImageAPIListType": {
            "properties": {
                "os-images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OsImageAPIType"
                    }
                }
            }
        },
        "OsImageAPISingleType": {
            "properties": {
                "os-image": {
                    "$ref": "#/definitions/OsImageAPIType"
                }
            }
        },
        "OsImageAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "checksum": {
                    "id": "checksum",
                    "description": "Hash that is used over the image data",
                    "type": "string",
                    "items": null
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "container_format": {
                    "id": "container_format",
                    "type": "string",
                    "items": null
                },
                "created_at": {
                    "id": "created_at",
                    "description": "The UTC date and time when the resource was created, ISO 8601 format",
                    "type": "string",
                    "items": null
                },
                "disk_format": {
                    "id": "disk_format",
                    "type": "string",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "file": {
                    "id": "file",
                    "description": "Abosolute path of file to be used for creating image",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id": {
                    "id": "id",
                    "description": "A unique, user-defined image UUID, in the format \"nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn\", Where n is a hexadecimal digit from 0 to f, or F.",
                    "type": "string",
                    "items": null
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "location": {
                    "id": "location",
                    "description": "The URL to access the image file from the external store",
                    "type": "string",
                    "items": null
                },
                "min_disk": {
                    "id": "min_disk",
                    "description": "Amount of disk space in GB that is required to boot the image",
                    "type": "integer",
                    "items": null
                },
                "min_ram": {
                    "id": "min_ram",
                    "description": "Amount of RAM in MB that is required to boot the image",
                    "type": "integer",
                    "items": null
                },
                "name": {
                    "id": "name",
                    "description": "Name of the image to be created/updated",
                    "type": "string",
                    "items": null
                },
                "owner": {
                    "id": "owner",
                    "description": "An identifier for the owner of the image",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "property": {
                    "id": "property",
                    "description": "Additional properties of the image (name=value pair)",
                    "type": "string",
                    "items": null
                },
                "protected": {
                    "id": "protected",
                    "type": "boolean",
                    "items": null
                },
                "size": {
                    "id": "size",
                    "description": "The size of the image data, in bytes",
                    "type": "integer",
                    "items": null
                },
                "status": {
                    "id": "status",
                    "description": "The image status",
                    "type": "string",
                    "items": null
                },
                "tags": {
                    "id": "tags",
                    "description": "List of tags for this image",
                    "type": "string",
                    "items": null
                },
                "updated_at": {
                    "id": "updated_at",
                    "description": "The UTC date and time when the resource was created, ISO 8601 format",
                    "type": "string",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "visibility": {
                    "id": "visibility",
                    "description": "Visibility for this image",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PeeringPolicyAPIListType": {
            "properties": {
                "peering-policys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PeeringPolicyAPIType"
                    }
                }
            }
        },
        "PeeringPolicyAPISingleType": {
            "properties": {
                "peering-policy": {
                    "$ref": "#/definitions/PeeringPolicyAPIType"
                }
            }
        },
        "PeeringPolicyAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "peering_service": {
                    "description": "Peering policy service type.",
                    "$ref": "#/definitions/PeeringServiceType"
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PeeringServiceType": {
            "type": "string",
            "items": null
        },
        "PermType": {
            "type": "object",
            "items": null,
            "properties": {
                "group": {
                    "id": "group",
                    "type": "string",
                    "items": null
                },
                "group_access": {
                    "$ref": "#/definitions/AccessType"
                },
                "other_access": {
                    "$ref": "#/definitions/AccessType"
                },
                "owner": {
                    "id": "owner",
                    "type": "string",
                    "items": null
                },
                "owner_access": {
                    "$ref": "#/definitions/AccessType"
                }
            }
        },
        "PermType2": {
            "type": "object",
            "items": null,
            "properties": {
                "global_access": {
                    "description": "Globally(others) shared object and permissions for others of the object",
                    "$ref": "#/definitions/AccessType"
                },
                "owner": {
                    "id": "owner",
                    "description": "Owner tenant of the object",
                    "type": "string",
                    "items": null
                },
                "owner_access": {
                    "description": "Owner permissions of the object",
                    "$ref": "#/definitions/AccessType"
                },
                "share": {
                    "id": "share",
                    "description": "Selectively shared object, List of (tenant, permissions)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ShareType"
                    }
                }
            }
        },
        "PhysicalInterfaceAPIListType": {
            "properties": {
                "physical-interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhysicalInterfaceAPIType"
                    }
                }
            }
        },
        "PhysicalInterfaceAPISingleType": {
            "properties": {
                "physical-interface": {
                    "$ref": "#/definitions/PhysicalInterfaceAPIType"
                }
            }
        },
        "PhysicalInterfaceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "ethernet_segment_identifier": {
                    "id": "ethernet_segment_identifier",
                    "description": "Ethernet Segment Id configured for the Physical Interface. In a multihomed environment, user should configure the peer Physical interface with the same ESI.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "logical_interfaces": {
                    "description": "Logical interfaces on physical interface on physical routers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalInterfaceAPIType"
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_interface_ref": {
                    "description": "Reference to the other physical interface that is connected to this  physical interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PhysicalRouterAPIListType": {
            "properties": {
                "physical-routers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhysicalRouterAPIType"
                    }
                }
            }
        },
        "PhysicalRouterAPISingleType": {
            "properties": {
                "physical-router": {
                    "$ref": "#/definitions/PhysicalRouterAPIType"
                }
            }
        },
        "PhysicalRouterAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "bgp_router_ref": {
                    "description": "Reference to BGP peer representing this physical router.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "logical_interfaces": {
                    "description": "Logical interfaces on physical routers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalInterfaceAPIType"
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_interfaces": {
                    "description": "Physical interfaces on physical routers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PhysicalInterfaceAPIType"
                    }
                },
                "physical_router_dataplane_ip": {
                    "id": "physical_router_dataplane_ip",
                    "description": "This is ip address in the ip-fabric(underlay) network that can be used in data plane by physical router. Usually it is the VTEP address in VxLAN for the TOR switch.",
                    "type": "string",
                    "items": null
                },
                "physical_router_image_uri": {
                    "id": "physical_router_image_uri",
                    "description": "Physical router OS image uri",
                    "type": "string",
                    "items": null
                },
                "physical_router_junos_service_ports": {
                    "description": "Juniper JUNOS specific service interfaces name  to perform services like NAT.",
                    "$ref": "#/definitions/JunosServicePorts"
                },
                "physical_router_lldp": {
                    "id": "physical_router_lldp",
                    "description": "LLDP support on this router",
                    "type": "boolean",
                    "items": null
                },
                "physical_router_loopback_ip": {
                    "id": "physical_router_loopback_ip",
                    "description": "This is ip address of loopback interface of physical router. Used by the device manager to configure physical router loopback interface.",
                    "type": "string",
                    "items": null
                },
                "physical_router_management_ip": {
                    "id": "physical_router_management_ip",
                    "description": "Management ip for this physical router. It is used by the device manager to perform netconf and by SNMP collector if enabled.",
                    "type": "string",
                    "items": null
                },
                "physical_router_product_name": {
                    "id": "physical_router_product_name",
                    "description": "Model name of the physical router (e.g juniper). Used by the device manager to select driver.",
                    "type": "string",
                    "items": null
                },
                "physical_router_role": {
                    "description": "Physical router role (e.g spine or leaf), used by the device manager to provision physical router, for e.g device manager may choose to configure physical router based on its role.",
                    "$ref": "#/definitions/PhysicalRouterRole"
                },
                "physical_router_snmp": {
                    "id": "physical_router_snmp",
                    "description": "SNMP support on this router",
                    "type": "boolean",
                    "items": null
                },
                "physical_router_snmp_credentials": {
                    "description": "SNMP credentials for the physical router used by SNMP collector.",
                    "$ref": "#/definitions/SNMPCredentials"
                },
                "physical_router_user_credentials": {
                    "description": "Username and password for netconf to the physical router by device manager.",
                    "$ref": "#/definitions/UserCredentials"
                },
                "physical_router_vendor_name": {
                    "id": "physical_router_vendor_name",
                    "description": "Vendor name of the physical router (e.g juniper). Used by the device manager to select driver.",
                    "type": "string",
                    "items": null
                },
                "physical_router_vnc_managed": {
                    "id": "physical_router_vnc_managed",
                    "description": "This physical router is enabled to be configured by device manager.",
                    "type": "boolean",
                    "items": null
                },
                "telemetry_info": {
                    "description": "Telemetry info of router. Check TelemetryStateInfo",
                    "$ref": "#/definitions/TelemetryStateInfo"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_network_ref": {
                    "description": "Reference to virtual network, whose VRF is present on this physical router, Applicable when only VRF is present with no physical interfaces from this physical vrouter. Generally used when using device manager and option A+B for this virtual network in L3VPN use case.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_router_ref": {
                    "description": "Reference to vrouter responsible for this physical router. Currently only applicable for vrouters that are TOR agents.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "PhysicalRouterRole": {
            "type": "string",
            "items": null
        },
        "PluginProperties": {
            "type": "object",
            "items": null,
            "properties": {
                "plugin_property": {
                    "id": "plugin_property",
                    "description": "List of plugin specific properties (property, value)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginProperty"
                    }
                }
            }
        },
        "PluginProperty": {
            "type": "object",
            "items": null,
            "properties": {
                "property": {
                    "id": "property",
                    "type": "string",
                    "items": null
                },
                "value": {
                    "id": "value",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PolicyBasedForwardingRuleType": {
            "type": "object",
            "items": null,
            "properties": {
                "direction": {
                    "$ref": "#/definitions/TrafficDirectionType"
                },
                "dst_mac": {
                    "id": "dst_mac",
                    "type": "string",
                    "items": null
                },
                "ipv6_service_chain_address": {
                    "$ref": "#/definitions/IpAddressType"
                },
                "mpls_label": {
                    "id": "mpls_label",
                    "type": "integer",
                    "items": null
                },
                "protocol": {
                    "id": "protocol",
                    "type": "string",
                    "items": null
                },
                "service_chain_address": {
                    "id": "service_chain_address",
                    "type": "string",
                    "items": null
                },
                "src_mac": {
                    "id": "src_mac",
                    "type": "string",
                    "items": null
                },
                "vlan_tag": {
                    "id": "vlan_tag",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "PolicyEntriesType": {
            "type": "object",
            "items": null,
            "properties": {
                "policy_rule": {
                    "id": "policy_rule",
                    "description": "List of policy rules",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyRuleType"
                    }
                }
            }
        },
        "PolicyManagementAPIListType": {
            "properties": {
                "policy-managements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyManagementAPIType"
                    }
                }
            }
        },
        "PolicyManagementAPISingleType": {
            "properties": {
                "policy-management": {
                    "$ref": "#/definitions/PolicyManagementAPIType"
                }
            }
        },
        "PolicyManagementAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "address_groups": {
                    "description": "Address Group object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressGroupAPIType"
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "application_policy_sets": {
                    "description": "Application-policy object defining policies to apply for a given application tag",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationPolicySetAPIType"
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "firewall_policys": {
                    "description": "firewall-policy object consisting of one or more firewall rules",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallPolicyAPIType"
                    }
                },
                "firewall_rules": {
                    "description": "Firewall-rule object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallRuleAPIType"
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_groups": {
                    "description": "Service Group object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceGroupAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PolicyRuleType": {
            "type": "object",
            "items": null,
            "properties": {
                "action_list": {
                    "description": "Actions to be performed if packets match condition",
                    "$ref": "#/definitions/ActionListType"
                },
                "application": {
                    "id": "application",
                    "description": "Optionally application can be specified instead of protocol and port. not currently implemented",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "created": {
                    "id": "created",
                    "description": "timestamp when security group rule object gets created",
                    "type": "string",
                    "items": null
                },
                "direction": {
                    "$ref": "#/definitions/DirectionType"
                },
                "dst_addresses": {
                    "id": "dst_addresses",
                    "description": "Destination ip matching criteria",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressType"
                    }
                },
                "dst_ports": {
                    "id": "dst_ports",
                    "description": "Range of destination  port for layer 4 protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortType"
                    }
                },
                "ethertype": {
                    "$ref": "#/definitions/EtherType"
                },
                "last_modified": {
                    "id": "last_modified",
                    "description": "timestamp when security group rule object gets updated",
                    "type": "string",
                    "items": null
                },
                "protocol": {
                    "id": "protocol",
                    "description": "Layer 4 protocol in ip packet",
                    "type": "string",
                    "items": null
                },
                "rule_sequence": {
                    "description": "Deprecated, Will be removed because rules themselves are already an ordered list",
                    "$ref": "#/definitions/SequenceType"
                },
                "rule_uuid": {
                    "id": "rule_uuid",
                    "description": "Rule UUID is identifier used in flow records to identify rule",
                    "type": "string",
                    "items": null
                },
                "src_addresses": {
                    "id": "src_addresses",
                    "description": "Source ip matching criteria",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressType"
                    }
                },
                "src_ports": {
                    "id": "src_ports",
                    "description": "Range of source port for layer 4 protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortType"
                    }
                }
            }
        },
        "PortAPIListType": {
            "properties": {
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortAPIType"
                    }
                }
            }
        },
        "PortAPISingleType": {
            "properties": {
                "port": {
                    "$ref": "#/definitions/PortAPIType"
                }
            }
        },
        "PortAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "local_link_connection": {
                    "description": "The Port binding profile",
                    "$ref": "#/definitions/LocalLinkConnection"
                },
                "mac_address": {
                    "id": "mac_address",
                    "description": "Mac Address of the NIC in Node",
                    "type": "string",
                    "items": null
                },
                "node_uuid": {
                    "id": "node_uuid",
                    "description": "UUID of the parent node where this port is connected",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "pxe_enabled": {
                    "id": "pxe_enabled",
                    "description": "Indicates whether PXE is enabled or disabled on the Port.",
                    "type": "boolean",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PortMap": {
            "type": "object",
            "items": null,
            "properties": {
                "dst_port": {
                    "id": "dst_port",
                    "type": "integer",
                    "items": null
                },
                "protocol": {
                    "id": "protocol",
                    "type": "string",
                    "items": null
                },
                "src_port": {
                    "id": "src_port",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "PortMappings": {
            "type": "object",
            "items": null,
            "properties": {
                "port_mappings": {
                    "id": "port_mappings",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortMap"
                    }
                }
            }
        },
        "PortTupleAPIListType": {
            "properties": {
                "port-tuples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortTupleAPIType"
                    }
                }
            }
        },
        "PortTupleAPISingleType": {
            "properties": {
                "port-tuple": {
                    "$ref": "#/definitions/PortTupleAPIType"
                }
            }
        },
        "PortTupleAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "PortType": {
            "type": "object",
            "items": null,
            "properties": {
                "end_port": {
                    "$ref": "#/definitions/L4PortType"
                },
                "start_port": {
                    "$ref": "#/definitions/L4PortType"
                }
            }
        },
        "ProjectAPIListType": {
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectAPIType"
                    }
                }
            }
        },
        "ProjectAPISingleType": {
            "properties": {
                "project": {
                    "$ref": "#/definitions/ProjectAPIType"
                }
            }
        },
        "ProjectAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "address_groups": {
                    "description": "Project level address Group object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressGroupAPIType"
                    }
                },
                "alarm_enable": {
                    "id": "alarm_enable",
                    "description": "Flag to enable/disable alarms configured under global-system-config. True, if not set.",
                    "type": "boolean",
                    "items": null
                },
                "alarms": {
                    "description": "List of alarms that are applicable to objects anchored under the project.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmAPIType"
                    }
                },
                "alias_ip_pool_ref": {
                    "description": "Reference to alias ip pool in this project.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "api_access_lists": {
                    "description": "API access list is list of rules that define role based access to each API and its properties at project level.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIAccessListAPIType"
                    }
                },
                "application_policy_set_ref": {
                    "description": "Reference to default application-policy-set is automatically createdby system for default socped application policy sets. Needed by vrouter to identify default application-policy-set rules of a virtual machine interface",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "application_policy_sets": {
                    "description": "Project level application-policy object defining policies to apply for a given application tag",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationPolicySetAPIType"
                    }
                },
                "bgp_as_a_services": {
                    "description": "BGP as service object represents BGP peer in the virtual network that can participate in dynamic routing with implicit default gateway of the virtual network.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BGPAsAServiceAPIType"
                    }
                },
                "bgpvpns": {
                    "description": "BGP VPN resource contains a set of parameters for a BGP-based VPN",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BGPVPNAPIType"
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "firewall_policys": {
                    "description": "Project level firewall-policy object consisting of one or more firewall rules",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallPolicyAPIType"
                    }
                },
                "firewall_rules": {
                    "description": "Project level firewall-rule object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FirewallRuleAPIType"
                    }
                },
                "floating_ip_pool_ref": {
                    "description": "Reference to floating ip pool in this project.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "interface_route_tables": {
                    "description": "Interface route table is mechanism to add static routes pointing to this interface.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InterfaceRouteTableAPIType"
                    }
                },
                "loadbalancer_healthmonitors": {
                    "description": "Health monitor objects is configuration to monitor health of individual pool members.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerHealthmonitorAPIType"
                    }
                },
                "loadbalancer_listeners": {
                    "description": "Listener represents the application(protocol, port) to be load balanced.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerListenerAPIType"
                    }
                },
                "loadbalancer_pools": {
                    "description": "Loadbalancer pool object represent set(pool) member servers which needs load balancing.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerPoolAPIType"
                    }
                },
                "loadbalancers": {
                    "description": "Loadbalancer object represents a LBaaS instance. One single Virtual IP and multiple (listeners, pools). Applicable to LBaaS V2.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LoadbalancerAPIType"
                    }
                },
                "logical_routers": {
                    "description": "Logical router is a mechanism to connect multiple virtual network as they have been connected by a router.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LogicalRouterAPIType"
                    }
                },
                "namespace_ref": {
                    "description": "Reference to network namespace of this project.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/SubnetType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "network_ipams": {
                    "description": "IP Address Management object that controls, ip allocation, DNS and DHCP",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetworkIpamAPIType"
                    }
                },
                "network_policys": {
                    "description": "Network Policy is set access control rules that can be attached to virtual networks. Network ACL(s) and connectivity information is derived from Network policies that are attached to virtual networks.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetworkPolicyAPIType"
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "qos_configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QosConfigAPIType"
                    }
                },
                "quota": {
                    "description": "Max instances limits for various objects under project.",
                    "$ref": "#/definitions/QuotaType"
                },
                "route_aggregates": {
                    "description": "List of references of child routing route aggregate objects. automatically maintained by system.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteAggregateAPIType"
                    }
                },
                "route_tables": {
                    "description": "Network route table is mechanism of adding static routes in the virtual network",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteTableAPIType"
                    }
                },
                "routing_policys": {
                    "description": "List of references of child routing policy objects. automatically maintained by system.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoutingPolicyAPIType"
                    }
                },
                "security_groups": {
                    "description": "Security Groups are set of state full access control rules attached to interfaces.It can be used to implement microsegmentation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SecurityGroupAPIType"
                    }
                },
                "security_logging_objects": {
                    "description": "Security logging object configuration for specifying session logging criteria",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SecurityLoggingObjectAPIType"
                    }
                },
                "service_groups": {
                    "description": "Project level service Group object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceGroupAPIType"
                    }
                },
                "service_health_checks": {
                    "description": "Service health check is a keepalive mechanism for the virtual machine interface. Liveliness of the interface is determined based on configuration in the service health check. It is mainly designed for service instance interfaces. However it will work with any interface which present on contrail vrouter.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceHealthCheckAPIType"
                    }
                },
                "service_instances": {
                    "description": "Service instance represents logical instance service used in the virtual world, e.g. firewall, load balancer etc. It can represent one or multiple virtual machines or physical devices. Many service instances can share a virtual machine or physical device.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceInstanceAPIType"
                    }
                },
                "tags": {
                    "description": "Attribute attached to objects - has a type and value",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagAPIType"
                    }
                },
                "users": {
                    "description": "Reference to a project of this user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_ips": {
                    "description": "Virtual ip object application(protocol, port). Applicable only to LBaaS V1",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualIPAPIType"
                    }
                },
                "virtual_machine_interfaces": {
                    "description": "Virtual machine interface represent a interface(port) into virtual network. It may or may not have corresponding virtual machine. A virtual machine interface has atleast a MAC address and Ip address.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualMachineInterfaceAPIType"
                    }
                },
                "virtual_networks": {
                    "description": "Virtual network is collection of end points (interface or ip(s) or MAC(s)) that can talk to each other by default. It is collection of subnets connected by implicit router which default gateway in each subnet.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualNetworkAPIType"
                    }
                },
                "vxlan_routing": {
                    "id": "vxlan_routing",
                    "description": "When this knob is enabled for a project, an internal system VN (VN-Int) is created for every logical router in the project.",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "ProtocolType": {
            "type": "object",
            "items": null,
            "properties": {
                "port": {
                    "id": "port",
                    "type": "integer",
                    "items": null
                },
                "protocol": {
                    "id": "protocol",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ProviderAttachmentAPIListType": {
            "properties": {
                "provider-attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProviderAttachmentAPIType"
                    }
                }
            }
        },
        "ProviderAttachmentAPISingleType": {
            "properties": {
                "provider-attachment": {
                    "$ref": "#/definitions/ProviderAttachmentAPIType"
                }
            }
        },
        "ProviderAttachmentAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_router_ref": {
                    "description": "Not in Use.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "ProviderDetails": {
            "type": "object",
            "items": null,
            "properties": {
                "physical_network": {
                    "id": "physical_network",
                    "type": "string",
                    "items": null
                },
                "segmentation_id": {
                    "$ref": "#/definitions/VlanIdType"
                }
            }
        },
        "QosConfigAPIListType": {
            "properties": {
                "qos-configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QosConfigAPIType"
                    }
                }
            }
        },
        "QosConfigAPISingleType": {
            "properties": {
                "qos-config": {
                    "$ref": "#/definitions/QosConfigAPIType"
                }
            }
        },
        "QosConfigAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "default_forwarding_class_id": {
                    "description": "Default forwarding class used for all non-specified QOS bits",
                    "$ref": "#/definitions/ForwardingClassId"
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "dscp_entries": {
                    "description": "Map of DSCP match condition and applicable forwarding class for packet.",
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "global_system_config_ref": {
                    "description": "This link is internally created and may be removed in future. End users should not set this link or assume it to be there",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "mpls_exp_entries": {
                    "description": "Map of MPLS EXP values to applicable forwarding class for packet.",
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "qos_config_type": {
                    "description": "Specifies if qos-config is for vhost, fabric or for project.",
                    "$ref": "#/definitions/QosConfigType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "vlan_priority_entries": {
                    "description": "Map of .1p priority code to applicable forwarding class for packet.",
                    "$ref": "#/definitions/QosIdForwardingClassPairs"
                }
            }
        },
        "QosConfigType": {
            "type": "string",
            "items": null
        },
        "QosIdForwardingClassPair": {
            "type": "object",
            "items": null,
            "properties": {
                "forwarding_class_id": {
                    "$ref": "#/definitions/ForwardingClassId"
                },
                "key": {
                    "id": "key",
                    "description": "QoS bit value (DSCP or Vlan priority or EXP bit value",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "QosIdForwardingClassPairs": {
            "type": "object",
            "items": null,
            "properties": {
                "qos_id_forwarding_class_pair": {
                    "id": "qos_id_forwarding_class_pair",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QosIdForwardingClassPair"
                    }
                }
            }
        },
        "QosQueueAPIListType": {
            "properties": {
                "qos-queues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QosQueueAPIType"
                    }
                }
            }
        },
        "QosQueueAPISingleType": {
            "properties": {
                "qos-queue": {
                    "$ref": "#/definitions/QosQueueAPIType"
                }
            }
        },
        "QosQueueAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "max_bandwidth": {
                    "id": "max_bandwidth",
                    "description": "Maximum bandwidth for this queue.",
                    "type": "integer",
                    "items": null
                },
                "min_bandwidth": {
                    "id": "min_bandwidth",
                    "description": "Minimum bandwidth for this queue.",
                    "type": "integer",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "qos_queue_identifier": {
                    "id": "qos_queue_identifier",
                    "description": "Unique id for this queue.",
                    "type": "integer",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "QuotaType": {
            "type": "object",
            "items": null,
            "properties": {
                "access_control_list": {
                    "id": "access_control_list",
                    "description": "Maximum number of access control lists",
                    "type": "integer",
                    "items": null
                },
                "bgp_router": {
                    "id": "bgp_router",
                    "description": "Maximum number of bgp routers",
                    "type": "integer",
                    "items": null
                },
                "defaults": {
                    "id": "defaults",
                    "description": "Need to clarify",
                    "type": "integer",
                    "items": null
                },
                "floating_ip": {
                    "id": "floating_ip",
                    "description": "Maximum number of floating ips",
                    "type": "integer",
                    "items": null
                },
                "floating_ip_pool": {
                    "id": "floating_ip_pool",
                    "description": "Maximum number of floating ip pools",
                    "type": "integer",
                    "items": null
                },
                "global_vrouter_config": {
                    "id": "global_vrouter_config",
                    "description": "Maximum number of global vrouter configs",
                    "type": "integer",
                    "items": null
                },
                "instance_ip": {
                    "id": "instance_ip",
                    "description": "Maximum number of instance ips",
                    "type": "integer",
                    "items": null
                },
                "loadbalancer_healthmonitor": {
                    "id": "loadbalancer_healthmonitor",
                    "description": "Maximum number of loadbalancer health monitors",
                    "type": "integer",
                    "items": null
                },
                "loadbalancer_member": {
                    "id": "loadbalancer_member",
                    "description": "Maximum number of loadbalancer member",
                    "type": "integer",
                    "items": null
                },
                "loadbalancer_pool": {
                    "id": "loadbalancer_pool",
                    "description": "Maximum number of loadbalancer pools",
                    "type": "integer",
                    "items": null
                },
                "logical_router": {
                    "id": "logical_router",
                    "description": "Maximum number of logical routers",
                    "type": "integer",
                    "items": null
                },
                "network_ipam": {
                    "id": "network_ipam",
                    "description": "Maximum number of network IPAMs",
                    "type": "integer",
                    "items": null
                },
                "network_policy": {
                    "id": "network_policy",
                    "description": "Maximum number of network policies",
                    "type": "integer",
                    "items": null
                },
                "route_table": {
                    "id": "route_table",
                    "description": "Maximum number of route tables",
                    "type": "integer",
                    "items": null
                },
                "security_group": {
                    "id": "security_group",
                    "description": "Maximum number of security groups",
                    "type": "integer",
                    "items": null
                },
                "security_group_rule": {
                    "id": "security_group_rule",
                    "description": "Maximum number of security group rules",
                    "type": "integer",
                    "items": null
                },
                "security_logging_object": {
                    "id": "security_logging_object",
                    "description": "Maximum number of security logging objects",
                    "type": "integer",
                    "items": null
                },
                "service_instance": {
                    "id": "service_instance",
                    "description": "Maximum number of service instances",
                    "type": "integer",
                    "items": null
                },
                "service_template": {
                    "id": "service_template",
                    "description": "Maximum number of service templates",
                    "type": "integer",
                    "items": null
                },
                "subnet": {
                    "id": "subnet",
                    "description": "Maximum number of subnets",
                    "type": "integer",
                    "items": null
                },
                "virtual_DNS": {
                    "id": "virtual_DNS",
                    "description": "Maximum number of virtual DNS servers",
                    "type": "integer",
                    "items": null
                },
                "virtual_DNS_record": {
                    "id": "virtual_DNS_record",
                    "description": "Maximum number of virtual DNS records",
                    "type": "integer",
                    "items": null
                },
                "virtual_ip": {
                    "id": "virtual_ip",
                    "description": "Maximum number of virtual ips",
                    "type": "integer",
                    "items": null
                },
                "virtual_machine_interface": {
                    "id": "virtual_machine_interface",
                    "description": "Maximum number of virtual machine interfaces",
                    "type": "integer",
                    "items": null
                },
                "virtual_network": {
                    "id": "virtual_network",
                    "description": "Maximum number of virtual networks",
                    "type": "integer",
                    "items": null
                },
                "virtual_router": {
                    "id": "virtual_router",
                    "description": "Maximum number of logical routers",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "RbacPermType": {
            "type": "object",
            "items": null,
            "properties": {
                "role_crud": {
                    "id": "role_crud",
                    "description": "String CRUD representing permissions for C=create, R=read, U=update, D=delete.",
                    "type": "string",
                    "items": null
                },
                "role_name": {
                    "id": "role_name",
                    "description": "Name of the role",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RbacRuleEntriesType": {
            "type": "object",
            "items": null,
            "properties": {
                "rbac_rule": {
                    "id": "rbac_rule",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RbacRuleType"
                    }
                }
            }
        },
        "RbacRuleType": {
            "type": "object",
            "items": null,
            "properties": {
                "rule_field": {
                    "id": "rule_field",
                    "description": "Name of the level one field (property) for this object, * represent all properties",
                    "type": "string",
                    "items": null
                },
                "rule_object": {
                    "id": "rule_object",
                    "description": "Name of the REST API (object) for this rule, * represent all objects",
                    "type": "string",
                    "items": null
                },
                "rule_perms": {
                    "id": "rule_perms",
                    "description": "List of [(role, permissions),...]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RbacPermType"
                    }
                }
            }
        },
        "RouteAggregateAPIListType": {
            "properties": {
                "route-aggregates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteAggregateAPIType"
                    }
                }
            }
        },
        "RouteAggregateAPISingleType": {
            "properties": {
                "route-aggregate": {
                    "$ref": "#/definitions/RouteAggregateAPIType"
                }
            }
        },
        "RouteAggregateAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_instance_ref": {
                    "description": "Reference to route-aggregate policy attached to (service instance, interface).",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/ServiceInterfaceTag"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RouteNextHopType": {
            "type": "string",
            "items": null
        },
        "RouteTableAPIListType": {
            "properties": {
                "route-tables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteTableAPIType"
                    }
                }
            }
        },
        "RouteTableAPISingleType": {
            "properties": {
                "route-table": {
                    "$ref": "#/definitions/RouteTableAPIType"
                }
            }
        },
        "RouteTableAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "routes": {
                    "description": "Routes in the route table are configured in following way.",
                    "$ref": "#/definitions/RouteTableType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RouteTableType": {
            "type": "object",
            "items": null,
            "properties": {
                "route": {
                    "id": "route",
                    "description": "List of ip routes with following fields.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteType"
                    }
                }
            }
        },
        "RouteTargetAPIListType": {
            "properties": {
                "route-targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteTargetAPIType"
                    }
                }
            }
        },
        "RouteTargetAPISingleType": {
            "properties": {
                "route-target": {
                    "$ref": "#/definitions/RouteTargetAPIType"
                }
            }
        },
        "RouteTargetAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RouteTargetList": {
            "type": "object",
            "items": null,
            "properties": {
                "route_target": {
                    "id": "route_target",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "RouteType": {
            "type": "object",
            "items": null,
            "properties": {
                "community_attributes": {
                    "$ref": "#/definitions/CommunityAttributes"
                },
                "next_hop": {
                    "id": "next_hop",
                    "description": "Ip address or service instance name.",
                    "type": "string",
                    "items": null
                },
                "next_hop_type": {
                    "$ref": "#/definitions/RouteNextHopType"
                },
                "prefix": {
                    "id": "prefix",
                    "description": "Ip prefix/len format prefix",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RoutingInstanceAPIListType": {
            "properties": {
                "routing-instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoutingInstanceAPIType"
                    }
                }
            }
        },
        "RoutingInstanceAPISingleType": {
            "properties": {
                "routing-instance": {
                    "$ref": "#/definitions/RoutingInstanceAPIType"
                }
            }
        },
        "RoutingInstanceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RoutingPolicyAPIListType": {
            "properties": {
                "routing-policys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoutingPolicyAPIType"
                    }
                }
            }
        },
        "RoutingPolicyAPISingleType": {
            "properties": {
                "routing-policy": {
                    "$ref": "#/definitions/RoutingPolicyAPIType"
                }
            }
        },
        "RoutingPolicyAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_instance_ref": {
                    "description": "Reference to routing policy attached to (service instance, interface).",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/RoutingPolicyServiceInstanceType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RoutingPolicyServiceInstanceType": {
            "type": "object",
            "items": null,
            "properties": {
                "left_sequence": {
                    "id": "left_sequence",
                    "type": "string",
                    "items": null
                },
                "right_sequence": {
                    "id": "right_sequence",
                    "type": "string",
                    "items": null
                }
            }
        },
        "RpfModeType": {
            "type": "string",
            "items": null
        },
        "SNMPCredentials": {
            "type": "object",
            "items": null,
            "properties": {
                "local_port": {
                    "id": "local_port",
                    "type": "integer",
                    "items": null
                },
                "retries": {
                    "id": "retries",
                    "type": "integer",
                    "items": null
                },
                "timeout": {
                    "id": "timeout",
                    "type": "integer",
                    "items": null
                },
                "v2_community": {
                    "id": "v2_community",
                    "type": "string",
                    "items": null
                },
                "v3_authentication_password": {
                    "id": "v3_authentication_password",
                    "type": "string",
                    "items": null
                },
                "v3_authentication_protocol": {
                    "id": "v3_authentication_protocol",
                    "type": "string",
                    "items": null
                },
                "v3_context": {
                    "id": "v3_context",
                    "type": "string",
                    "items": null
                },
                "v3_context_engine_id": {
                    "id": "v3_context_engine_id",
                    "type": "string",
                    "items": null
                },
                "v3_engine_boots": {
                    "id": "v3_engine_boots",
                    "type": "integer",
                    "items": null
                },
                "v3_engine_id": {
                    "id": "v3_engine_id",
                    "type": "string",
                    "items": null
                },
                "v3_engine_time": {
                    "id": "v3_engine_time",
                    "type": "integer",
                    "items": null
                },
                "v3_privacy_password": {
                    "id": "v3_privacy_password",
                    "type": "string",
                    "items": null
                },
                "v3_privacy_protocol": {
                    "id": "v3_privacy_protocol",
                    "type": "string",
                    "items": null
                },
                "v3_security_engine_id": {
                    "id": "v3_security_engine_id",
                    "type": "string",
                    "items": null
                },
                "v3_security_level": {
                    "id": "v3_security_level",
                    "type": "string",
                    "items": null
                },
                "v3_security_name": {
                    "id": "v3_security_name",
                    "type": "string",
                    "items": null
                },
                "version": {
                    "id": "version",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "SecurityGroupAPIListType": {
            "properties": {
                "security-groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SecurityGroupAPIType"
                    }
                }
            }
        },
        "SecurityGroupAPISingleType": {
            "properties": {
                "security-group": {
                    "$ref": "#/definitions/SecurityGroupAPIType"
                }
            }
        },
        "SecurityGroupAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "access_control_lists": {
                    "description": "port access control list is  automatically derived from all the security groups attached to port.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessControlListAPIType"
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "configured_security_group_id": {
                    "description": "Unique 32 bit user defined ID assigned to this security group [1, 8M - 1].",
                    "$ref": "#/definitions/ConfiguredSecurityGroupIdType"
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "security_group_entries": {
                    "description": "Security group rule entries.",
                    "$ref": "#/definitions/PolicyEntriesType"
                },
                "security_group_id": {
                    "description": "Unique 32 bit ID automatically assigned to this security group [8M+1, 32G].",
                    "$ref": "#/definitions/SecurityGroupIdType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "SecurityGroupIdType": {
            "type": "integer",
            "items": null
        },
        "SecurityLoggingObjectAPIListType": {
            "properties": {
                "security-logging-objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SecurityLoggingObjectAPIType"
                    }
                }
            }
        },
        "SecurityLoggingObjectAPISingleType": {
            "properties": {
                "security-logging-object": {
                    "$ref": "#/definitions/SecurityLoggingObjectAPIType"
                }
            }
        },
        "SecurityLoggingObjectAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "network_policy_ref": {
                    "description": "Reference to network-policy attached to this security-logging-object",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/SecurityLoggingObjectRuleListType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "security_group_ref": {
                    "description": "Reference to security-group attached to this security-logging-object",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/SecurityLoggingObjectRuleListType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "security_logging_object_rate": {
                    "id": "security_logging_object_rate",
                    "description": "Security logging object rate defining rate of session logging",
                    "type": "integer",
                    "default": "100",
                    "items": null
                },
                "security_logging_object_rules": {
                    "description": "Security logging object rules derived internally.",
                    "$ref": "#/definitions/SecurityLoggingObjectRuleListType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "SecurityLoggingObjectRuleEntryType": {
            "type": "object",
            "items": null,
            "properties": {
                "rate": {
                    "id": "rate",
                    "description": "Rate at which sessions are logged. When rates are specified at multiple levels, the rate which specifies highest frequency is selected",
                    "type": "integer",
                    "items": null
                },
                "rule_uuid": {
                    "id": "rule_uuid",
                    "description": "Rule UUID of network policy or security-group. When this is absent it implies all rules of security-group or network-policy",
                    "type": "string",
                    "items": null
                }
            }
        },
        "SecurityLoggingObjectRuleListType": {
            "type": "object",
            "items": null,
            "properties": {
                "rule": {
                    "id": "rule",
                    "description": "List of rules along with logging rate for each rule. Both rule-uuid and rate are optional. When rule-uuid is absent then it means all rules of associated SG or network-policy",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SecurityLoggingObjectRuleEntryType"
                    }
                }
            }
        },
        "SequenceType": {
            "type": "object",
            "items": null,
            "properties": {
                "major": {
                    "id": "major",
                    "type": "integer",
                    "items": null
                },
                "minor": {
                    "id": "minor",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "ServerAPIListType": {
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServerAPIType"
                    }
                }
            }
        },
        "ServerAPISingleType": {
            "properties": {
                "server": {
                    "$ref": "#/definitions/ServerAPIType"
                }
            }
        },
        "ServerAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "accessIPv4": {
                    "id": "accessIPv4",
                    "description": "IPv4 address that should be used to access this server",
                    "type": "string",
                    "items": null
                },
                "accessIPv6": {
                    "id": "accessIPv6",
                    "description": "IPv6 address that should be used to access this server",
                    "type": "string",
                    "items": null
                },
                "addresses": {
                    "description": "The addresses for the server",
                    "$ref": "#/definitions/OpenStackAddress"
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "config_drive": {
                    "id": "config_drive",
                    "description": "Indicates whether or not a config drive was used for this server",
                    "type": "boolean",
                    "items": null
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "created": {
                    "id": "created",
                    "description": "The date and time when the resource was created. The date and time stamp format is ISO 8601",
                    "type": "string",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "flavor": {
                    "description": "The UUID and links for the flavor for your server instance",
                    "$ref": "#/definitions/OpenStackFlavorProperty"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "hostId": {
                    "id": "hostId",
                    "description": "An ID string representing the host",
                    "type": "string",
                    "items": null
                },
                "host_status": {
                    "id": "host_status",
                    "description": "The host status",
                    "type": "string",
                    "items": null
                },
                "id": {
                    "id": "id",
                    "description": "The UUID of the server",
                    "type": "string",
                    "items": null
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "image": {
                    "description": "The UUID and links for the image for your server instance",
                    "$ref": "#/definitions/OpenStackImageProperty"
                },
                "locked": {
                    "id": "locked",
                    "description": "True if the instance is locked otherwise False",
                    "type": "boolean",
                    "items": null
                },
                "name": {
                    "id": "name",
                    "description": "The UUID of the server",
                    "type": "string",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "progress": {
                    "id": "progress",
                    "description": "A percentage value of the build progress",
                    "type": "integer",
                    "items": null
                },
                "status": {
                    "id": "status",
                    "description": "The server status",
                    "type": "string",
                    "items": null
                },
                "tenant_id": {
                    "id": "tenant_id",
                    "description": "The UUID of the tenant in a multi-tenancy cloud",
                    "type": "string",
                    "items": null
                },
                "updated": {
                    "id": "updated",
                    "description": "The date and time when the resource was updated. The date and time stamp format is ISO 8601",
                    "type": "string",
                    "items": null
                },
                "user_id": {
                    "id": "user_id",
                    "description": "The user ID of the user who owns the server",
                    "type": "integer",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceApplianceAPIListType": {
            "properties": {
                "service-appliances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceApplianceAPIType"
                    }
                }
            }
        },
        "ServiceApplianceAPISingleType": {
            "properties": {
                "service-appliance": {
                    "$ref": "#/definitions/ServiceApplianceAPIType"
                }
            }
        },
        "ServiceApplianceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_interface_ref": {
                    "description": "Reference to physical interface that can be used as (service interface type)left, right, management OR other.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/ServiceApplianceInterfaceType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_appliance_ip_address": {
                    "description": "Management Ip address of the service-appliance.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "service_appliance_properties": {
                    "description": "List of Key:Value pairs used by the provider driver of this service appliance.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "service_appliance_user_credentials": {
                    "description": "Authentication credentials for driver to access service appliance.",
                    "$ref": "#/definitions/UserCredentials"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceApplianceInterfaceType": {
            "type": "object",
            "items": null,
            "properties": {
                "interface_type": {
                    "$ref": "#/definitions/ServiceInterfaceType"
                }
            }
        },
        "ServiceApplianceSetAPIListType": {
            "properties": {
                "service-appliance-sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceApplianceSetAPIType"
                    }
                }
            }
        },
        "ServiceApplianceSetAPISingleType": {
            "properties": {
                "service-appliance-set": {
                    "$ref": "#/definitions/ServiceApplianceSetAPIType"
                }
            }
        },
        "ServiceApplianceSetAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_appliance_driver": {
                    "id": "service_appliance_driver",
                    "description": "Name of the provider driver for this service appliance set.",
                    "type": "string",
                    "items": null
                },
                "service_appliance_ha_mode": {
                    "id": "service_appliance_ha_mode",
                    "description": "High availability mode for the service appliance set, active-active or active-backup.",
                    "type": "string",
                    "items": null
                },
                "service_appliance_set_properties": {
                    "description": "List of Key:Value pairs that are used by the provider driver and opaque to system.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "service_appliances": {
                    "description": "Service appliance is a member in service appliance set (e.g. Loadbalancer, Firewall provider).By default system will create \"ha-proxy\" based service appliance.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceApplianceAPIType"
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceConnectionModuleAPIListType": {
            "properties": {
                "service-connection-modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceConnectionModuleAPIType"
                    }
                }
            }
        },
        "ServiceConnectionModuleAPISingleType": {
            "properties": {
                "service-connection-module": {
                    "$ref": "#/definitions/ServiceConnectionModuleAPIType"
                }
            }
        },
        "ServiceConnectionModuleAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "e2_service": {
                    "description": "E2 service type.",
                    "$ref": "#/definitions/E2servicetype"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_object_ref": {
                    "description": "Links the service-connection-module to a service object.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_type": {
                    "description": "Type of service assigned for this object",
                    "$ref": "#/definitions/ServiceConnectionType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceConnectionType": {
            "type": "string",
            "items": null
        },
        "ServiceEndpointAPIListType": {
            "properties": {
                "service-endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceEndpointAPIType"
                    }
                }
            }
        },
        "ServiceEndpointAPISingleType": {
            "properties": {
                "service-endpoint": {
                    "$ref": "#/definitions/ServiceEndpointAPIType"
                }
            }
        },
        "ServiceEndpointAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_router_ref": {
                    "description": "Reference to Router for a given service.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_connection_module_ref": {
                    "description": "Link the service endpoint to service connection node",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_object_ref": {
                    "description": "Links the service-endpoints to a service object.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceGroupAPIListType": {
            "properties": {
                "service-groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceGroupAPIType"
                    }
                }
            }
        },
        "ServiceGroupAPISingleType": {
            "properties": {
                "service-group": {
                    "$ref": "#/definitions/ServiceGroupAPIType"
                }
            }
        },
        "ServiceGroupAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_group_firewall_service_list": {
                    "description": "list of service objects (protocol, source port and destination port",
                    "$ref": "#/definitions/FirewallServiceGroupType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceHealthCheckAPIListType": {
            "properties": {
                "service-health-checks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceHealthCheckAPIType"
                    }
                }
            }
        },
        "ServiceHealthCheckAPISingleType": {
            "properties": {
                "service-health-check": {
                    "$ref": "#/definitions/ServiceHealthCheckAPIType"
                }
            }
        },
        "ServiceHealthCheckAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_health_check_properties": {
                    "description": "Service health check has following fields.",
                    "$ref": "#/definitions/ServiceHealthCheckType"
                },
                "service_instance_ref": {
                    "description": "Reference to service instance using this service health check.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/ServiceInterfaceTag"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceHealthCheckType": {
            "type": "object",
            "items": null,
            "properties": {
                "delay": {
                    "id": "delay",
                    "description": "Time in seconds at which health check is repeated",
                    "type": "integer",
                    "items": null
                },
                "delayUsecs": {
                    "id": "delayUsecs",
                    "description": "Time in micro seconds at which health check is repeated",
                    "type": "integer",
                    "items": null
                },
                "enabled": {
                    "id": "enabled",
                    "description": "Administratively enable or disable this health check.",
                    "type": "boolean",
                    "items": null
                },
                "expected_codes": {
                    "id": "expected_codes",
                    "description": "In case monitor protocol is HTTP, expected return code for HTTP operations like 200 ok.",
                    "type": "string",
                    "items": null
                },
                "health_check_type": {
                    "description": "Health check type, currently only link-local, end-to-end and segment are supported",
                    "$ref": "#/definitions/HealthCheckType"
                },
                "http_method": {
                    "id": "http_method",
                    "description": "In case monitor protocol is HTTP, type of http method used like GET, PUT, POST etc",
                    "type": "string",
                    "items": null
                },
                "max_retries": {
                    "id": "max_retries",
                    "description": "Number of failures before declaring health bad",
                    "type": "integer",
                    "items": null
                },
                "monitor_type": {
                    "description": "Protocol used to monitor health, currently only HTTP, ICMP(ping), and BFD are supported",
                    "$ref": "#/definitions/HealthCheckProtocolType"
                },
                "timeout": {
                    "id": "timeout",
                    "description": "Time in seconds to wait for response",
                    "type": "integer",
                    "items": null
                },
                "timeoutUsecs": {
                    "id": "timeoutUsecs",
                    "description": "Time in micro seconds to wait for response",
                    "type": "integer",
                    "items": null
                },
                "url_path": {
                    "id": "url_path",
                    "description": "In case monitor protocol is HTTP, URL to be used. In case of ICMP, ip address",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceInstanceAPIListType": {
            "properties": {
                "service-instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceInstanceAPIType"
                    }
                }
            }
        },
        "ServiceInstanceAPISingleType": {
            "properties": {
                "service-instance": {
                    "$ref": "#/definitions/ServiceInstanceAPIType"
                }
            }
        },
        "ServiceInstanceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "instance_ip_ref": {
                    "description": "Reference to ip address, which is used as nexthop pointing to (service instance, service interface).",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/ServiceInterfaceTag"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "port_tuples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortTupleAPIType"
                    }
                },
                "service_instance_bindings": {
                    "description": "Opaque key value pair for generating config for the service instance.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "service_instance_properties": {
                    "description": "Service instance configuration parameters.",
                    "$ref": "#/definitions/ServiceInstanceType"
                },
                "service_template_ref": {
                    "description": "Reference to the service template of this service instance.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceInstanceInterfaceType": {
            "type": "object",
            "items": null,
            "properties": {
                "allowed_address_pairs": {
                    "description": "Allowed address pairs, list of (IP address, MAC) for this interface",
                    "$ref": "#/definitions/AllowedAddressPairs"
                },
                "ip_address": {
                    "description": "Shared ip for this interface (Only V1)",
                    "$ref": "#/definitions/IpAddressType"
                },
                "static_routes": {
                    "description": "Static routes for this interface (Only V1)",
                    "$ref": "#/definitions/RouteTableType"
                },
                "virtual_network": {
                    "id": "virtual_network",
                    "description": "Interface belongs to this virtual network.",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceInstanceType": {
            "type": "object",
            "items": null,
            "properties": {
                "auto_policy": {
                    "id": "auto_policy",
                    "description": "Set when system creates internal service chains, example SNAT with router external flag in logical router",
                    "type": "boolean",
                    "items": null
                },
                "availability_zone": {
                    "id": "availability_zone",
                    "description": "Availability zone used to spawn VM(s) for this service instance, used in version 1 (V1) only",
                    "type": "string",
                    "items": null
                },
                "ha_mode": {
                    "description": "When scale-out is greater than one, decides if active-active or active-backup, used in version 1 (V1) only",
                    "$ref": "#/definitions/AddressMode"
                },
                "interface_list": {
                    "id": "interface_list",
                    "description": "List of service instance interface properties. Ordered list as per service template",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceInstanceInterfaceType"
                    }
                },
                "left_ip_address": {
                    "description": "Deprecated",
                    "$ref": "#/definitions/IpAddressType"
                },
                "left_virtual_network": {
                    "id": "left_virtual_network",
                    "description": "Deprecated",
                    "type": "string",
                    "items": null
                },
                "management_virtual_network": {
                    "id": "management_virtual_network",
                    "description": "Deprecated",
                    "type": "string",
                    "items": null
                },
                "right_ip_address": {
                    "description": "Deprecated",
                    "$ref": "#/definitions/IpAddressType"
                },
                "right_virtual_network": {
                    "id": "right_virtual_network",
                    "description": "Deprecated",
                    "type": "string",
                    "items": null
                },
                "scale_out": {
                    "description": "Number of virtual machines in this service instance, used in version 1 (V1) only",
                    "$ref": "#/definitions/ServiceScaleOutType"
                },
                "virtual_router_id": {
                    "id": "virtual_router_id",
                    "description": "UUID of a virtual-router on which this service instance need to spawn. Used to spawn services on CPE device when Nova is not present",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceInterfaceTag": {
            "type": "object",
            "items": null,
            "properties": {
                "interface_type": {
                    "$ref": "#/definitions/ServiceInterfaceType"
                }
            }
        },
        "ServiceInterfaceType": {
            "type": "string",
            "items": null
        },
        "ServiceModeType": {
            "type": "string",
            "items": null
        },
        "ServiceObjectAPIListType": {
            "properties": {
                "service-objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceObjectAPIType"
                    }
                }
            }
        },
        "ServiceObjectAPISingleType": {
            "properties": {
                "service-object": {
                    "$ref": "#/definitions/ServiceObjectAPIType"
                }
            }
        },
        "ServiceObjectAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceScaleOutType": {
            "type": "object",
            "items": null,
            "properties": {
                "auto_scale": {
                    "id": "auto_scale",
                    "description": "Automatically change the number of virtual machines. Not implemented",
                    "type": "boolean",
                    "items": null
                },
                "max_instances": {
                    "id": "max_instances",
                    "description": "Maximum number of scale out factor(virtual machines). can be changed dynamically",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "ServiceTemplateAPIListType": {
            "properties": {
                "service-templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceTemplateAPIType"
                    }
                }
            }
        },
        "ServiceTemplateAPISingleType": {
            "properties": {
                "service-template": {
                    "$ref": "#/definitions/ServiceTemplateAPIType"
                }
            }
        },
        "ServiceTemplateAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_appliance_set_ref": {
                    "description": "Reference to the service appliance set represented by this service template.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_template_properties": {
                    "description": "Service template configuration parameters.",
                    "$ref": "#/definitions/ServiceTemplateType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "ServiceTemplateInterfaceType": {
            "type": "object",
            "items": null,
            "properties": {
                "service_interface_type": {
                    "description": "Type of service interface supported by this template left, right or other.",
                    "$ref": "#/definitions/ServiceInterfaceType"
                },
                "shared_ip": {
                    "id": "shared_ip",
                    "description": "Shared ip is required on this interface when service instance is scaled out (Only V1)",
                    "type": "boolean",
                    "items": null
                },
                "static_route_enable": {
                    "id": "static_route_enable",
                    "description": "Static routes configured required on this interface of service instance (Only V1)",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "ServiceTemplateType": {
            "type": "object",
            "items": null,
            "properties": {
                "availability_zone_enable": {
                    "id": "availability_zone_enable",
                    "description": "Enable availability zone for version 1 service instances",
                    "type": "boolean",
                    "items": null
                },
                "flavor": {
                    "id": "flavor",
                    "description": "Nova flavor used for service virtual machines, Version 1 only",
                    "type": "string",
                    "items": null
                },
                "image_name": {
                    "id": "image_name",
                    "description": "Glance image name for the service virtual machine, Version 1 only",
                    "type": "string",
                    "items": null
                },
                "instance_data": {
                    "id": "instance_data",
                    "description": "Opaque string (typically in json format) used to spawn a vrouter-instance.",
                    "type": "string",
                    "items": null
                },
                "interface_type": {
                    "id": "interface_type",
                    "description": "List of interfaces which decided number of interfaces and type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceTemplateInterfaceType"
                    }
                },
                "ordered_interfaces": {
                    "id": "ordered_interfaces",
                    "description": "Deprecated",
                    "type": "boolean",
                    "items": null
                },
                "service_mode": {
                    "description": "Service instance mode decides how packets are forwarded across the service",
                    "$ref": "#/definitions/ServiceModeType"
                },
                "service_scaling": {
                    "id": "service_scaling",
                    "description": "Enable scaling of service virtual machines, Version 1 only",
                    "type": "boolean",
                    "items": null
                },
                "service_type": {
                    "description": "Service instance mode decides how routing happens across the service",
                    "$ref": "#/definitions/ServiceType"
                },
                "service_virtualization_type": {
                    "description": "Service virtualization type decides how individual service instances are instantiated",
                    "$ref": "#/definitions/ServiceVirtualizationType"
                },
                "version": {
                    "id": "version",
                    "type": "integer",
                    "items": null
                },
                "vrouter_instance_type": {
                    "description": "Mechanism used to spawn service instance, when vrouter is spawning instances.Allowed values libvirt-qemu, docker or netns",
                    "$ref": "#/definitions/VRouterInstanceType"
                }
            }
        },
        "ServiceType": {
            "type": "string",
            "items": null
        },
        "ServiceVirtualizationType": {
            "type": "string",
            "items": null
        },
        "SessionPersistenceType": {
            "type": "string",
            "items": null
        },
        "ShareType": {
            "type": "object",
            "items": null,
            "properties": {
                "tenant": {
                    "id": "tenant",
                    "description": "Name of tenant with whom the object is shared",
                    "type": "string",
                    "items": null
                },
                "tenant_access": {
                    "description": "Allowed permissions in sharing",
                    "$ref": "#/definitions/AccessType"
                }
            }
        },
        "SimpleActionType": {
            "type": "string",
            "items": null
        },
        "StaticMirrorNhType": {
            "type": "object",
            "items": null,
            "properties": {
                "vni": {
                    "description": "Vni of vtep",
                    "$ref": "#/definitions/VxlanNetworkIdentifierType"
                },
                "vtep_dst_ip_address": {
                    "id": "vtep_dst_ip_address",
                    "description": "ip address of destination vtep",
                    "type": "string",
                    "items": null
                },
                "vtep_dst_mac_address": {
                    "id": "vtep_dst_mac_address",
                    "description": "mac address of destination vtep",
                    "type": "string",
                    "items": null
                }
            }
        },
        "SubnetAPIListType": {
            "properties": {
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubnetAPIType"
                    }
                }
            }
        },
        "SubnetAPISingleType": {
            "properties": {
                "subnet": {
                    "$ref": "#/definitions/SubnetAPIType"
                }
            }
        },
        "SubnetAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "subnet_ip_prefix": {
                    "description": "Ip prefix/length of the subnet.",
                    "$ref": "#/definitions/SubnetType"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_ref": {
                    "description": "Subnet belongs of the referenced virtual machine interface. This is used in CPE use case when a subnet is reachable via the interface. It also serves as dynamic DHCP pool for host on this LAN, where vrouter is DHCP server.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "SubnetListType": {
            "type": "object",
            "items": null,
            "properties": {
                "subnet": {
                    "id": "subnet",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubnetType"
                    }
                }
            }
        },
        "SubnetMethodType": {
            "type": "string",
            "items": null
        },
        "SubnetType": {
            "type": "object",
            "items": null,
            "properties": {
                "ip_prefix": {
                    "id": "ip_prefix",
                    "type": "string",
                    "items": null
                },
                "ip_prefix_len": {
                    "id": "ip_prefix_len",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "TagAPIListType": {
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagAPIType"
                    }
                }
            }
        },
        "TagAPISingleType": {
            "properties": {
                "tag": {
                    "$ref": "#/definitions/TagAPIType"
                }
            }
        },
        "TagAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "tag_id": {
                    "description": "Internal Tag ID encapsulating tag type and value in                  hexadecimal fomat: 0xTTTTVVVV (T: type, V: value)",
                    "$ref": "#/definitions/U32BitHexInt"
                },
                "tag_type_name": {
                    "id": "tag_type_name",
                    "description": "Tag type string representation",
                    "type": "string",
                    "items": null
                },
                "tag_type_ref": {
                    "description": "Tag type reference which is limited to one",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "tag_value": {
                    "id": "tag_value",
                    "description": "Tag value string representation",
                    "type": "string",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "TagTypeAPIListType": {
            "properties": {
                "tag-types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TagTypeAPIType"
                    }
                }
            }
        },
        "TagTypeAPISingleType": {
            "properties": {
                "tag-type": {
                    "$ref": "#/definitions/TagTypeAPIType"
                }
            }
        },
        "TagTypeAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "tag_type_id": {
                    "description": "Internal Tag type ID                  coded on 16 bits where the first 255 IDs are reserved                  and pre-defined. Users (principally cloud admin) can define                  arbitrary types but its automatically shared to all project as                  it is a global resource.",
                    "$ref": "#/definitions/U16BitHexInt"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "TelemetryResourceInfo": {
            "type": "object",
            "items": null,
            "properties": {
                "name": {
                    "id": "name",
                    "type": "string",
                    "items": null
                },
                "path": {
                    "id": "path",
                    "type": "string",
                    "items": null
                },
                "rate": {
                    "id": "rate",
                    "type": "string",
                    "items": null
                }
            }
        },
        "TelemetryStateInfo": {
            "type": "object",
            "items": null,
            "properties": {
                "resource": {
                    "id": "resource",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TelemetryResourceInfo"
                    }
                },
                "server_ip": {
                    "id": "server_ip",
                    "type": "string",
                    "items": null
                },
                "server_port": {
                    "id": "server_port",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "TimerType": {
            "type": "object",
            "items": null,
            "properties": {
                "end_time": {
                    "id": "end_time",
                    "type": "string",
                    "items": null
                },
                "off_interval": {
                    "id": "off_interval",
                    "type": "string",
                    "items": null
                },
                "on_interval": {
                    "id": "on_interval",
                    "type": "string",
                    "items": null
                },
                "start_time": {
                    "id": "start_time",
                    "type": "string",
                    "items": null
                }
            }
        },
        "TrafficDirectionType": {
            "type": "string",
            "default": "both",
            "items": null
        },
        "U16BitHexInt": {
            "type": "string",
            "items": null
        },
        "U32BitHexInt": {
            "type": "string",
            "items": null
        },
        "UserAPIListType": {
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAPIType"
                    }
                }
            }
        },
        "UserAPISingleType": {
            "properties": {
                "user": {
                    "$ref": "#/definitions/UserAPIType"
                }
            }
        },
        "UserAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "password": {
                    "id": "password",
                    "description": "Domain level quota, not currently implemented",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "UserCredentials": {
            "type": "object",
            "items": null,
            "properties": {
                "password": {
                    "id": "password",
                    "type": "string",
                    "items": null
                },
                "username": {
                    "id": "username",
                    "type": "string",
                    "items": null
                }
            }
        },
        "UserDefinedLogStat": {
            "type": "object",
            "items": null,
            "properties": {
                "name": {
                    "id": "name",
                    "description": "Name of the stat",
                    "type": "string",
                    "items": null
                },
                "pattern": {
                    "id": "pattern",
                    "description": "Perl type regular expression pattern to match",
                    "type": "string",
                    "items": null
                }
            }
        },
        "UserDefinedLogStatList": {
            "type": "object",
            "items": null,
            "properties": {
                "statlist": {
                    "id": "statlist",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserDefinedLogStat"
                    }
                }
            }
        },
        "UuidStringType": {
            "type": "string",
            "items": null
        },
        "UuidType": {
            "type": "object",
            "items": null,
            "properties": {
                "uuid_lslong": {
                    "id": "uuid_lslong",
                    "type": "integer",
                    "items": null
                },
                "uuid_mslong": {
                    "id": "uuid_mslong",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "UveKeysType": {
            "type": "object",
            "items": null,
            "properties": {
                "uve_key": {
                    "id": "uve_key",
                    "description": "List of UVE tables where this alarm config should be applied",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                }
            }
        },
        "VPNGroupAPIListType": {
            "properties": {
                "vpn-groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VPNGroupAPIType"
                    }
                }
            }
        },
        "VPNGroupAPISingleType": {
            "properties": {
                "vpn-group": {
                    "$ref": "#/definitions/VPNGroupAPIType"
                }
            }
        },
        "VPNGroupAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "location_ref": {
                    "description": "Reference to the locations",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "provisioning_log": {
                    "id": "provisioning_log",
                    "description": "Provisioning Log",
                    "type": "string",
                    "title": "Provisioning Log",
                    "default": "",
                    "items": null
                },
                "provisioning_progress": {
                    "id": "provisioning_progress",
                    "description": "Provisioning progress 0 - 100%",
                    "type": "integer",
                    "title": "Provisioning Progress",
                    "default": 0,
                    "items": null
                },
                "provisioning_progress_stage": {
                    "id": "provisioning_progress_stage",
                    "description": "Provisioning Progress Stage",
                    "type": "string",
                    "title": "Provisioning Progress Stage",
                    "default": "",
                    "items": null
                },
                "provisioning_start_time": {
                    "id": "provisioning_start_time",
                    "description": "Time provisioning started",
                    "type": "string",
                    "title": "Time provisioning started",
                    "default": "",
                    "items": null
                },
                "provisioning_state": {
                    "id": "provisioning_state",
                    "description": "Provisioning Status",
                    "type": "string",
                    "title": "Provisioning Status",
                    "default": "CREATED",
                    "items": null
                },
                "type": {
                    "id": "type",
                    "description": "Type of VPN",
                    "type": "string",
                    "title": "VPN Type",
                    "default": "ipsec",
                    "items": null
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        },
        "VRouterInstanceType": {
            "type": "string",
            "items": null
        },
        "VirtualDNSAPIListType": {
            "properties": {
                "virtual-DNSs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualDNSAPIType"
                    }
                }
            }
        },
        "VirtualDNSAPISingleType": {
            "properties": {
                "virtual-DNS": {
                    "$ref": "#/definitions/VirtualDNSAPIType"
                }
            }
        },
        "VirtualDNSAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_DNS_data": {
                    "description": "Virtual DNS data has configuration for virtual DNS like domain, dynamic records etc.",
                    "$ref": "#/definitions/VirtualDnsType"
                },
                "virtual_DNS_records": {
                    "description": "Static DNS records in virtual DNS server.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualDNSRecordAPIType"
                    }
                }
            }
        },
        "VirtualDNSRecordAPIListType": {
            "properties": {
                "virtual-DNS-records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualDNSRecordAPIType"
                    }
                }
            }
        },
        "VirtualDNSRecordAPISingleType": {
            "properties": {
                "virtual-DNS-record": {
                    "$ref": "#/definitions/VirtualDNSRecordAPIType"
                }
            }
        },
        "VirtualDNSRecordAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_DNS_record_data": {
                    "description": "DNS record data has configuration like type, name, ip address, loadbalancing etc.",
                    "$ref": "#/definitions/VirtualDnsRecordType"
                }
            }
        },
        "VirtualDnsRecordType": {
            "type": "object",
            "items": null,
            "properties": {
                "record_class": {
                    "description": "DNS record class supported is IN",
                    "$ref": "#/definitions/DnsRecordClassType"
                },
                "record_data": {
                    "id": "record_data",
                    "description": "DNS record data is either ip address or string depending on type",
                    "type": "string",
                    "items": null
                },
                "record_mx_preference": {
                    "id": "record_mx_preference",
                    "type": "integer",
                    "items": null
                },
                "record_name": {
                    "id": "record_name",
                    "description": "DNS name to be resolved",
                    "type": "string",
                    "items": null
                },
                "record_ttl_seconds": {
                    "id": "record_ttl_seconds",
                    "description": "Time To Live for this DNS record",
                    "type": "integer",
                    "items": null
                },
                "record_type": {
                    "description": "DNS record type can be A, AAAA, CNAME, PTR, NS and MX",
                    "$ref": "#/definitions/DnsRecordTypeType"
                }
            }
        },
        "VirtualDnsType": {
            "type": "object",
            "items": null,
            "properties": {
                "default_ttl_seconds": {
                    "id": "default_ttl_seconds",
                    "description": "Default Time To Live for DNS records",
                    "type": "integer",
                    "items": null
                },
                "domain_name": {
                    "id": "domain_name",
                    "description": "Default domain name for this virtual DNS server",
                    "type": "string",
                    "items": null
                },
                "dynamic_records_from_client": {
                    "id": "dynamic_records_from_client",
                    "description": "Allow automatic addition of records on VM launch, default is True",
                    "type": "boolean",
                    "items": null
                },
                "external_visible": {
                    "id": "external_visible",
                    "description": "Currently this option is not supported",
                    "type": "boolean",
                    "items": null
                },
                "floating_ip_record": {
                    "description": "Decides how floating ip records are added",
                    "$ref": "#/definitions/FloatingIpDnsNotation"
                },
                "next_virtual_DNS": {
                    "id": "next_virtual_DNS",
                    "description": "Next virtual DNS server to lookup if record is not found. Default is proxy to infrastructure DNS",
                    "type": "string",
                    "items": null
                },
                "record_order": {
                    "description": "Order of DNS load balancing, fixed, random, round-robin. Default is random",
                    "$ref": "#/definitions/DnsRecordOrderType"
                },
                "reverse_resolution": {
                    "id": "reverse_resolution",
                    "description": "Allow reverse DNS resolution, ip to name mapping",
                    "type": "boolean",
                    "items": null
                }
            }
        },
        "VirtualIPAPIListType": {
            "properties": {
                "virtual-ips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualIPAPIType"
                    }
                }
            }
        },
        "VirtualIPAPISingleType": {
            "properties": {
                "virtual-ip": {
                    "$ref": "#/definitions/VirtualIPAPIType"
                }
            }
        },
        "VirtualIPAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "loadbalancer_pool_ref": {
                    "description": "Reference to the load balancer pool that this virtual ip represent. Applicable only to LBaaS V1",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_ip_properties": {
                    "description": "Virtual ip configuration like port, protocol, subnet etc.",
                    "$ref": "#/definitions/VirtualIpType"
                },
                "virtual_machine_interface_ref": {
                    "description": "Reference to the virtual machine interface for virtual ip. Applicable only to LBaaS V1",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "VirtualIpType": {
            "type": "object",
            "items": null,
            "properties": {
                "address": {
                    "description": "IP address automatically allocated by system.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "admin_state": {
                    "id": "admin_state",
                    "description": "Administrative up or down.",
                    "type": "boolean",
                    "items": null
                },
                "connection_limit": {
                    "id": "connection_limit",
                    "description": "Maximum number of concurrent connections",
                    "type": "integer",
                    "items": null
                },
                "persistence_cookie_name": {
                    "id": "persistence_cookie_name",
                    "description": "Set this string if the relation of client and server(pool member) need to persist.",
                    "type": "string",
                    "items": null
                },
                "persistence_type": {
                    "description": "Method for persistence. HTTP_COOKIE, SOURCE_IP or APP_COOKIE.",
                    "$ref": "#/definitions/SessionPersistenceType"
                },
                "protocol": {
                    "description": "IP protocol string like http, https or tcp.",
                    "$ref": "#/definitions/LoadbalancerProtocolType"
                },
                "protocol_port": {
                    "id": "protocol_port",
                    "description": "Layer 4 protocol destination port.",
                    "type": "integer",
                    "items": null
                },
                "status": {
                    "id": "status",
                    "description": "Operating status for this virtual ip.",
                    "type": "string",
                    "items": null
                },
                "status_description": {
                    "id": "status_description",
                    "description": "Operating status description this virtual ip.",
                    "type": "string",
                    "items": null
                },
                "subnet_id": {
                    "description": "UUID of subnet in which to allocate the Virtual IP.",
                    "$ref": "#/definitions/UuidStringType"
                }
            }
        },
        "VirtualMachineAPIListType": {
            "properties": {
                "virtual-machines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualMachineAPIType"
                    }
                }
            }
        },
        "VirtualMachineAPISingleType": {
            "properties": {
                "virtual-machine": {
                    "$ref": "#/definitions/VirtualMachineAPIType"
                }
            }
        },
        "VirtualMachineAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "service_instance_ref": {
                    "description": "Reference to the service instance of this virtual machine.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interfaces": {
                    "description": "References to child interfaces this virtual machine has, this is DEPRECATED.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualMachineInterfaceAPIType"
                    }
                }
            }
        },
        "VirtualMachineInterfaceAPIListType": {
            "properties": {
                "virtual-machine-interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualMachineInterfaceAPIType"
                    }
                }
            }
        },
        "VirtualMachineInterfaceAPISingleType": {
            "properties": {
                "virtual-machine-interface": {
                    "$ref": "#/definitions/VirtualMachineInterfaceAPIType"
                }
            }
        },
        "VirtualMachineInterfaceAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "bgp_router_ref": {
                    "description": "Reference to bgp-router from the virtual machine interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "bridge_domain_ref": {
                    "description": "Virtual Machine interface maps to a bridge-domain by defaultor based on in coming 802.1Q vlan tag",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/BridgeDomainMembershipType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.",
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "interface_route_table_ref": {
                    "description": "Reference to the interface route table attached to this interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "physical_interface_ref": {
                    "description": "Reference to the physical interface of service appliance this service interface represents.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "port_security_enabled": {
                    "id": "port_security_enabled",
                    "description": "Port security status on the network",
                    "type": "boolean",
                    "default": true,
                    "items": null
                },
                "port_tuple_ref": {
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "qos_config_ref": {
                    "description": "Reference to QoS config for this virtual machine interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "routing_instance_ref": {
                    "description": "Automatically generated Forwarding policy. This will be deprecated in future in favour of VRF assign rules.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/PolicyBasedForwardingRuleType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "security_group_ref": {
                    "description": "Interface ACL, Automatically generated by system based on security groups attached to this interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "security_logging_object_ref": {
                    "description": "Reference to security logging object for this virtual machine interface",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_endpoint_ref": {
                    "description": "Links the access endpoint i.e virtual-machine-interface to service endpoint.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "service_health_check_ref": {
                    "description": "Reference to health check object attached to this interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_allowed_address_pairs": {
                    "description": "List of (IP address, MAC) other than instance ip on this interface.",
                    "$ref": "#/definitions/AllowedAddressPairs"
                },
                "virtual_machine_interface_bindings": {
                    "description": "Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "virtual_machine_interface_device_owner": {
                    "id": "virtual_machine_interface_device_owner",
                    "description": "For openstack compatibility, not used by system.",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interface_dhcp_option_list": {
                    "description": "DHCP options configuration specific to this interface.",
                    "$ref": "#/definitions/DhcpOptionsListType"
                },
                "virtual_machine_interface_disable_policy": {
                    "id": "virtual_machine_interface_disable_policy",
                    "description": "When True all policy checks for ingress and egress traffic from this interface are disabled. Flow table entries are not created. Features that require policy will not work on this interface, these include security group, floating IP, service chain, linklocal services.",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "virtual_machine_interface_fat_flow_protocols": {
                    "description": "List of (protocol, port number), for flows to interface with (protocol, destination port number), vrouter will ignore source port while setting up flow and ignore it as source port in reverse flow. Hence many flows will map to single flow.",
                    "$ref": "#/definitions/FatFlowProtocols"
                },
                "virtual_machine_interface_host_routes": {
                    "description": "List of host routes(prefixes, nexthop) that are passed to VM via DHCP.",
                    "$ref": "#/definitions/RouteTableType"
                },
                "virtual_machine_interface_mac_addresses": {
                    "description": "MAC address of the virtual machine interface, automatically assigned by system if not provided.",
                    "$ref": "#/definitions/MacAddressesType"
                },
                "virtual_machine_interface_properties": {
                    "description": "Virtual Machine Interface miscellaneous configurations.",
                    "$ref": "#/definitions/VirtualMachineInterfacePropertiesType"
                },
                "virtual_machine_interface_ref": {
                    "description": "List of references to the sub interfaces of this interface.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_machine_ref": {
                    "description": "This interface belongs to the referenced virtual machine.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_network_ref": {
                    "description": "This interface is member of the referenced virtual network.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "vlan_tag_based_bridge_domain": {
                    "id": "vlan_tag_based_bridge_domain",
                    "description": "Enable VLAN tag based bridge domain classification on the port",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "vrf_assign_table": {
                    "description": "VRF assignment policy for this interface, automatically generated by system.",
                    "$ref": "#/definitions/VrfAssignTableType"
                }
            }
        },
        "VirtualMachineInterfacePropertiesType": {
            "type": "object",
            "items": null,
            "properties": {
                "interface_mirror": {
                    "description": "Interface Mirror configuration",
                    "$ref": "#/definitions/InterfaceMirrorType"
                },
                "local_preference": {
                    "id": "local_preference",
                    "description": "BGP route local preference for routes representing this interface, higher value is higher preference",
                    "type": "integer",
                    "items": null
                },
                "service_interface_type": {
                    "description": "This interface belongs to Service Instance and is tagged as left, right or other",
                    "$ref": "#/definitions/ServiceInterfaceType"
                },
                "sub_interface_vlan_tag": {
                    "id": "sub_interface_vlan_tag",
                    "description": "802.1Q VLAN tag to be used if this interface is sub-interface for some other interface.",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "VirtualNetworkAPIListType": {
            "properties": {
                "virtual-networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualNetworkAPIType"
                    }
                }
            }
        },
        "VirtualNetworkAPISingleType": {
            "properties": {
                "virtual-network": {
                    "$ref": "#/definitions/VirtualNetworkAPIType"
                }
            }
        },
        "VirtualNetworkAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "access_control_lists": {
                    "description": "Virtual network access control list are automatically derived from all the network policies attached to virtual network.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessControlListAPIType"
                    }
                },
                "address_allocation_mode": {
                    "description": "Address allocation mode for virtual network.",
                    "$ref": "#/definitions/AddressAllocationModeType"
                },
                "alias_ip_pools": {
                    "description": "Alias ip pool is set of addresses that are carved out of a given network. Ip(s) from this set can be assigned to virtual-machine-interface so that they become members of this network",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AliasIPPoolAPIType"
                    }
                },
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "bgpvpn_ref": {
                    "description": "Back reference to virtual network associated to the BGP VPN resource",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "bridge_domains": {
                    "description": "bridge-domains configured in a virtual network",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BridgeDomainAPIType"
                    }
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "ecmp_hashing_include_fields": {
                    "description": "ECMP hashing config at global level.",
                    "$ref": "#/definitions/EcmpHashingIncludeFields"
                },
                "export_route_target_list": {
                    "description": "List of route targets that are used as export for this virtual network.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "external_ipam": {
                    "id": "external_ipam",
                    "description": "IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only feature.",
                    "type": "boolean",
                    "items": null
                },
                "floating_ip_pools": {
                    "description": "Floating ip pool is set of ip address that are carved out of a given network. Ip(s) from this set can be assigned to (virtual machine interface, ip) so that they become members of this network using one:one NAT.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FloatingIPPoolAPIType"
                    }
                },
                "flood_unknown_unicast": {
                    "id": "flood_unknown_unicast",
                    "description": "When true, packets with unknown unicast MAC address are flooded within the network. Default they are dropped.",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "import_route_target_list": {
                    "description": "List of route targets that are used as import for this virtual network.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "is_shared": {
                    "id": "is_shared",
                    "description": "When true, this virtual network is shared with all tenants.",
                    "type": "boolean",
                    "items": null
                },
                "layer2_control_word": {
                    "id": "layer2_control_word",
                    "description": "Enable/Disable adding control word to the Layer 2 encapsulation",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "mac_aging_time": {
                    "description": "MAC aging time on the network",
                    "$ref": "#/definitions/MACAgingTime"
                },
                "mac_learning_enabled": {
                    "id": "mac_learning_enabled",
                    "description": "Enable MAC learning on the network",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "mac_limit_control": {
                    "description": "MAC limit control on the network",
                    "$ref": "#/definitions/MACLimitControlType"
                },
                "mac_move_control": {
                    "description": "MAC move control on the network",
                    "$ref": "#/definitions/MACMoveLimitControlType"
                },
                "multi_policy_service_chains_enabled": {
                    "id": "multi_policy_service_chains_enabled",
                    "type": "boolean",
                    "items": null
                },
                "network_ipam_ref": {
                    "description": "Reference to network-ipam this network is using. It has list of subnets that are being used as property of the reference.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/VnSubnetsType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "network_policy_ref": {
                    "description": "Reference to network-policy attached to this network. It has sequence number to specify attachment order.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/VirtualNetworkPolicyType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "pbb_etree_enable": {
                    "id": "pbb_etree_enable",
                    "description": "Enable/Disable PBB ETREE mode on the network",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "pbb_evpn_enable": {
                    "id": "pbb_evpn_enable",
                    "description": "Enable/Disable PBB EVPN tunneling on the network",
                    "type": "boolean",
                    "default": false,
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "port_security_enabled": {
                    "id": "port_security_enabled",
                    "description": "Port security status on the network",
                    "type": "boolean",
                    "default": true,
                    "items": null
                },
                "provider_properties": {
                    "description": "Virtual network is provider network. Specifies VLAN tag and physical network name.",
                    "$ref": "#/definitions/ProviderDetails"
                },
                "qos_config_ref": {
                    "description": "Reference to QoS configuration for this virtual network.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "route_table_ref": {
                    "description": "Reference to route table attached to this virtual network.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "route_target_list": {
                    "description": "List of route targets that are used as both import and export for this virtual network.",
                    "$ref": "#/definitions/RouteTargetList"
                },
                "router_external": {
                    "id": "router_external",
                    "description": "When true, this virtual network is openstack router external network.",
                    "type": "boolean",
                    "items": null
                },
                "routing_instances": {
                    "description": "List of references of routing instances for this virtual network, routing instances are internal to the system.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoutingInstanceAPIType"
                    }
                },
                "security_logging_object_ref": {
                    "description": "Reference to security logging object for this virtual network.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_network_network_id": {
                    "description": "System assigned unique 32 bit ID for every virtual network.",
                    "$ref": "#/definitions/VirtualNetworkIdType"
                },
                "virtual_network_properties": {
                    "description": "Virtual network miscellaneous configurations.",
                    "$ref": "#/definitions/VirtualNetworkType"
                },
                "virtual_network_ref": {
                    "description": "Reference to a virtual network which is the provider network for the given virtual network. Traffic forwarding happens in the routing instance of the provider network.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "VirtualNetworkIdType": {
            "type": "integer",
            "items": null
        },
        "VirtualNetworkPolicyType": {
            "type": "object",
            "items": null,
            "properties": {
                "sequence": {
                    "description": "Sequence number to specify order of policy attachment to network",
                    "$ref": "#/definitions/SequenceType"
                },
                "timer": {
                    "description": "Timer to specify when the policy can be active",
                    "$ref": "#/definitions/TimerType"
                }
            }
        },
        "VirtualNetworkType": {
            "type": "object",
            "items": null,
            "properties": {
                "allow_transit": {
                    "id": "allow_transit",
                    "type": "boolean",
                    "items": null
                },
                "forwarding_mode": {
                    "description": "Packet forwarding mode for this virtual network",
                    "$ref": "#/definitions/ForwardingModeType"
                },
                "mirror_destination": {
                    "id": "mirror_destination",
                    "description": "Flag to mark the virtual network as mirror destination network",
                    "type": "boolean",
                    "items": null
                },
                "network_id": {
                    "id": "network_id",
                    "description": "Not currently in used",
                    "type": "integer",
                    "items": null
                },
                "rpf": {
                    "description": "Flag used to disable Reverse Path Forwarding(RPF) check for this network",
                    "$ref": "#/definitions/RpfModeType"
                },
                "vxlan_network_identifier": {
                    "description": "VxLAN VNI value for this network",
                    "$ref": "#/definitions/VxlanNetworkIdentifierType"
                }
            }
        },
        "VirtualRouterAPIListType": {
            "properties": {
                "virtual-routers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualRouterAPIType"
                    }
                }
            }
        },
        "VirtualRouterAPISingleType": {
            "properties": {
                "virtual-router": {
                    "$ref": "#/definitions/VirtualRouterAPIType"
                }
            }
        },
        "VirtualRouterAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "network_ipam_ref": {
                    "description": "Reference to network-ipam this virtual-router is using. It has list of virtual-router specific allocation-pools and cidrs that are being used as property of the reference.",
                    "properties": {
                        "attr": {
                            "$ref": "#/definitions/VirtualRouterNetworkIpamType"
                        },
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                },
                "virtual_machine_interfaces": {
                    "description": "An interface on a virtual-router, e.g. vhost0",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VirtualMachineInterfaceAPIType"
                    }
                },
                "virtual_machine_ref": {
                    "description": "References to all virtual machines on this vrouter. This link is not present for dynamically scheduled VMs by Nova.",
                    "properties": {
                        "to": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "uuid": {
                            "type": "string"
                        }
                    }
                },
                "virtual_router_dpdk_enabled": {
                    "id": "virtual_router_dpdk_enabled",
                    "description": "This vrouter's data path is using DPDK library, Virtual machines interfaces scheduled on this compute node will be tagged with additional flags so that they are spawned with user space virtio driver. It is only applicable for embedded vrouter.",
                    "type": "boolean",
                    "items": null
                },
                "virtual_router_ip_address": {
                    "description": "Ip address of the virtual router.",
                    "$ref": "#/definitions/IpAddressType"
                },
                "virtual_router_type": {
                    "description": "Different types of the vrouters in the system.",
                    "$ref": "#/definitions/VirtualRouterType"
                }
            }
        },
        "VirtualRouterNetworkIpamType": {
            "type": "object",
            "items": null,
            "properties": {
                "allocation_pools": {
                    "id": "allocation_pools",
                    "description": "List of ranges of ip address for vrouter specific allocation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllocationPoolType"
                    }
                },
                "subnet": {
                    "id": "subnet",
                    "description": "List of ip prefix and length for vrouter specific subnets",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubnetType"
                    }
                }
            }
        },
        "VirtualRouterType": {
            "type": "string",
            "items": null
        },
        "VlanIdType": {
            "type": "integer",
            "items": null
        },
        "VlanPriorityType": {
            "type": "integer",
            "items": null
        },
        "VnSubnetsType": {
            "type": "object",
            "items": null,
            "properties": {
                "host_routes": {
                    "description": "Common host routes to be sent via DHCP for VM(s) in all the subnets, Next hop for these routes is always default gateway",
                    "$ref": "#/definitions/RouteTableType"
                },
                "ipam_subnets": {
                    "id": "ipam_subnets",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IpamSubnetType"
                    }
                }
            }
        },
        "VpnType": {
            "type": "string",
            "default": "l3",
            "items": null
        },
        "VrfAssignRuleType": {
            "type": "object",
            "items": null,
            "properties": {
                "ignore_acl": {
                    "id": "ignore_acl",
                    "type": "boolean",
                    "items": null
                },
                "match_condition": {
                    "$ref": "#/definitions/MatchConditionType"
                },
                "routing_instance": {
                    "id": "routing_instance",
                    "type": "string",
                    "items": null
                },
                "vlan_tag": {
                    "id": "vlan_tag",
                    "type": "integer",
                    "items": null
                }
            }
        },
        "VrfAssignTableType": {
            "type": "object",
            "items": null,
            "properties": {
                "vrf_assign_rule": {
                    "id": "vrf_assign_rule",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VrfAssignRuleType"
                    }
                }
            }
        },
        "VxlanNetworkIdentifierModeType": {
            "type": "string",
            "items": null
        },
        "VxlanNetworkIdentifierType": {
            "type": "integer",
            "items": null
        },
        "WidgetAPIListType": {
            "properties": {
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WidgetAPIType"
                    }
                }
            }
        },
        "WidgetAPISingleType": {
            "properties": {
                "widget": {
                    "$ref": "#/definitions/WidgetAPIType"
                }
            }
        },
        "WidgetAPIType": {
            "type": "object",
            "items": null,
            "properties": {
                "annotations": {
                    "description": "Dictionary of arbitrary (key, value) on a resource.",
                    "$ref": "#/definitions/KeyValuePairs"
                },
                "configuration_version": {
                    "id": "configuration_version",
                    "description": "Configuration Version for the object.",
                    "type": "integer",
                    "items": null
                },
                "container_config": {
                    "id": "container_config",
                    "type": "string",
                    "title": "Container Config",
                    "items": null
                },
                "content_config": {
                    "id": "content_config",
                    "type": "string",
                    "title": "Content Config",
                    "items": null
                },
                "display_name": {
                    "id": "display_name",
                    "description": "Display name user configured string(name) that can be updated any time. Used as openstack name.",
                    "type": "string",
                    "items": null
                },
                "fq_name": {
                    "id": "fq_name",
                    "description": "FQ Name of the object",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "items": null
                    }
                },
                "id_perms": {
                    "description": "System maintained identity, time  and permissions data.",
                    "$ref": "#/definitions/IdPermsType"
                },
                "layout_config": {
                    "id": "layout_config",
                    "type": "string",
                    "title": "Layout Config",
                    "items": null
                },
                "parent_type": {
                    "id": "parent_type",
                    "description": "Parent resource type",
                    "type": "string",
                    "items": null
                },
                "parent_uuid": {
                    "id": "parent_uuid",
                    "description": "UUID of the parent object",
                    "type": "string",
                    "items": null
                },
                "perms2": {
                    "description": "Permissions data for role based access.",
                    "$ref": "#/definitions/PermType2"
                },
                "uuid": {
                    "id": "uuid",
                    "description": "UUID of the object, system automatically allocates one if not provided",
                    "type": "string",
                    "items": null
                }
            }
        }
    }
}