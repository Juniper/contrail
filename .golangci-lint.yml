run:
  # Concurrency is reduced in order to reduce RAM consumption
  concurrency: 2
  deadline: 5m
  skip-dirs:
  - extension/pkg/db/cache        # TODO: reenable when compilation fixed
  - extension/pkg/db/etcd         # TODO: reenable when compilation fixed
  - extension/pkg/services/vncapi # TODO: reenable when compilation fixed
  - extension/pkg/apisrv/client   # TODO: reenable when compilation fixed

issues:
  exclude:
  - .* is always .* # unparam issue
  exclude-use-default: false
  max-per-linter: 0

# Intentionally disabled linters:
# - dupl consumes too much RAM and CPU cycles
# - gosec consumes too much RAM and CPU cycles
# - megacheck uses staticcheck which consumes too much RAM and CPU cycles
# - staticcheck consumes too much RAM and CPU cycles
linters:
  enable-all: true
  disable:
  - dupl
  - gofmt # TODO: get rid of false-positives and enable gofmt
  - goimports # TODO: get rid of false-positives and enable goimports
  - gosec
  - megacheck
  - prealloc # TODO: fix prealloc issues in order to increase performance and enable prealloc
  - staticcheck

linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
  govet:
    # report about shadowed variables
    check-shadowing: true

    # Obtain type information from installed (to $GOPATH/pkg) package files:
    # golangci-lint will execute `go install -i` and `go test -i` for analyzed packages
    # before analyzing them.
    # By default this option is disabled and govet gets type information by loader from source code.
    # Loading from source code is slow, but it's done only once for all linters.
    # Go-installing of packages first time is much slower than loading them from source code,
    # therefore this option is disabled by default.
    # But repeated installation is fast in go >= 1.10 because of build caching.
    # Enable this option only if all conditions are met:
    #  1. you use only "fast" linters (--fast e.g.): no program loading occurs
    #  2. you use go >= 1.10
    #  3. you do repeated runs (false for CI) or cache $GOPATH/pkg or `go env GOCACHE` dir in CI.
    use-installed-packages: false
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
    - github.com/davecgh/go-spew/spew
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # call graph construction algorithm (cha, rta). In general, use cha for libraries,
    # and rta for programs with main packages. Default is cha.
    algo: cha

    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

    # custom stuff:
    #  govet:
    #    check-shadowing: true
    #  golint:
    #    min-confidence: 0
    #  gocyclo:
    #    min-complexity: 10
    #  maligned:
    #    suggest-new: true
    #  dupl:
    #    threshold: 100
    #  goconst:
    #    min-len: 2
    #    min-occurrences: 2
    #  depguard:
    #    list-type: blacklist
    #    packages:
    #    # logging is allowed only by logutils.Log, logrus
    #    # is allowed to use only in logutils package
    #    - github.com/sirupsen/logrus
    #  misspell:
    #    locale: US
