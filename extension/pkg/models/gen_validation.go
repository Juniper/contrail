// Code generated by contrailschema tool from template type_validation.tmpl; DO NOT EDIT.

package models

import (
	"strings"

	"github.com/pkg/errors"
)

//This is needed to prevent an import error.
var _ = strings.Count
var _ = errors.New

//ValidateShareType validation based on information in schema
func (sv *SchemaValidator) ValidateShareType(obj *ShareType) error {

	return nil
}

//ValidatePermType2 validation based on information in schema
func (sv *SchemaValidator) ValidatePermType2(obj *PermType2) error {

	{

		for _, value := range obj.Share {

			if value != nil {
				err := sv.ValidateShareType(value)

				if err != nil {
					return err
				}
			}

		}

	}

	return nil
}

//ValidateKeyValuePair validation based on information in schema
func (sv *SchemaValidator) ValidateKeyValuePair(obj *KeyValuePair) error {

	return nil
}

//ValidateKeyValuePairs validation based on information in schema
func (sv *SchemaValidator) ValidateKeyValuePairs(obj *KeyValuePairs) error {

	{

		for _, value := range obj.KeyValuePair {

			if value != nil {
				err := sv.ValidateKeyValuePair(value)

				if err != nil {
					return err
				}
			}

		}

	}

	return nil
}

//ValidatePermType validation based on information in schema
func (sv *SchemaValidator) ValidatePermType(obj *PermType) error {

	return nil
}

//ValidateUuidType validation based on information in schema
func (sv *SchemaValidator) ValidateUuidType(obj *UuidType) error {

	return nil
}

//ValidateIdPermsType validation based on information in schema
func (sv *SchemaValidator) ValidateIdPermsType(obj *IdPermsType) error {

	{

		if obj.Created != "" {

			fv, err := sv.GetFormatValidator("date-time")
			if err != nil {
				return err
			}
			err = fv(obj.Created)
			if err != nil {
				return err
			}

		}

	}

	{

		if obj.LastModified != "" {

			fv, err := sv.GetFormatValidator("date-time")
			if err != nil {
				return err
			}
			err = fv(obj.LastModified)
			if err != nil {
				return err
			}

		}

	}

	{

		if obj.Permissions != nil {
			err := sv.ValidatePermType(obj.Permissions)

			if err != nil {
				return err
			}
		}

	}

	{

		if obj.UUID != nil {
			err := sv.ValidateUuidType(obj.UUID)

			if err != nil {
				return err
			}
		}

	}

	return nil
}

//ValidateSample validation based on information in schema
func (sv *SchemaValidator) ValidateSample(obj *Sample) error {
	//Validate Properties

	{

		if obj.IDPerms != nil {
			err := sv.ValidateIdPermsType(obj.IDPerms)

			if err != nil {
				return err
			}
		}

	}

	{

		if obj.Perms2 != nil {
			err := sv.ValidatePermType2(obj.Perms2)

			if err != nil {
				return err
			}
		}

	}

	{

		if obj.Annotations != nil {
			err := sv.ValidateKeyValuePairs(obj.Annotations)

			if err != nil {
				return err
			}
		}

	}

	//Validate References

	return nil
}

//ValidateTag validation based on information in schema
func (sv *SchemaValidator) ValidateTag(obj *Tag) error {
	//Validate Properties

	{

		if obj.Annotations != nil {
			err := sv.ValidateKeyValuePairs(obj.Annotations)

			if err != nil {
				return err
			}
		}

	}

	{

		if obj.IDPerms != nil {
			err := sv.ValidateIdPermsType(obj.IDPerms)

			if err != nil {
				return err
			}
		}

	}

	{

		if obj.Perms2 != nil {
			err := sv.ValidatePermType2(obj.Perms2)

			if err != nil {
				return err
			}
		}

	}

	//Validate References

	return nil
}
