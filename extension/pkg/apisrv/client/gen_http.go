// Code generated by contrailschema tool from template client.tmpl; DO NOT EDIT.

package client

import (
	"context"

	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/services"
)

// This is needed to prevent an import error
var _ = models.Version

func (h *HTTP) CreateSample(ctx context.Context, request *services.CreateSampleRequest) (*services.CreateSampleResponse, error) {
	response := &services.CreateSampleResponse{}
	_, err := h.Create(ctx, "/samples", request, response)
	return response, err
}

func (h *HTTP) UpdateSample(ctx context.Context, request *services.UpdateSampleRequest) (*services.UpdateSampleResponse, error) {
	response := &services.UpdateSampleResponse{}
	_, err := h.Update(ctx, "/sample/"+request.Sample.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteSample(ctx context.Context, request *services.DeleteSampleRequest) (*services.DeleteSampleResponse, error) {
	response := &services.DeleteSampleResponse{}
	_, err := h.Delete(ctx, "/sample/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetSample(ctx context.Context, request *services.GetSampleRequest) (*services.GetSampleResponse, error) {
	response := &services.GetSampleResponse{}
	_, err := h.Read(ctx, "/sample/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListSample(ctx context.Context, request *services.ListSampleRequest) (*services.ListSampleResponse, error) {
	//TODO(nati) support encoding list spec for query param.
	response := &services.ListSampleResponse{}
	_, err := h.ReadWithQuery(ctx, "/samples", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateSampleTagRef(
	ctx context.Context, request *services.CreateSampleTagRefRequest,
) (*services.CreateSampleTagRefResponse, error) {
	data := getRefUpdateFromRequestSampleTagRef(request, services.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSampleTagRefResponse)(request), nil
}

func (h *HTTP) DeleteSampleTagRef(
	ctx context.Context, request *services.DeleteSampleTagRefRequest,
) (*services.DeleteSampleTagRefResponse, error) {
	data := getRefUpdateFromRequestSampleTagRef((*services.CreateSampleTagRefRequest)(request), services.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSampleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestSampleTagRef(request *services.CreateSampleTagRefRequest, operation services.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSampleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "sample",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateTag(ctx context.Context, request *services.CreateTagRequest) (*services.CreateTagResponse, error) {
	response := &services.CreateTagResponse{}
	_, err := h.Create(ctx, "/tags", request, response)
	return response, err
}

func (h *HTTP) UpdateTag(ctx context.Context, request *services.UpdateTagRequest) (*services.UpdateTagResponse, error) {
	response := &services.UpdateTagResponse{}
	_, err := h.Update(ctx, "/tag/"+request.Tag.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteTag(ctx context.Context, request *services.DeleteTagRequest) (*services.DeleteTagResponse, error) {
	response := &services.DeleteTagResponse{}
	_, err := h.Delete(ctx, "/tag/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetTag(ctx context.Context, request *services.GetTagRequest) (*services.GetTagResponse, error) {
	response := &services.GetTagResponse{}
	_, err := h.Read(ctx, "/tag/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListTag(ctx context.Context, request *services.ListTagRequest) (*services.ListTagResponse, error) {
	//TODO(nati) support encoding list spec for query param.
	response := &services.ListTagResponse{}
	_, err := h.ReadWithQuery(ctx, "/tags", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateTagTagRef(
	ctx context.Context, request *services.CreateTagTagRefRequest,
) (*services.CreateTagTagRefResponse, error) {
	data := getRefUpdateFromRequestTagTagRef(request, services.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateTagTagRefResponse)(request), nil
}

func (h *HTTP) DeleteTagTagRef(
	ctx context.Context, request *services.DeleteTagTagRefRequest,
) (*services.DeleteTagTagRefResponse, error) {
	data := getRefUpdateFromRequestTagTagRef((*services.CreateTagTagRefRequest)(request), services.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteTagTagRefResponse)(request), nil
}

func getRefUpdateFromRequestTagTagRef(request *services.CreateTagTagRefRequest, operation services.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetTagTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "tag",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}
