// Code generated by contrailschema tool from template service_interface.tmpl; DO NOT EDIT.

package services

import (
	"context"

	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"

	"github.com/Juniper/contrail/extension/pkg/models"
	"github.com/Juniper/contrail/pkg/models/basemodels"
	"github.com/Juniper/contrail/pkg/services/baseservices"
)

//This is needed to prevent an import error.
var _ = types.AnyMessageName

type Service interface {
	Next() Service
	SetNext(Service)

	WriteService
	ReadService
}

type WriteService interface {
	CreateSample(context.Context, *CreateSampleRequest) (*CreateSampleResponse, error)
	UpdateSample(context.Context, *UpdateSampleRequest) (*UpdateSampleResponse, error)
	DeleteSample(context.Context, *DeleteSampleRequest) (*DeleteSampleResponse, error)

	CreateSampleTagRef(context.Context, *CreateSampleTagRefRequest) (*CreateSampleTagRefResponse, error)
	DeleteSampleTagRef(context.Context, *DeleteSampleTagRefRequest) (*DeleteSampleTagRefResponse, error)

	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)

	CreateTagTagRef(context.Context, *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error)
	DeleteTagTagRef(context.Context, *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error)
}

type ReadService interface {
	GetSample(context.Context, *GetSampleRequest) (*GetSampleResponse, error)
	ListSample(context.Context, *ListSampleRequest) (*ListSampleResponse, error)

	GetTag(context.Context, *GetTagRequest) (*GetTagResponse, error)
	ListTag(context.Context, *ListTagRequest) (*ListTagResponse, error)
}

type Sample = models.Sample

func (service *BaseService) CreateSample(ctx context.Context, request *CreateSampleRequest) (*CreateSampleResponse, error) {
	if service.next == nil {
		return &CreateSampleResponse{
			Sample: request.GetSample(),
		}, nil
	}
	return service.Next().CreateSample(ctx, request)
}
func (service *BaseService) UpdateSample(ctx context.Context, request *UpdateSampleRequest) (*UpdateSampleResponse, error) {
	if service.next == nil {
		return &UpdateSampleResponse{
			Sample: request.GetSample(),
		}, nil
	}
	return service.Next().UpdateSample(ctx, request)
}
func (service *BaseService) DeleteSample(ctx context.Context, request *DeleteSampleRequest) (*DeleteSampleResponse, error) {
	if service.next == nil {
		return &DeleteSampleResponse{
			ID: request.ID,
		}, nil
	}
	return service.Next().DeleteSample(ctx, request)
}
func (service *BaseService) GetSample(ctx context.Context, request *GetSampleRequest) (*GetSampleResponse, error) {
	if service.next == nil {
		return nil, nil
	}
	return service.Next().GetSample(ctx, request)
}
func (service *BaseService) ListSample(ctx context.Context, request *ListSampleRequest) (*ListSampleResponse, error) {
	if service.next == nil {
		return nil, nil
	}
	return service.Next().ListSample(ctx, request)
}

func (service *BaseService) CreateSampleTagRef(ctx context.Context, request *CreateSampleTagRefRequest) (*CreateSampleTagRefResponse, error) {
	if service.next == nil {
		return &CreateSampleTagRefResponse{
			ID:           request.ID,
			SampleTagRef: request.GetSampleTagRef(),
		}, nil
	}
	return service.Next().CreateSampleTagRef(ctx, request)
}

func (service *BaseService) DeleteSampleTagRef(ctx context.Context, request *DeleteSampleTagRefRequest) (*DeleteSampleTagRefResponse, error) {
	if service.next == nil {
		return &DeleteSampleTagRefResponse{
			ID:           request.ID,
			SampleTagRef: request.GetSampleTagRef(),
		}, nil
	}
	return service.Next().DeleteSampleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSampleTagRef(ctx context.Context, request *CreateSampleTagRefRequest) (*CreateSampleTagRefResponse, error) {
	refField := models.SampleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSample(ctx, &GetSampleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Sample
		obj.AddTagRef(request.SampleTagRef)

		_, err = s.BaseService.UpdateSample(ctx, &UpdateSampleRequest{
			Sample:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSampleTagRefResponse{
		ID:           request.ID,
		SampleTagRef: request.GetSampleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSampleTagRef(ctx context.Context, request *DeleteSampleTagRefRequest) (*DeleteSampleTagRefResponse, error) {
	refField := models.SampleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSample(ctx, &GetSampleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Sample
		obj.RemoveTagRef(request.SampleTagRef)

		_, err = s.BaseService.UpdateSample(ctx, &UpdateSampleRequest{
			Sample:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSampleTagRefResponse{
		ID:           request.ID,
		SampleTagRef: request.GetSampleTagRef(),
	}, nil
}

func (service *EventProducerService) CreateSample(ctx context.Context, request *CreateSampleRequest) (*CreateSampleResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateSampleRequest{
				CreateSampleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return service.Next().CreateSample(ctx, request)
}
func (service *EventProducerService) UpdateSample(ctx context.Context, request *UpdateSampleRequest) (*UpdateSampleResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateSampleRequest{
				UpdateSampleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return service.Next().UpdateSample(ctx, request)
}
func (service *EventProducerService) DeleteSample(ctx context.Context, request *DeleteSampleRequest) (*DeleteSampleResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteSampleRequest{
				DeleteSampleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return service.Next().DeleteSample(ctx, request)
}

func (service *EventProducerService) CreateSampleTagRef(ctx context.Context, request *CreateSampleTagRefRequest) (*CreateSampleTagRefResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSampleTagRefRequest{
			CreateSampleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return service.Next().CreateSampleTagRef(ctx, request)
}

func (service *EventProducerService) DeleteSampleTagRef(ctx context.Context, request *DeleteSampleTagRefRequest) (*DeleteSampleTagRefResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSampleTagRefRequest{
			DeleteSampleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return service.Next().DeleteSampleTagRef(ctx, request)
}

func (e *Event_CreateSampleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSampleRequest
	model := request.Sample
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetSample(ctx,
			&GetSampleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			model := request.Sample
			response, err := service.UpdateSample(ctx, &UpdateSampleRequest{
				Sample:    model,
				FieldMask: basemodels.MapToFieldMask(model.ToMap()),
			})
			if err != nil {
				return nil, err
			}
			return &Event{
				Request: &Event_UpdateSampleRequest{
					UpdateSampleRequest: &UpdateSampleRequest{
						Sample: response.GetSample(),
					},
				},
			}, nil
		}
	}
	response, err := service.CreateSample(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateSampleRequest{
			CreateSampleRequest: &CreateSampleRequest{
				Sample: response.GetSample(),
			},
		},
	}, nil
}

func (e *Event_UpdateSampleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateSampleRequest
	response, err := service.UpdateSample(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateSampleRequest{
			UpdateSampleRequest: &UpdateSampleRequest{
				Sample: response.GetSample(),
			},
		},
	}, nil
}

func (e *Event_DeleteSampleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSampleRequest
	_, err := service.DeleteSample(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteSampleRequest{
			DeleteSampleRequest: &DeleteSampleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateSampleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSampleTagRefRequest
	if _, err := service.CreateSampleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSampleTagRefRequest{
		CreateSampleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSampleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSampleTagRefRequest
	if _, err := service.DeleteSampleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSampleTagRefRequest{
		DeleteSampleTagRefRequest: request,
	}}, nil
}

type Tag = models.Tag

func (service *BaseService) CreateTag(ctx context.Context, request *CreateTagRequest) (*CreateTagResponse, error) {
	if service.next == nil {
		return &CreateTagResponse{
			Tag: request.GetTag(),
		}, nil
	}
	return service.Next().CreateTag(ctx, request)
}
func (service *BaseService) UpdateTag(ctx context.Context, request *UpdateTagRequest) (*UpdateTagResponse, error) {
	if service.next == nil {
		return &UpdateTagResponse{
			Tag: request.GetTag(),
		}, nil
	}
	return service.Next().UpdateTag(ctx, request)
}
func (service *BaseService) DeleteTag(ctx context.Context, request *DeleteTagRequest) (*DeleteTagResponse, error) {
	if service.next == nil {
		return &DeleteTagResponse{
			ID: request.ID,
		}, nil
	}
	return service.Next().DeleteTag(ctx, request)
}
func (service *BaseService) GetTag(ctx context.Context, request *GetTagRequest) (*GetTagResponse, error) {
	if service.next == nil {
		return nil, nil
	}
	return service.Next().GetTag(ctx, request)
}
func (service *BaseService) ListTag(ctx context.Context, request *ListTagRequest) (*ListTagResponse, error) {
	if service.next == nil {
		return nil, nil
	}
	return service.Next().ListTag(ctx, request)
}

func (service *BaseService) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	if service.next == nil {
		return &CreateTagTagRefResponse{
			ID:        request.ID,
			TagTagRef: request.GetTagTagRef(),
		}, nil
	}
	return service.Next().CreateTagTagRef(ctx, request)
}

func (service *BaseService) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	if service.next == nil {
		return &DeleteTagTagRefResponse{
			ID:        request.ID,
			TagTagRef: request.GetTagTagRef(),
		}, nil
	}
	return service.Next().DeleteTagTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	refField := models.TagFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTag(ctx, &GetTagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Tag
		obj.AddTagRef(request.TagTagRef)

		_, err = s.BaseService.UpdateTag(ctx, &UpdateTagRequest{
			Tag:       obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateTagTagRefResponse{
		ID:        request.ID,
		TagTagRef: request.GetTagTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	refField := models.TagFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTag(ctx, &GetTagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Tag
		obj.RemoveTagRef(request.TagTagRef)

		_, err = s.BaseService.UpdateTag(ctx, &UpdateTagRequest{
			Tag:       obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteTagTagRefResponse{
		ID:        request.ID,
		TagTagRef: request.GetTagTagRef(),
	}, nil
}

func (service *EventProducerService) CreateTag(ctx context.Context, request *CreateTagRequest) (*CreateTagResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateTagRequest{
				CreateTagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return service.Next().CreateTag(ctx, request)
}
func (service *EventProducerService) UpdateTag(ctx context.Context, request *UpdateTagRequest) (*UpdateTagResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateTagRequest{
				UpdateTagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return service.Next().UpdateTag(ctx, request)
}
func (service *EventProducerService) DeleteTag(ctx context.Context, request *DeleteTagRequest) (*DeleteTagResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteTagRequest{
				DeleteTagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return service.Next().DeleteTag(ctx, request)
}

func (service *EventProducerService) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateTagTagRefRequest{
			CreateTagTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return service.Next().CreateTagTagRef(ctx, request)
}

func (service *EventProducerService) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	_, err := service.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteTagTagRefRequest{
			DeleteTagTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return service.Next().DeleteTagTagRef(ctx, request)
}

func (e *Event_CreateTagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagRequest
	model := request.Tag
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetTag(ctx,
			&GetTagRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			model := request.Tag
			response, err := service.UpdateTag(ctx, &UpdateTagRequest{
				Tag:       model,
				FieldMask: basemodels.MapToFieldMask(model.ToMap()),
			})
			if err != nil {
				return nil, err
			}
			return &Event{
				Request: &Event_UpdateTagRequest{
					UpdateTagRequest: &UpdateTagRequest{
						Tag: response.GetTag(),
					},
				},
			}, nil
		}
	}
	response, err := service.CreateTag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateTagRequest{
			CreateTagRequest: &CreateTagRequest{
				Tag: response.GetTag(),
			},
		},
	}, nil
}

func (e *Event_UpdateTagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateTagRequest
	response, err := service.UpdateTag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateTagRequest{
			UpdateTagRequest: &UpdateTagRequest{
				Tag: response.GetTag(),
			},
		},
	}, nil
}

func (e *Event_DeleteTagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagRequest
	_, err := service.DeleteTag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteTagRequest{
			DeleteTagRequest: &DeleteTagRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateTagTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagTagRefRequest
	if _, err := service.CreateTagTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateTagTagRefRequest{
		CreateTagTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteTagTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagTagRefRequest
	if _, err := service.DeleteTagTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteTagTagRefRequest{
		DeleteTagTagRefRequest: request,
	}}, nil
}

//Dump dumps all service data.
func Dump(ctx context.Context, service Service) (*EventList, error) {
	response := []*Event{}

	listSample, err := service.ListSample(ctx,
		&ListSampleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Sample objects")
	}
	for _, resource := range listSample.Samples {
		response = append(response, &Event{
			Request: &Event_CreateSampleRequest{
				CreateSampleRequest: &CreateSampleRequest{
					Sample: resource,
				}}})
	}

	listTag, err := service.ListTag(ctx,
		&ListTagRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Tag objects")
	}
	for _, resource := range listTag.Tags {
		response = append(response, &Event{
			Request: &Event_CreateTagRequest{
				CreateTagRequest: &CreateTagRequest{
					Tag: resource,
				}}})
	}

	return &EventList{
		Events: response,
	}, nil
}
