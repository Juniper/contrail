// Code generated by contrailschema tool from template vnc_api_notifier_service.tmpl; DO NOT EDIT.

package vncapi

import (
	"context"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"

	"github.com/Juniper/contrail/extension/pkg/services"
)

// CreateSample creates Sample in VNC API.
func (ns *NotifierService) CreateSample(
	ctx context.Context, request *services.CreateSampleRequest,
) (response *services.CreateSampleResponse, err error) {
	err = ns.inTransactionDoer.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			response, err = ns.BaseService.CreateSample(ctx, request)
			if err != nil {
				return err
			}

			if _, err := ns.client.CreateSample(ctx, &services.CreateSampleRequest{
				Sample: response.GetSample(),
			}); err != nil {
				return errors.Wrapf(err, "failed to create Sample with UUID %q in VNC API",
					response.GetSample().UUID)
			}

			ns.log.WithFields(log.Fields{
				"uuid": response.GetSample().UUID,
			}).Debug("Sample created in VNC API")

			return nil
		},
	)

	return response, err
}

// UpdateSample updates Sample in VNC API.
func (ns *NotifierService) UpdateSample(
	ctx context.Context, request *services.UpdateSampleRequest,
) (response *services.UpdateSampleResponse, err error) {
	err = ns.inTransactionDoer.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			response, err = ns.BaseService.UpdateSample(ctx, request)
			if err != nil {
				return err
			}

			if _, err := ns.client.UpdateSample(ctx, &services.UpdateSampleRequest{
				Sample: response.GetSample(),
			}); err != nil {
				return errors.Wrapf(err, "failed to update Sample with UUID %q in VNC API",
					response.GetSample().UUID)
			}

			ns.log.WithFields(log.Fields{
				"uuid": response.GetSample().UUID,
			}).Debug("Sample updated in VNC API")

			return nil
		},
	)

	return response, err
}

// DeleteSample deletes Sample in VNC API.
func (ns *NotifierService) DeleteSample(
	ctx context.Context, request *services.DeleteSampleRequest,
) (response *services.DeleteSampleResponse, err error) {
	err = ns.inTransactionDoer.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			response, err = ns.BaseService.DeleteSample(ctx, request)
			if err != nil {
				return err
			}

			if _, err := ns.client.DeleteSample(ctx, &services.DeleteSampleRequest{
				ID: response.ID,
			}); err != nil {
				return errors.Wrapf(err, "failed to delete Sample with UUID %q in VNC API", response.ID)
			}

			ns.log.WithFields(log.Fields{
				"uuid": response.ID,
			}).Debug("Sample deleted in VNC API")

			return nil
		},
	)

	return response, err
}

// CreateTag creates Tag in VNC API.
func (ns *NotifierService) CreateTag(
	ctx context.Context, request *services.CreateTagRequest,
) (response *services.CreateTagResponse, err error) {
	err = ns.inTransactionDoer.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			response, err = ns.BaseService.CreateTag(ctx, request)
			if err != nil {
				return err
			}

			if _, err := ns.client.CreateTag(ctx, &services.CreateTagRequest{
				Tag: response.GetTag(),
			}); err != nil {
				return errors.Wrapf(err, "failed to create Tag with UUID %q in VNC API",
					response.GetTag().UUID)
			}

			ns.log.WithFields(log.Fields{
				"uuid": response.GetTag().UUID,
			}).Debug("Tag created in VNC API")

			return nil
		},
	)

	return response, err
}

// UpdateTag updates Tag in VNC API.
func (ns *NotifierService) UpdateTag(
	ctx context.Context, request *services.UpdateTagRequest,
) (response *services.UpdateTagResponse, err error) {
	err = ns.inTransactionDoer.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			response, err = ns.BaseService.UpdateTag(ctx, request)
			if err != nil {
				return err
			}

			if _, err := ns.client.UpdateTag(ctx, &services.UpdateTagRequest{
				Tag: response.GetTag(),
			}); err != nil {
				return errors.Wrapf(err, "failed to update Tag with UUID %q in VNC API",
					response.GetTag().UUID)
			}

			ns.log.WithFields(log.Fields{
				"uuid": response.GetTag().UUID,
			}).Debug("Tag updated in VNC API")

			return nil
		},
	)

	return response, err
}

// DeleteTag deletes Tag in VNC API.
func (ns *NotifierService) DeleteTag(
	ctx context.Context, request *services.DeleteTagRequest,
) (response *services.DeleteTagResponse, err error) {
	err = ns.inTransactionDoer.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			response, err = ns.BaseService.DeleteTag(ctx, request)
			if err != nil {
				return err
			}

			if _, err := ns.client.DeleteTag(ctx, &services.DeleteTagRequest{
				ID: response.ID,
			}); err != nil {
				return errors.Wrapf(err, "failed to delete Tag with UUID %q in VNC API", response.ID)
			}

			ns.log.WithFields(log.Fields{
				"uuid": response.ID,
			}).Debug("Tag deleted in VNC API")

			return nil
		},
	)

	return response, err
}
