// Code generated by contrailschema tool from template etcdserviceif.tmpl; DO NOT EDIT.

package etcd

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"github.com/pkg/errors"

	"github.com/Juniper/contrail/extension/pkg/models"
	"github.com/Juniper/contrail/extension/pkg/services"
)

func (ns *NotifierService) handleRefWrapper(
	ctx context.Context, key string, obj proto.Message, handleRef func(),
) error {
	txn := GetTxn(ctx)
	oldData := txn.Get(key)
	if len(oldData) == 0 {
		return nil
	}

	sObj := models.NewSerializedObject(oldData, obj, ns.Codec)
	if err := sObj.Map(handleRef); err != nil {
		return err
	}

	txn.Put(key, sObj.GetData())
	return nil
}

func (ns *NotifierService) CreateSample(
	ctx context.Context, request *services.CreateSampleRequest,
) (*services.CreateSampleResponse, error) {
	response, err := ns.BaseService.CreateSample(ctx, request)
	if err != nil {
		return nil, err
	}

	o := response.GetSample()
	key := models.ResourceKey("sample", o.UUID)

	jsonStr, err := ns.Codec.Encode(o)
	if err != nil {
		return nil, errors.New("error encoding create data")
	}

	err = ns.Client.Put(ctx, key, jsonStr)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to create Sample with UUID %q in etcd", o.UUID)
	}

	ns.log.WithField("uuid", o.UUID).Debug("Created Sample in etcd")
	return response, nil
}

func (ns *NotifierService) UpdateSample(
	ctx context.Context, request *services.UpdateSampleRequest,
) (*services.UpdateSampleResponse, error) {
	response, err := ns.BaseService.UpdateSample(ctx, request)
	if err != nil {
		return nil, err
	}

	o := response.GetSample()
	key := models.ResourceKey("sample", o.UUID)

	ns.log.WithField("uuid", o.UUID).Debug("Updating Sample in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		txn := GetTxn(ctx)
		oldData := txn.Get(key)
		newData, err := models.UpdateData(ns.Codec, oldData, o, request.GetFieldMask())
		if err != nil {
			return errors.Wrap(err, "error processing update data for etcd")
		}
		txn.Put(key, newData)
		return nil
	})
}

func (ns *NotifierService) DeleteSample(
	ctx context.Context, request *services.DeleteSampleRequest,
) (*services.DeleteSampleResponse, error) {
	response, err := ns.BaseService.DeleteSample(ctx, request)
	if err != nil {
		return nil, err
	}

	err = ns.Client.Delete(ctx, models.ResourceKey("sample", response.GetID()))
	if err != nil {
		return nil, errors.Wrapf(err, "failed to delete Sample with UUID %q in etcd", response.GetID())
	}

	ns.log.WithField("uuid", response.GetID()).Debug("Deleted Sample in etcd")
	return response, nil
}

func (ns *NotifierService) CreateSampleTagRef(
	ctx context.Context, request *services.CreateSampleTagRefRequest,
) (*services.CreateSampleTagRefResponse, error) {
	response, err := ns.BaseService.CreateSampleTagRef(ctx, request)
	if err != nil {
		return nil, err
	}

	ref := response.GetSampleTagRef()
	fromKey := models.ResourceKey("sample", response.ID)
	toKey := models.ResourceKey("tag", ref.UUID)

	ns.log.WithField("from-key", fromKey).WithField("to-key", toKey).Debug("Creating SampleTagRef in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		newFrom, newTo := &models.Sample{}, &models.Tag{}
		err := ns.handleRefWrapper(ctx, fromKey, newFrom, func() {
			newFrom.AddTagRef(ref)
		})
		if err != nil {
			return err
		}

		return ns.handleRefWrapper(ctx, toKey, newTo, func() {
			newTo.AddSampleBackref(&models.Sample{UUID: response.ID})
		})
	})
}

func (ns *NotifierService) DeleteSampleTagRef(
	ctx context.Context, request *services.DeleteSampleTagRefRequest,
) (*services.DeleteSampleTagRefResponse, error) {
	response, err := ns.BaseService.DeleteSampleTagRef(ctx, request)
	if err != nil {
		return nil, err
	}

	ref := response.GetSampleTagRef()
	fromKey := models.ResourceKey("sample", response.ID)
	toKey := models.ResourceKey("tag", ref.UUID)

	ns.log.WithField("from-key", fromKey).WithField("to-key", toKey).Debug("Deleting SampleTagRef in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		newFrom, newTo := &models.Sample{}, &models.Tag{}
		err := ns.handleRefWrapper(ctx, fromKey, newFrom, func() {
			newFrom.RemoveTagRef(ref)
		})
		if err != nil {
			return err
		}

		return ns.handleRefWrapper(ctx, toKey, newTo, func() {
			newTo.RemoveSampleBackref(&models.Sample{UUID: response.ID})
		})
	})
}

func (ns *NotifierService) CreateTag(
	ctx context.Context, request *services.CreateTagRequest,
) (*services.CreateTagResponse, error) {
	response, err := ns.BaseService.CreateTag(ctx, request)
	if err != nil {
		return nil, err
	}

	o := response.GetTag()
	key := models.ResourceKey("tag", o.UUID)

	jsonStr, err := ns.Codec.Encode(o)
	if err != nil {
		return nil, errors.New("error encoding create data")
	}

	err = ns.Client.Put(ctx, key, jsonStr)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to create Tag with UUID %q in etcd", o.UUID)
	}

	ns.log.WithField("uuid", o.UUID).Debug("Created Tag in etcd")
	return response, nil
}

func (ns *NotifierService) UpdateTag(
	ctx context.Context, request *services.UpdateTagRequest,
) (*services.UpdateTagResponse, error) {
	response, err := ns.BaseService.UpdateTag(ctx, request)
	if err != nil {
		return nil, err
	}

	o := response.GetTag()
	key := models.ResourceKey("tag", o.UUID)

	ns.log.WithField("uuid", o.UUID).Debug("Updating Tag in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		txn := GetTxn(ctx)
		oldData := txn.Get(key)
		newData, err := models.UpdateData(ns.Codec, oldData, o, request.GetFieldMask())
		if err != nil {
			return errors.Wrap(err, "error processing update data for etcd")
		}
		txn.Put(key, newData)
		return nil
	})
}

func (ns *NotifierService) DeleteTag(
	ctx context.Context, request *services.DeleteTagRequest,
) (*services.DeleteTagResponse, error) {
	response, err := ns.BaseService.DeleteTag(ctx, request)
	if err != nil {
		return nil, err
	}

	err = ns.Client.Delete(ctx, models.ResourceKey("tag", response.GetID()))
	if err != nil {
		return nil, errors.Wrapf(err, "failed to delete Tag with UUID %q in etcd", response.GetID())
	}

	ns.log.WithField("uuid", response.GetID()).Debug("Deleted Tag in etcd")
	return response, nil
}

func (ns *NotifierService) CreateTagTagRef(
	ctx context.Context, request *services.CreateTagTagRefRequest,
) (*services.CreateTagTagRefResponse, error) {
	response, err := ns.BaseService.CreateTagTagRef(ctx, request)
	if err != nil {
		return nil, err
	}

	ref := response.GetTagTagRef()
	fromKey := models.ResourceKey("tag", response.ID)
	toKey := models.ResourceKey("tag", ref.UUID)

	ns.log.WithField("from-key", fromKey).WithField("to-key", toKey).Debug("Creating TagTagRef in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		newFrom, newTo := &models.Tag{}, &models.Tag{}
		err := ns.handleRefWrapper(ctx, fromKey, newFrom, func() {
			newFrom.AddTagRef(ref)
		})
		if err != nil {
			return err
		}

		return ns.handleRefWrapper(ctx, toKey, newTo, func() {
			newTo.AddTagBackref(&models.Tag{UUID: response.ID})
		})
	})
}

func (ns *NotifierService) DeleteTagTagRef(
	ctx context.Context, request *services.DeleteTagTagRefRequest,
) (*services.DeleteTagTagRefResponse, error) {
	response, err := ns.BaseService.DeleteTagTagRef(ctx, request)
	if err != nil {
		return nil, err
	}

	ref := response.GetTagTagRef()
	fromKey := models.ResourceKey("tag", response.ID)
	toKey := models.ResourceKey("tag", ref.UUID)

	ns.log.WithField("from-key", fromKey).WithField("to-key", toKey).Debug("Deleting TagTagRef in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		newFrom, newTo := &models.Tag{}, &models.Tag{}
		err := ns.handleRefWrapper(ctx, fromKey, newFrom, func() {
			newFrom.RemoveTagRef(ref)
		})
		if err != nil {
			return err
		}

		return ns.handleRefWrapper(ctx, toKey, newTo, func() {
			newTo.RemoveTagBackref(&models.Tag{UUID: response.ID})
		})
	})
}
