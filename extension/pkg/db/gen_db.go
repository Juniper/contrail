// Code generated by contrailschema tool from template db.tmpl; DO NOT EDIT.

package db

import (
	"context"
	"encoding/json"

	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"

	"github.com/Juniper/contrail/extension/pkg/models"
	"github.com/Juniper/contrail/extension/pkg/services"
	"github.com/Juniper/contrail/pkg/auth"
	"github.com/Juniper/contrail/pkg/db/basedb"
	"github.com/Juniper/contrail/pkg/errutil"
	"github.com/Juniper/contrail/pkg/format"
	"github.com/Juniper/contrail/pkg/models/basemodels"
	"github.com/Juniper/contrail/pkg/schema"
	"github.com/Juniper/contrail/pkg/services/baseservices"
)

//This is needed to prevent an import error.
var _ = schema.Version

// SampleFields is db columns for Sample
var SampleFields = []string{
	"uuid",
	"share",
	"owner_access",
	"owner",
	"global_access",
	"parent_uuid",
	"parent_type",
	"name",
	"layout_config",
	"uuid_mslong",
	"uuid_lslong",
	"user_visible",
	"permissions_owner_access",
	"permissions_owner",
	"other_access",
	"group_access",
	"group",
	"last_modified",
	"enable",
	"description",
	"creator",
	"created",
	"fq_name",
	"display_name",
	"content_config",
	"container_config",
	"configuration_version",
	"key_value_pair",
}

// SampleRefFields is db reference fields for Sample
var SampleRefFields = map[string][]string{

	"tag": []string{},
}

// SampleChildFields is db child fields for Sample
var SampleChildFields = map[string][]string{}

// SampleBackRefFields is db back reference fields for Sample
var SampleBackRefFields = map[string][]string{}

// SampleParentTypes is possible parents for Sample
var SampleParents = []string{}

func (db *Service) createSampleReference(
	ctx context.Context,
	request *services.CreateSampleRequest) error {

	for _, ref := range request.Sample.TagRefs {
		if err := db.createSampleTagRef(ctx, request.Sample.UUID, ref); err != nil {
			return err
		}
	}

	return nil
}

func (db *Service) createSampleTagRef(
	ctx context.Context,
	fromID string,
	ref *models.SampleTagRef,
) error {
	qb := db.QueryBuilders["sample"]
	tx := basedb.GetTransaction(ctx)

	_, err := tx.ExecContext(
		ctx,
		qb.CreateRefQuery("tag"),
		fromID,
		ref.UUID,
	)
	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrapf(err, "TagRef create failed for object Sample with UUID: '%v' and ref UUID '%v': ", fromID, ref.UUID)
	}
	return nil
}

func (db *Service) deleteSampleTagRef(
	ctx context.Context,
	fromID string,
	ref *models.SampleTagRef,
) error {
	qb := db.QueryBuilders["sample"]
	tx := basedb.GetTransaction(ctx)

	_, err := tx.ExecContext(ctx, qb.DeleteRefQuery("tag"), fromID, ref.UUID)
	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrapf(err, "TagRef create failed for object Sample with UUID: '%v' and ref UUID '%v': ", fromID, ref.UUID)
	}
	return nil
}

func (db *Service) createSampleParentReference(
	ctx context.Context,
	request *services.CreateSampleRequest) (err error) {

	return nil

}

// createSample inserts Sample to DB
func (db *Service) createSample(
	ctx context.Context,
	request *services.CreateSampleRequest) error {
	qb := db.QueryBuilders["sample"]
	tx := basedb.GetTransaction(ctx)
	model := request.Sample
	_, err := tx.ExecContext(ctx, qb.CreateQuery(), string(model.GetUUID()),
		format.MustJSON(model.GetPerms2().GetShare()),
		int(model.GetPerms2().GetOwnerAccess()),
		string(model.GetPerms2().GetOwner()),
		int(model.GetPerms2().GetGlobalAccess()),
		string(model.GetParentUUID()),
		string(model.GetParentType()),
		string(model.GetName()),
		string(model.GetLayoutConfig()),
		uint(model.GetIDPerms().GetUUID().GetUUIDMslong()),
		uint(model.GetIDPerms().GetUUID().GetUUIDLslong()),
		bool(model.GetIDPerms().GetUserVisible()),
		int(model.GetIDPerms().GetPermissions().GetOwnerAccess()),
		string(model.GetIDPerms().GetPermissions().GetOwner()),
		int(model.GetIDPerms().GetPermissions().GetOtherAccess()),
		int(model.GetIDPerms().GetPermissions().GetGroupAccess()),
		string(model.GetIDPerms().GetPermissions().GetGroup()),
		string(model.GetIDPerms().GetLastModified()),
		bool(model.GetIDPerms().GetEnable()),
		string(model.GetIDPerms().GetDescription()),
		string(model.GetIDPerms().GetCreator()),
		string(model.GetIDPerms().GetCreated()),
		format.MustJSON(model.GetFQName()),
		string(model.GetDisplayName()),
		string(model.GetContentConfig()),
		string(model.GetContainerConfig()),
		int(model.GetConfigurationVersion()),
		format.MustJSON(model.GetAnnotations().GetKeyValuePair()))
	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrap(err, "creating Sample failed")
	}

	err = db.createSampleReference(ctx, request)
	if err != nil {
		return errors.Wrap(err, "creating references for Sample failed")
	}

	err = db.createSampleParentReference(ctx, request)
	if err != nil {
		return errors.Wrap(err, "creating parent reference for Sample failed")
	}

	metaData := &basemodels.Metadata{
		UUID:   model.UUID,
		Type:   "sample",
		FQName: model.FQName,
	}
	err = db.CreateMetadata(ctx, metaData)
	if err != nil {
		return errors.Wrap(err, "creating meta-data for Sample failed")
	}
	for _, share := range model.GetPerms2().GetShare() {
		err = db.CreateSharing(tx, "sample", model.UUID, share)
		if err != nil {
			return errors.Wrap(err, "creating share perms2 for Sample failed")
		}
	}
	return nil
}

func (db *Service) scanSample(
	values map[string]interface{},
) (
	*models.Sample, *types.FieldMask, error,
) {
	m := models.MakeSample()
	var paths []string

	if value, ok := values["uuid"]; ok {
		paths = append(paths, "uuid")

		m.UUID = format.InterfaceToString(value)
	}
	if value, ok := values["share"]; ok {
		paths = append(paths, "perms2.share")
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m.Perms2.Share)
		} else {

			m.Perms2.Share = models.InterfaceToShareTypeSlice(value)

		}
	}
	if value, ok := values["owner_access"]; ok {
		paths = append(paths, "perms2.owner_access")

		m.Perms2.OwnerAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["owner"]; ok {
		paths = append(paths, "perms2.owner")

		m.Perms2.Owner = format.InterfaceToString(value)
	}
	if value, ok := values["global_access"]; ok {
		paths = append(paths, "perms2.global_access")

		m.Perms2.GlobalAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["parent_uuid"]; ok {
		paths = append(paths, "parent_uuid")

		m.ParentUUID = format.InterfaceToString(value)
	}
	if value, ok := values["parent_type"]; ok {
		paths = append(paths, "parent_type")

		m.ParentType = format.InterfaceToString(value)
	}
	if value, ok := values["name"]; ok {
		paths = append(paths, "name")

		m.Name = format.InterfaceToString(value)
	}
	if value, ok := values["layout_config"]; ok {
		paths = append(paths, "layout_config")

		m.LayoutConfig = format.InterfaceToString(value)
	}
	if value, ok := values["uuid_mslong"]; ok {
		paths = append(paths, "id_perms.uuid.uuid_mslong")

		m.IDPerms.UUID.UUIDMslong = format.InterfaceToUint64(value)
	}
	if value, ok := values["uuid_lslong"]; ok {
		paths = append(paths, "id_perms.uuid.uuid_lslong")

		m.IDPerms.UUID.UUIDLslong = format.InterfaceToUint64(value)
	}
	if value, ok := values["user_visible"]; ok {
		paths = append(paths, "id_perms.user_visible")

		m.IDPerms.UserVisible = format.InterfaceToBool(value)
	}
	if value, ok := values["permissions_owner_access"]; ok {
		paths = append(paths, "id_perms.permissions.owner_access")

		m.IDPerms.Permissions.OwnerAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["permissions_owner"]; ok {
		paths = append(paths, "id_perms.permissions.owner")

		m.IDPerms.Permissions.Owner = format.InterfaceToString(value)
	}
	if value, ok := values["other_access"]; ok {
		paths = append(paths, "id_perms.permissions.other_access")

		m.IDPerms.Permissions.OtherAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["group_access"]; ok {
		paths = append(paths, "id_perms.permissions.group_access")

		m.IDPerms.Permissions.GroupAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["group"]; ok {
		paths = append(paths, "id_perms.permissions.group")

		m.IDPerms.Permissions.Group = format.InterfaceToString(value)
	}
	if value, ok := values["last_modified"]; ok {
		paths = append(paths, "id_perms.last_modified")

		m.IDPerms.LastModified = format.InterfaceToString(value)
	}
	if value, ok := values["enable"]; ok {
		paths = append(paths, "id_perms.enable")

		m.IDPerms.Enable = format.InterfaceToBool(value)
	}
	if value, ok := values["description"]; ok {
		paths = append(paths, "id_perms.description")

		m.IDPerms.Description = format.InterfaceToString(value)
	}
	if value, ok := values["creator"]; ok {
		paths = append(paths, "id_perms.creator")

		m.IDPerms.Creator = format.InterfaceToString(value)
	}
	if value, ok := values["created"]; ok {
		paths = append(paths, "id_perms.created")

		m.IDPerms.Created = format.InterfaceToString(value)
	}
	if value, ok := values["fq_name"]; ok {
		paths = append(paths, "fq_name")
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m.FQName)
		} else {

			m.FQName = format.InterfaceToStringList(value)

		}
	}
	if value, ok := values["display_name"]; ok {
		paths = append(paths, "display_name")

		m.DisplayName = format.InterfaceToString(value)
	}
	if value, ok := values["content_config"]; ok {
		paths = append(paths, "content_config")

		m.ContentConfig = format.InterfaceToString(value)
	}
	if value, ok := values["container_config"]; ok {
		paths = append(paths, "container_config")

		m.ContainerConfig = format.InterfaceToString(value)
	}
	if value, ok := values["configuration_version"]; ok {
		paths = append(paths, "configuration_version")

		m.ConfigurationVersion = format.InterfaceToInt64(value)
	}
	if value, ok := values["key_value_pair"]; ok {
		paths = append(paths, "annotations.key_value_pair")
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m.Annotations.KeyValuePair)
		} else {

			m.Annotations.KeyValuePair = models.InterfaceToKeyValuePairSlice(value)

		}
	}
	qb := db.QueryBuilders["sample"]

	if value, ok := values["ref_tag"]; ok {
		paths = append(paths, "tag_refs")
		references := qb.ScanResourceList(value)
		for _, reference := range references {
			referenceMap, ok := reference.(map[string]interface{})
			if !ok {
				continue
			}
			uuid := format.InterfaceToString(referenceMap["to"])
			if uuid == "" {
				continue
			}
			fqNameStr := format.InterfaceToString(referenceMap["fq_name"])
			fqName, err := basedb.ParseFQName(fqNameStr)
			if err != nil {
				return nil, nil, err
			}

			referenceModel := &models.SampleTagRef{}
			referenceModel.UUID = uuid
			referenceModel.To = fqName
			m.TagRefs = append(m.TagRefs, referenceModel)

		}
	}

	return m, &types.FieldMask{Paths: paths}, nil
}

// listSample lists Sample with list spec.
func (db *Service) listSample(ctx context.Context, request *services.ListSampleRequest) (response *services.ListSampleResponse, err error) {
	qb := db.QueryBuilders["sample"]
	query, columns, values := qb.ListQuery(auth.GetAuthCTX(ctx), request.Spec)

	tx := basedb.GetTransaction(ctx)
	rows, err := tx.QueryContext(ctx, query, values...)
	if err != nil {
		err = basedb.FormatDBError(err)
		return nil, errors.Wrap(err, "select query failed")
	}

	defer rows.Close()

	if err := rows.Err(); err != nil {
		return nil, errors.Wrap(basedb.FormatDBError(err), "row error")
	}

	result := []*models.Sample{}
	for rows.Next() {
		valuesMap := map[string]interface{}{}
		values := make([]interface{}, len(columns))
		valuesPointers := make([]interface{}, len(columns))
		for _, index := range columns {
			valuesPointers[index] = &values[index]
		}
		if err := rows.Scan(valuesPointers...); err != nil {
			return nil, errors.Wrap(err, "scan failed")
		}
		for column, index := range columns {
			val := valuesPointers[index].(*interface{})
			valuesMap[column] = *val
		}
		m, _, err := db.scanSample(valuesMap)
		if err != nil {
			return nil, errors.Wrap(err, "scan row failed")
		}
		result = append(result, m)
	}

	response = &services.ListSampleResponse{
		Samples:     result,
		SampleCount: int64(len(result)),
	}

	return response, nil
}

// count Sample counts Samples using the givne list spec.
func (db *Service) countSample(ctx context.Context, request *services.ListSampleRequest) (response *services.ListSampleResponse, err error) {
	qb := db.QueryBuilders["sample"]
	query, values := qb.CountQuery(auth.GetAuthCTX(ctx), request.Spec)

	tx := basedb.GetTransaction(ctx)
	row := tx.QueryRowContext(ctx, query, values...)

	var count int64
	if err = row.Scan(&count); err != nil {
		return nil, errors.Wrap(basedb.FormatDBError(err), "count query failed")
	}

	response = &services.ListSampleResponse{
		SampleCount: count,
	}

	return response, nil
}

// UpdateSample updates a resource
func (db *Service) updateSample(
	ctx context.Context,
	request *services.UpdateSampleRequest,
) error {
	tx := basedb.GetTransaction(ctx)
	qb := db.QueryBuilders["sample"]
	model := request.Sample

	err := db.CheckSamplePolicy(ctx, model.UUID)
	if err != nil {
		return err
	}

	var paths []string
	for _, path := range request.FieldMask.Paths {
		childPaths := SampleStructure.GetInnerPaths(path)
		if len(childPaths) == 0 {
			paths = append(paths, path)
		} else {
			paths = append(paths, childPaths...)
		}
	}

	columns := []string{}
	values := []interface{}{}
	for _, updatedPath := range paths {
		switch updatedPath {

		case "uuid":
			columns = append(columns, "uuid")
			values = append(values, string(model.GetUUID()))

		case "perms2.share":
			columns = append(columns, "share")
			values = append(values, format.MustJSON(model.GetPerms2().GetShare()))

		case "perms2.owner_access":
			columns = append(columns, "owner_access")
			values = append(values, int(model.GetPerms2().GetOwnerAccess()))

		case "perms2.owner":
			columns = append(columns, "owner")
			values = append(values, string(model.GetPerms2().GetOwner()))

		case "perms2.global_access":
			columns = append(columns, "global_access")
			values = append(values, int(model.GetPerms2().GetGlobalAccess()))

		case "parent_uuid":
			columns = append(columns, "parent_uuid")
			values = append(values, string(model.GetParentUUID()))

		case "parent_type":
			columns = append(columns, "parent_type")
			values = append(values, string(model.GetParentType()))

		case "name":
			columns = append(columns, "name")
			values = append(values, string(model.GetName()))

		case "layout_config":
			columns = append(columns, "layout_config")
			values = append(values, string(model.GetLayoutConfig()))

		case "id_perms.uuid.uuid_mslong":
			columns = append(columns, "uuid_mslong")
			values = append(values, uint(model.GetIDPerms().GetUUID().GetUUIDMslong()))

		case "id_perms.uuid.uuid_lslong":
			columns = append(columns, "uuid_lslong")
			values = append(values, uint(model.GetIDPerms().GetUUID().GetUUIDLslong()))

		case "id_perms.user_visible":
			columns = append(columns, "user_visible")
			values = append(values, bool(model.GetIDPerms().GetUserVisible()))

		case "id_perms.permissions.owner_access":
			columns = append(columns, "permissions_owner_access")
			values = append(values, int(model.GetIDPerms().GetPermissions().GetOwnerAccess()))

		case "id_perms.permissions.owner":
			columns = append(columns, "permissions_owner")
			values = append(values, string(model.GetIDPerms().GetPermissions().GetOwner()))

		case "id_perms.permissions.other_access":
			columns = append(columns, "other_access")
			values = append(values, int(model.GetIDPerms().GetPermissions().GetOtherAccess()))

		case "id_perms.permissions.group_access":
			columns = append(columns, "group_access")
			values = append(values, int(model.GetIDPerms().GetPermissions().GetGroupAccess()))

		case "id_perms.permissions.group":
			columns = append(columns, "group")
			values = append(values, string(model.GetIDPerms().GetPermissions().GetGroup()))

		case "id_perms.last_modified":
			columns = append(columns, "last_modified")
			values = append(values, string(model.GetIDPerms().GetLastModified()))

		case "id_perms.enable":
			columns = append(columns, "enable")
			values = append(values, bool(model.GetIDPerms().GetEnable()))

		case "id_perms.description":
			columns = append(columns, "description")
			values = append(values, string(model.GetIDPerms().GetDescription()))

		case "id_perms.creator":
			columns = append(columns, "creator")
			values = append(values, string(model.GetIDPerms().GetCreator()))

		case "id_perms.created":
			columns = append(columns, "created")
			values = append(values, string(model.GetIDPerms().GetCreated()))

		case "fq_name":
			columns = append(columns, "fq_name")
			values = append(values, format.MustJSON(model.GetFQName()))

		case "display_name":
			columns = append(columns, "display_name")
			values = append(values, string(model.GetDisplayName()))

		case "content_config":
			columns = append(columns, "content_config")
			values = append(values, string(model.GetContentConfig()))

		case "container_config":
			columns = append(columns, "container_config")
			values = append(values, string(model.GetContainerConfig()))

		case "configuration_version":
			columns = append(columns, "configuration_version")
			values = append(values, int(model.GetConfigurationVersion()))

		case "annotations.key_value_pair":
			columns = append(columns, "key_value_pair")
			values = append(values, format.MustJSON(model.GetAnnotations().GetKeyValuePair()))

		case "tag_refs":
			_, err = tx.ExecContext(ctx, qb.DeleteRefsQuery("tag"), model.UUID)
			if err != nil {
				err = basedb.FormatDBError(err)
				return errors.Wrapf(err, "TagRefs update failed for object Sample with UUID: '%v': ", request.Sample.GetUUID())
			}
			for _, ref := range model.TagRefs {

				_, err = tx.ExecContext(ctx, qb.CreateRefQuery("tag"), model.UUID, ref.UUID)
				if err != nil {
					err = basedb.FormatDBError(err)
					return errors.Wrapf(err, "TagRefs create failed for object Sample with UUID: '%v': ", request.Sample.GetUUID())
				}
			}

		}
	}
	values = append(values, model.UUID)
	if len(columns) == 0 {
		return nil
	}
	_, err = tx.ExecContext(ctx, qb.UpdateQuery(columns), values...)
	return basedb.FormatDBError(err)
}

//CheckSamplePolicy check ownership of resources.
func (db *Service) CheckSamplePolicy(
	ctx context.Context,
	uuid string) error {
	qb := db.QueryBuilders["sample"]

	var err error
	var count int

	tx := basedb.GetTransaction(ctx)
	auth := auth.GetAuthCTX(ctx)

	selectQuery := qb.SelectAuthQuery(auth.IsAdmin())
	if auth.IsAdmin() {
		row := tx.QueryRowContext(ctx, selectQuery, uuid)
		if err != nil {
			return basedb.FormatDBError(err)
		}
		row.Scan(&count)
		if count == 0 {
			return errutil.ErrorNotFound
		}
	} else {
		row := tx.QueryRowContext(ctx, selectQuery, uuid, auth.ProjectID())
		if err != nil {
			return basedb.FormatDBError(err)
		}
		row.Scan(&count)
		if count == 0 {
			return errutil.ErrorNotFound
		}
	}
	return nil
}

// DeleteSample deletes a resource
func (db *Service) deleteSample(
	ctx context.Context,
	request *services.DeleteSampleRequest) error {
	qb := db.QueryBuilders["sample"]

	deleteQuery := qb.DeleteQuery()
	err := db.CheckSamplePolicy(ctx, request.ID)
	if err != nil {
		return err
	}
	uuid := request.ID
	tx := basedb.GetTransaction(ctx)

	_, err = tx.ExecContext(ctx, deleteQuery, uuid)

	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrapf(err, "deleting resource Sample with UUID '%v' from DB failed", request.GetID())
	}

	err = db.DeleteMetadata(ctx, uuid)
	return err
}

//CreateSample handle a Create API
func (db *Service) CreateSample(
	ctx context.Context,
	request *services.CreateSampleRequest) (*services.CreateSampleResponse, error) {
	model := request.Sample
	if model == nil {
		return nil, errutil.ErrorBadRequest("update body is empty")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.createSample(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.CreateSampleResponse{
		Sample: request.Sample,
	}, nil
}

//UpdateSample handles a Update request.
func (db *Service) UpdateSample(
	ctx context.Context,
	request *services.UpdateSampleRequest) (*services.UpdateSampleResponse, error) {
	model := request.Sample
	if model == nil {
		return nil, errutil.ErrorBadRequest("update body is empty")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.updateSample(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.UpdateSampleResponse{
		Sample: model,
	}, nil
}

//DeleteSample delete a resource.
func (db *Service) DeleteSample(ctx context.Context, request *services.DeleteSampleRequest) (*services.DeleteSampleResponse, error) {
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.deleteSample(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.DeleteSampleResponse{
		ID: request.ID,
	}, nil
}

// CreateSampleTagRef handles ref create.
func (db *Service) CreateSampleTagRef(
	ctx context.Context,
	request *services.CreateSampleTagRefRequest) (*services.CreateSampleTagRefResponse, error) {
	ref := request.SampleTagRef
	if request.ID == "" {
		return nil, errutil.ErrorBadRequest("reference from ID is missing")
	}
	if ref == nil {
		return nil, errutil.ErrorBadRequest("reference data is missing")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.createSampleTagRef(ctx, request.ID, ref)
		}); err != nil {
		return nil, err
	}
	return &services.CreateSampleTagRefResponse{
		ID:           request.ID,
		SampleTagRef: request.SampleTagRef,
	}, nil
}

// DeleteSampleTagRef handles ref delete.
func (db *Service) DeleteSampleTagRef(
	ctx context.Context,
	request *services.DeleteSampleTagRefRequest) (*services.DeleteSampleTagRefResponse, error) {
	ref := request.SampleTagRef
	if request.ID == "" {
		return nil, errutil.ErrorBadRequest("reference from ID is missing")
	}
	if ref == nil {
		return nil, errutil.ErrorBadRequest("reference data is missing")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.deleteSampleTagRef(ctx, request.ID, ref)
		}); err != nil {
		return nil, err
	}
	return &services.DeleteSampleTagRefResponse{
		ID:           request.ID,
		SampleTagRef: request.SampleTagRef,
	}, nil
}

//GetSample a Get request.
func (db *Service) GetSample(ctx context.Context, request *services.GetSampleRequest) (response *services.GetSampleResponse, err error) {
	spec := &baseservices.ListSpec{
		Limit:  1,
		Detail: true,
		Fields: request.Fields,
		Filters: []*baseservices.Filter{
			&baseservices.Filter{
				Key:    "uuid",
				Values: []string{request.ID},
			},
		},
	}
	listRequest := &services.ListSampleRequest{
		Spec: spec,
	}
	var result *services.ListSampleResponse
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			result, err = db.listSample(ctx, listRequest)
			return err
		}); err != nil {
		return nil, errutil.ErrorInternal
	}
	if len(result.Samples) == 0 {
		return nil, errutil.ErrorNotFoundf("No sample: %s", request.ID)
	}
	response = &services.GetSampleResponse{
		Sample: result.Samples[0],
	}
	return response, nil
}

//ListSample handles a List service Request.
func (db *Service) ListSample(
	ctx context.Context,
	request *services.ListSampleRequest) (response *services.ListSampleResponse, err error) {
	spec := request.Spec
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			if spec.Count {
				response, err = db.countSample(ctx, request)
			} else {
				response, err = db.listSample(ctx, request)
			}

			return err
		}); err != nil {
		return nil, err
	}
	return response, nil
}

// TagFields is db columns for Tag
var TagFields = []string{
	"uuid",
	"tag_value",
	"share",
	"owner_access",
	"owner",
	"global_access",
	"parent_uuid",
	"parent_type",
	"name",
	"uuid_mslong",
	"uuid_lslong",
	"user_visible",
	"permissions_owner_access",
	"permissions_owner",
	"other_access",
	"group_access",
	"group",
	"last_modified",
	"enable",
	"description",
	"creator",
	"created",
	"fq_name",
	"display_name",
	"configuration_version",
	"key_value_pair",
}

// TagRefFields is db reference fields for Tag
var TagRefFields = map[string][]string{

	"tag": []string{},
}

// TagChildFields is db child fields for Tag
var TagChildFields = map[string][]string{}

// TagBackRefFields is db back reference fields for Tag
var TagBackRefFields = map[string][]string{

	"tag": []string{
		"uuid",
		"tag_value",
		"share",
		"owner_access",
		"owner",
		"global_access",
		"parent_uuid",
		"parent_type",
		"name",
		"uuid_mslong",
		"uuid_lslong",
		"user_visible",
		"permissions_owner_access",
		"permissions_owner",
		"other_access",
		"group_access",
		"group",
		"last_modified",
		"enable",
		"description",
		"creator",
		"created",
		"fq_name",
		"display_name",
		"configuration_version",
		"key_value_pair",
	},

	"sample": []string{
		"uuid",
		"share",
		"owner_access",
		"owner",
		"global_access",
		"parent_uuid",
		"parent_type",
		"name",
		"layout_config",
		"uuid_mslong",
		"uuid_lslong",
		"user_visible",
		"permissions_owner_access",
		"permissions_owner",
		"other_access",
		"group_access",
		"group",
		"last_modified",
		"enable",
		"description",
		"creator",
		"created",
		"fq_name",
		"display_name",
		"content_config",
		"container_config",
		"configuration_version",
		"key_value_pair",
	},
}

// TagParentTypes is possible parents for Tag
var TagParents = []string{}

func (db *Service) createTagReference(
	ctx context.Context,
	request *services.CreateTagRequest) error {

	for _, ref := range request.Tag.TagRefs {
		if err := db.createTagTagRef(ctx, request.Tag.UUID, ref); err != nil {
			return err
		}
	}

	return nil
}

func (db *Service) createTagTagRef(
	ctx context.Context,
	fromID string,
	ref *models.TagTagRef,
) error {
	qb := db.QueryBuilders["tag"]
	tx := basedb.GetTransaction(ctx)

	_, err := tx.ExecContext(
		ctx,
		qb.CreateRefQuery("tag"),
		fromID,
		ref.UUID,
	)
	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrapf(err, "TagRef create failed for object Tag with UUID: '%v' and ref UUID '%v': ", fromID, ref.UUID)
	}
	return nil
}

func (db *Service) deleteTagTagRef(
	ctx context.Context,
	fromID string,
	ref *models.TagTagRef,
) error {
	qb := db.QueryBuilders["tag"]
	tx := basedb.GetTransaction(ctx)

	_, err := tx.ExecContext(ctx, qb.DeleteRefQuery("tag"), fromID, ref.UUID)
	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrapf(err, "TagRef create failed for object Tag with UUID: '%v' and ref UUID '%v': ", fromID, ref.UUID)
	}
	return nil
}

func (db *Service) createTagParentReference(
	ctx context.Context,
	request *services.CreateTagRequest) (err error) {

	return nil

}

// createTag inserts Tag to DB
func (db *Service) createTag(
	ctx context.Context,
	request *services.CreateTagRequest) error {
	qb := db.QueryBuilders["tag"]
	tx := basedb.GetTransaction(ctx)
	model := request.Tag
	_, err := tx.ExecContext(ctx, qb.CreateQuery(), string(model.GetUUID()),
		string(model.GetTagValue()),
		format.MustJSON(model.GetPerms2().GetShare()),
		int(model.GetPerms2().GetOwnerAccess()),
		string(model.GetPerms2().GetOwner()),
		int(model.GetPerms2().GetGlobalAccess()),
		string(model.GetParentUUID()),
		string(model.GetParentType()),
		string(model.GetName()),
		uint(model.GetIDPerms().GetUUID().GetUUIDMslong()),
		uint(model.GetIDPerms().GetUUID().GetUUIDLslong()),
		bool(model.GetIDPerms().GetUserVisible()),
		int(model.GetIDPerms().GetPermissions().GetOwnerAccess()),
		string(model.GetIDPerms().GetPermissions().GetOwner()),
		int(model.GetIDPerms().GetPermissions().GetOtherAccess()),
		int(model.GetIDPerms().GetPermissions().GetGroupAccess()),
		string(model.GetIDPerms().GetPermissions().GetGroup()),
		string(model.GetIDPerms().GetLastModified()),
		bool(model.GetIDPerms().GetEnable()),
		string(model.GetIDPerms().GetDescription()),
		string(model.GetIDPerms().GetCreator()),
		string(model.GetIDPerms().GetCreated()),
		format.MustJSON(model.GetFQName()),
		string(model.GetDisplayName()),
		int(model.GetConfigurationVersion()),
		format.MustJSON(model.GetAnnotations().GetKeyValuePair()))
	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrap(err, "creating Tag failed")
	}

	err = db.createTagReference(ctx, request)
	if err != nil {
		return errors.Wrap(err, "creating references for Tag failed")
	}

	err = db.createTagParentReference(ctx, request)
	if err != nil {
		return errors.Wrap(err, "creating parent reference for Tag failed")
	}

	metaData := &basemodels.Metadata{
		UUID:   model.UUID,
		Type:   "tag",
		FQName: model.FQName,
	}
	err = db.CreateMetadata(ctx, metaData)
	if err != nil {
		return errors.Wrap(err, "creating meta-data for Tag failed")
	}
	for _, share := range model.GetPerms2().GetShare() {
		err = db.CreateSharing(tx, "tag", model.UUID, share)
		if err != nil {
			return errors.Wrap(err, "creating share perms2 for Tag failed")
		}
	}
	return nil
}

func (db *Service) scanTag(
	values map[string]interface{},
) (
	*models.Tag, *types.FieldMask, error,
) {
	m := models.MakeTag()
	var paths []string

	if value, ok := values["uuid"]; ok {
		paths = append(paths, "uuid")

		m.UUID = format.InterfaceToString(value)
	}
	if value, ok := values["tag_value"]; ok {
		paths = append(paths, "tag_value")

		m.TagValue = format.InterfaceToString(value)
	}
	if value, ok := values["share"]; ok {
		paths = append(paths, "perms2.share")
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m.Perms2.Share)
		} else {

			m.Perms2.Share = models.InterfaceToShareTypeSlice(value)

		}
	}
	if value, ok := values["owner_access"]; ok {
		paths = append(paths, "perms2.owner_access")

		m.Perms2.OwnerAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["owner"]; ok {
		paths = append(paths, "perms2.owner")

		m.Perms2.Owner = format.InterfaceToString(value)
	}
	if value, ok := values["global_access"]; ok {
		paths = append(paths, "perms2.global_access")

		m.Perms2.GlobalAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["parent_uuid"]; ok {
		paths = append(paths, "parent_uuid")

		m.ParentUUID = format.InterfaceToString(value)
	}
	if value, ok := values["parent_type"]; ok {
		paths = append(paths, "parent_type")

		m.ParentType = format.InterfaceToString(value)
	}
	if value, ok := values["name"]; ok {
		paths = append(paths, "name")

		m.Name = format.InterfaceToString(value)
	}
	if value, ok := values["uuid_mslong"]; ok {
		paths = append(paths, "id_perms.uuid.uuid_mslong")

		m.IDPerms.UUID.UUIDMslong = format.InterfaceToUint64(value)
	}
	if value, ok := values["uuid_lslong"]; ok {
		paths = append(paths, "id_perms.uuid.uuid_lslong")

		m.IDPerms.UUID.UUIDLslong = format.InterfaceToUint64(value)
	}
	if value, ok := values["user_visible"]; ok {
		paths = append(paths, "id_perms.user_visible")

		m.IDPerms.UserVisible = format.InterfaceToBool(value)
	}
	if value, ok := values["permissions_owner_access"]; ok {
		paths = append(paths, "id_perms.permissions.owner_access")

		m.IDPerms.Permissions.OwnerAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["permissions_owner"]; ok {
		paths = append(paths, "id_perms.permissions.owner")

		m.IDPerms.Permissions.Owner = format.InterfaceToString(value)
	}
	if value, ok := values["other_access"]; ok {
		paths = append(paths, "id_perms.permissions.other_access")

		m.IDPerms.Permissions.OtherAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["group_access"]; ok {
		paths = append(paths, "id_perms.permissions.group_access")

		m.IDPerms.Permissions.GroupAccess = format.InterfaceToInt64(value)
	}
	if value, ok := values["group"]; ok {
		paths = append(paths, "id_perms.permissions.group")

		m.IDPerms.Permissions.Group = format.InterfaceToString(value)
	}
	if value, ok := values["last_modified"]; ok {
		paths = append(paths, "id_perms.last_modified")

		m.IDPerms.LastModified = format.InterfaceToString(value)
	}
	if value, ok := values["enable"]; ok {
		paths = append(paths, "id_perms.enable")

		m.IDPerms.Enable = format.InterfaceToBool(value)
	}
	if value, ok := values["description"]; ok {
		paths = append(paths, "id_perms.description")

		m.IDPerms.Description = format.InterfaceToString(value)
	}
	if value, ok := values["creator"]; ok {
		paths = append(paths, "id_perms.creator")

		m.IDPerms.Creator = format.InterfaceToString(value)
	}
	if value, ok := values["created"]; ok {
		paths = append(paths, "id_perms.created")

		m.IDPerms.Created = format.InterfaceToString(value)
	}
	if value, ok := values["fq_name"]; ok {
		paths = append(paths, "fq_name")
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m.FQName)
		} else {

			m.FQName = format.InterfaceToStringList(value)

		}
	}
	if value, ok := values["display_name"]; ok {
		paths = append(paths, "display_name")

		m.DisplayName = format.InterfaceToString(value)
	}
	if value, ok := values["configuration_version"]; ok {
		paths = append(paths, "configuration_version")

		m.ConfigurationVersion = format.InterfaceToInt64(value)
	}
	if value, ok := values["key_value_pair"]; ok {
		paths = append(paths, "annotations.key_value_pair")
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m.Annotations.KeyValuePair)
		} else {

			m.Annotations.KeyValuePair = models.InterfaceToKeyValuePairSlice(value)

		}
	}
	qb := db.QueryBuilders["tag"]

	if value, ok := values["ref_tag"]; ok {
		paths = append(paths, "tag_refs")
		references := qb.ScanResourceList(value)
		for _, reference := range references {
			referenceMap, ok := reference.(map[string]interface{})
			if !ok {
				continue
			}
			uuid := format.InterfaceToString(referenceMap["to"])
			if uuid == "" {
				continue
			}
			fqNameStr := format.InterfaceToString(referenceMap["fq_name"])
			fqName, err := basedb.ParseFQName(fqNameStr)
			if err != nil {
				return nil, nil, err
			}

			referenceModel := &models.TagTagRef{}
			referenceModel.UUID = uuid
			referenceModel.To = fqName
			m.TagRefs = append(m.TagRefs, referenceModel)

		}
	}

	if value, ok := values[schema.BackRefColumnName("sample", "tag")]; ok {
		backrefResources := qb.ScanResourceList(value)
		for _, childResource := range backrefResources {
			backrefResourceMap, ok := childResource.(map[string]interface{})
			if !ok {
				continue
			}
			uuid := format.InterfaceToString(backrefResourceMap["uuid"])
			if uuid == "" {
				continue
			}
			backrefModel := models.MakeSample()
			m.SampleBackRefs = append(m.SampleBackRefs, backrefModel)

			if propertyValue, ok := backrefResourceMap["uuid"]; ok && propertyValue != nil {

				backrefModel.UUID = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["share"]; ok && propertyValue != nil {

				backrefModel.Perms2.Share = models.InterfaceToShareTypeSlice(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["owner_access"]; ok && propertyValue != nil {

				backrefModel.Perms2.OwnerAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["owner"]; ok && propertyValue != nil {

				backrefModel.Perms2.Owner = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["global_access"]; ok && propertyValue != nil {

				backrefModel.Perms2.GlobalAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["parent_uuid"]; ok && propertyValue != nil {

				backrefModel.ParentUUID = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["parent_type"]; ok && propertyValue != nil {

				backrefModel.ParentType = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["name"]; ok && propertyValue != nil {

				backrefModel.Name = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["layout_config"]; ok && propertyValue != nil {

				backrefModel.LayoutConfig = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["uuid_mslong"]; ok && propertyValue != nil {

				backrefModel.IDPerms.UUID.UUIDMslong = format.InterfaceToUint64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["uuid_lslong"]; ok && propertyValue != nil {

				backrefModel.IDPerms.UUID.UUIDLslong = format.InterfaceToUint64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["user_visible"]; ok && propertyValue != nil {

				backrefModel.IDPerms.UserVisible = format.InterfaceToBool(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["permissions_owner_access"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.OwnerAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["permissions_owner"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.Owner = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["other_access"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.OtherAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["group_access"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.GroupAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["group"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.Group = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["last_modified"]; ok && propertyValue != nil {

				backrefModel.IDPerms.LastModified = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["enable"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Enable = format.InterfaceToBool(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["description"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Description = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["creator"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Creator = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["created"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Created = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["fq_name"]; ok && propertyValue != nil {

				backrefModel.FQName = format.InterfaceToStringList(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["display_name"]; ok && propertyValue != nil {

				backrefModel.DisplayName = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["content_config"]; ok && propertyValue != nil {

				backrefModel.ContentConfig = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["container_config"]; ok && propertyValue != nil {

				backrefModel.ContainerConfig = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["configuration_version"]; ok && propertyValue != nil {

				backrefModel.ConfigurationVersion = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["key_value_pair"]; ok && propertyValue != nil {

				backrefModel.Annotations.KeyValuePair = models.InterfaceToKeyValuePairSlice(propertyValue)

			}

		}
	}

	if value, ok := values[schema.BackRefColumnName("tag", "tag")]; ok {
		backrefResources := qb.ScanResourceList(value)
		for _, childResource := range backrefResources {
			backrefResourceMap, ok := childResource.(map[string]interface{})
			if !ok {
				continue
			}
			uuid := format.InterfaceToString(backrefResourceMap["uuid"])
			if uuid == "" {
				continue
			}
			backrefModel := models.MakeTag()
			m.TagBackRefs = append(m.TagBackRefs, backrefModel)

			if propertyValue, ok := backrefResourceMap["uuid"]; ok && propertyValue != nil {

				backrefModel.UUID = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["tag_value"]; ok && propertyValue != nil {

				backrefModel.TagValue = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["share"]; ok && propertyValue != nil {

				backrefModel.Perms2.Share = models.InterfaceToShareTypeSlice(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["owner_access"]; ok && propertyValue != nil {

				backrefModel.Perms2.OwnerAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["owner"]; ok && propertyValue != nil {

				backrefModel.Perms2.Owner = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["global_access"]; ok && propertyValue != nil {

				backrefModel.Perms2.GlobalAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["parent_uuid"]; ok && propertyValue != nil {

				backrefModel.ParentUUID = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["parent_type"]; ok && propertyValue != nil {

				backrefModel.ParentType = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["name"]; ok && propertyValue != nil {

				backrefModel.Name = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["uuid_mslong"]; ok && propertyValue != nil {

				backrefModel.IDPerms.UUID.UUIDMslong = format.InterfaceToUint64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["uuid_lslong"]; ok && propertyValue != nil {

				backrefModel.IDPerms.UUID.UUIDLslong = format.InterfaceToUint64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["user_visible"]; ok && propertyValue != nil {

				backrefModel.IDPerms.UserVisible = format.InterfaceToBool(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["permissions_owner_access"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.OwnerAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["permissions_owner"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.Owner = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["other_access"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.OtherAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["group_access"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.GroupAccess = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["group"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Permissions.Group = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["last_modified"]; ok && propertyValue != nil {

				backrefModel.IDPerms.LastModified = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["enable"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Enable = format.InterfaceToBool(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["description"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Description = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["creator"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Creator = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["created"]; ok && propertyValue != nil {

				backrefModel.IDPerms.Created = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["fq_name"]; ok && propertyValue != nil {

				backrefModel.FQName = format.InterfaceToStringList(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["display_name"]; ok && propertyValue != nil {

				backrefModel.DisplayName = format.InterfaceToString(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["configuration_version"]; ok && propertyValue != nil {

				backrefModel.ConfigurationVersion = format.InterfaceToInt64(propertyValue)

			}

			if propertyValue, ok := backrefResourceMap["key_value_pair"]; ok && propertyValue != nil {

				backrefModel.Annotations.KeyValuePair = models.InterfaceToKeyValuePairSlice(propertyValue)

			}

		}
	}

	return m, &types.FieldMask{Paths: paths}, nil
}

// listTag lists Tag with list spec.
func (db *Service) listTag(ctx context.Context, request *services.ListTagRequest) (response *services.ListTagResponse, err error) {
	qb := db.QueryBuilders["tag"]
	query, columns, values := qb.ListQuery(auth.GetAuthCTX(ctx), request.Spec)

	tx := basedb.GetTransaction(ctx)
	rows, err := tx.QueryContext(ctx, query, values...)
	if err != nil {
		err = basedb.FormatDBError(err)
		return nil, errors.Wrap(err, "select query failed")
	}

	defer rows.Close()

	if err := rows.Err(); err != nil {
		return nil, errors.Wrap(basedb.FormatDBError(err), "row error")
	}

	result := []*models.Tag{}
	for rows.Next() {
		valuesMap := map[string]interface{}{}
		values := make([]interface{}, len(columns))
		valuesPointers := make([]interface{}, len(columns))
		for _, index := range columns {
			valuesPointers[index] = &values[index]
		}
		if err := rows.Scan(valuesPointers...); err != nil {
			return nil, errors.Wrap(err, "scan failed")
		}
		for column, index := range columns {
			val := valuesPointers[index].(*interface{})
			valuesMap[column] = *val
		}
		m, _, err := db.scanTag(valuesMap)
		if err != nil {
			return nil, errors.Wrap(err, "scan row failed")
		}
		result = append(result, m)
	}

	response = &services.ListTagResponse{
		Tags:     result,
		TagCount: int64(len(result)),
	}

	return response, nil
}

// count Tag counts Tags using the givne list spec.
func (db *Service) countTag(ctx context.Context, request *services.ListTagRequest) (response *services.ListTagResponse, err error) {
	qb := db.QueryBuilders["tag"]
	query, values := qb.CountQuery(auth.GetAuthCTX(ctx), request.Spec)

	tx := basedb.GetTransaction(ctx)
	row := tx.QueryRowContext(ctx, query, values...)

	var count int64
	if err = row.Scan(&count); err != nil {
		return nil, errors.Wrap(basedb.FormatDBError(err), "count query failed")
	}

	response = &services.ListTagResponse{
		TagCount: count,
	}

	return response, nil
}

// UpdateTag updates a resource
func (db *Service) updateTag(
	ctx context.Context,
	request *services.UpdateTagRequest,
) error {
	tx := basedb.GetTransaction(ctx)
	qb := db.QueryBuilders["tag"]
	model := request.Tag

	err := db.CheckTagPolicy(ctx, model.UUID)
	if err != nil {
		return err
	}

	var paths []string
	for _, path := range request.FieldMask.Paths {
		childPaths := TagStructure.GetInnerPaths(path)
		if len(childPaths) == 0 {
			paths = append(paths, path)
		} else {
			paths = append(paths, childPaths...)
		}
	}

	columns := []string{}
	values := []interface{}{}
	for _, updatedPath := range paths {
		switch updatedPath {

		case "uuid":
			columns = append(columns, "uuid")
			values = append(values, string(model.GetUUID()))

		case "tag_value":
			columns = append(columns, "tag_value")
			values = append(values, string(model.GetTagValue()))

		case "perms2.share":
			columns = append(columns, "share")
			values = append(values, format.MustJSON(model.GetPerms2().GetShare()))

		case "perms2.owner_access":
			columns = append(columns, "owner_access")
			values = append(values, int(model.GetPerms2().GetOwnerAccess()))

		case "perms2.owner":
			columns = append(columns, "owner")
			values = append(values, string(model.GetPerms2().GetOwner()))

		case "perms2.global_access":
			columns = append(columns, "global_access")
			values = append(values, int(model.GetPerms2().GetGlobalAccess()))

		case "parent_uuid":
			columns = append(columns, "parent_uuid")
			values = append(values, string(model.GetParentUUID()))

		case "parent_type":
			columns = append(columns, "parent_type")
			values = append(values, string(model.GetParentType()))

		case "name":
			columns = append(columns, "name")
			values = append(values, string(model.GetName()))

		case "id_perms.uuid.uuid_mslong":
			columns = append(columns, "uuid_mslong")
			values = append(values, uint(model.GetIDPerms().GetUUID().GetUUIDMslong()))

		case "id_perms.uuid.uuid_lslong":
			columns = append(columns, "uuid_lslong")
			values = append(values, uint(model.GetIDPerms().GetUUID().GetUUIDLslong()))

		case "id_perms.user_visible":
			columns = append(columns, "user_visible")
			values = append(values, bool(model.GetIDPerms().GetUserVisible()))

		case "id_perms.permissions.owner_access":
			columns = append(columns, "permissions_owner_access")
			values = append(values, int(model.GetIDPerms().GetPermissions().GetOwnerAccess()))

		case "id_perms.permissions.owner":
			columns = append(columns, "permissions_owner")
			values = append(values, string(model.GetIDPerms().GetPermissions().GetOwner()))

		case "id_perms.permissions.other_access":
			columns = append(columns, "other_access")
			values = append(values, int(model.GetIDPerms().GetPermissions().GetOtherAccess()))

		case "id_perms.permissions.group_access":
			columns = append(columns, "group_access")
			values = append(values, int(model.GetIDPerms().GetPermissions().GetGroupAccess()))

		case "id_perms.permissions.group":
			columns = append(columns, "group")
			values = append(values, string(model.GetIDPerms().GetPermissions().GetGroup()))

		case "id_perms.last_modified":
			columns = append(columns, "last_modified")
			values = append(values, string(model.GetIDPerms().GetLastModified()))

		case "id_perms.enable":
			columns = append(columns, "enable")
			values = append(values, bool(model.GetIDPerms().GetEnable()))

		case "id_perms.description":
			columns = append(columns, "description")
			values = append(values, string(model.GetIDPerms().GetDescription()))

		case "id_perms.creator":
			columns = append(columns, "creator")
			values = append(values, string(model.GetIDPerms().GetCreator()))

		case "id_perms.created":
			columns = append(columns, "created")
			values = append(values, string(model.GetIDPerms().GetCreated()))

		case "fq_name":
			columns = append(columns, "fq_name")
			values = append(values, format.MustJSON(model.GetFQName()))

		case "display_name":
			columns = append(columns, "display_name")
			values = append(values, string(model.GetDisplayName()))

		case "configuration_version":
			columns = append(columns, "configuration_version")
			values = append(values, int(model.GetConfigurationVersion()))

		case "annotations.key_value_pair":
			columns = append(columns, "key_value_pair")
			values = append(values, format.MustJSON(model.GetAnnotations().GetKeyValuePair()))

		case "tag_refs":
			_, err = tx.ExecContext(ctx, qb.DeleteRefsQuery("tag"), model.UUID)
			if err != nil {
				err = basedb.FormatDBError(err)
				return errors.Wrapf(err, "TagRefs update failed for object Tag with UUID: '%v': ", request.Tag.GetUUID())
			}
			for _, ref := range model.TagRefs {

				_, err = tx.ExecContext(ctx, qb.CreateRefQuery("tag"), model.UUID, ref.UUID)
				if err != nil {
					err = basedb.FormatDBError(err)
					return errors.Wrapf(err, "TagRefs create failed for object Tag with UUID: '%v': ", request.Tag.GetUUID())
				}
			}

		}
	}
	values = append(values, model.UUID)
	if len(columns) == 0 {
		return nil
	}
	_, err = tx.ExecContext(ctx, qb.UpdateQuery(columns), values...)
	return basedb.FormatDBError(err)
}

//CheckTagPolicy check ownership of resources.
func (db *Service) CheckTagPolicy(
	ctx context.Context,
	uuid string) error {
	qb := db.QueryBuilders["tag"]

	var err error
	var count int

	tx := basedb.GetTransaction(ctx)
	auth := auth.GetAuthCTX(ctx)

	selectQuery := qb.SelectAuthQuery(auth.IsAdmin())
	if auth.IsAdmin() {
		row := tx.QueryRowContext(ctx, selectQuery, uuid)
		if err != nil {
			return basedb.FormatDBError(err)
		}
		row.Scan(&count)
		if count == 0 {
			return errutil.ErrorNotFound
		}
	} else {
		row := tx.QueryRowContext(ctx, selectQuery, uuid, auth.ProjectID())
		if err != nil {
			return basedb.FormatDBError(err)
		}
		row.Scan(&count)
		if count == 0 {
			return errutil.ErrorNotFound
		}
	}
	return nil
}

// DeleteTag deletes a resource
func (db *Service) deleteTag(
	ctx context.Context,
	request *services.DeleteTagRequest) error {
	qb := db.QueryBuilders["tag"]

	deleteQuery := qb.DeleteQuery()
	err := db.CheckTagPolicy(ctx, request.ID)
	if err != nil {
		return err
	}
	uuid := request.ID
	tx := basedb.GetTransaction(ctx)

	_, err = tx.ExecContext(ctx, deleteQuery, uuid)

	if err != nil {
		err = basedb.FormatDBError(err)
		return errors.Wrapf(err, "deleting resource Tag with UUID '%v' from DB failed", request.GetID())
	}

	err = db.DeleteMetadata(ctx, uuid)
	return err
}

//CreateTag handle a Create API
func (db *Service) CreateTag(
	ctx context.Context,
	request *services.CreateTagRequest) (*services.CreateTagResponse, error) {
	model := request.Tag
	if model == nil {
		return nil, errutil.ErrorBadRequest("update body is empty")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.createTag(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.CreateTagResponse{
		Tag: request.Tag,
	}, nil
}

//UpdateTag handles a Update request.
func (db *Service) UpdateTag(
	ctx context.Context,
	request *services.UpdateTagRequest) (*services.UpdateTagResponse, error) {
	model := request.Tag
	if model == nil {
		return nil, errutil.ErrorBadRequest("update body is empty")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.updateTag(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.UpdateTagResponse{
		Tag: model,
	}, nil
}

//DeleteTag delete a resource.
func (db *Service) DeleteTag(ctx context.Context, request *services.DeleteTagRequest) (*services.DeleteTagResponse, error) {
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.deleteTag(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.DeleteTagResponse{
		ID: request.ID,
	}, nil
}

// CreateTagTagRef handles ref create.
func (db *Service) CreateTagTagRef(
	ctx context.Context,
	request *services.CreateTagTagRefRequest) (*services.CreateTagTagRefResponse, error) {
	ref := request.TagTagRef
	if request.ID == "" {
		return nil, errutil.ErrorBadRequest("reference from ID is missing")
	}
	if ref == nil {
		return nil, errutil.ErrorBadRequest("reference data is missing")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.createTagTagRef(ctx, request.ID, ref)
		}); err != nil {
		return nil, err
	}
	return &services.CreateTagTagRefResponse{
		ID:        request.ID,
		TagTagRef: request.TagTagRef,
	}, nil
}

// DeleteTagTagRef handles ref delete.
func (db *Service) DeleteTagTagRef(
	ctx context.Context,
	request *services.DeleteTagTagRefRequest) (*services.DeleteTagTagRefResponse, error) {
	ref := request.TagTagRef
	if request.ID == "" {
		return nil, errutil.ErrorBadRequest("reference from ID is missing")
	}
	if ref == nil {
		return nil, errutil.ErrorBadRequest("reference data is missing")
	}
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			return db.deleteTagTagRef(ctx, request.ID, ref)
		}); err != nil {
		return nil, err
	}
	return &services.DeleteTagTagRefResponse{
		ID:        request.ID,
		TagTagRef: request.TagTagRef,
	}, nil
}

//GetTag a Get request.
func (db *Service) GetTag(ctx context.Context, request *services.GetTagRequest) (response *services.GetTagResponse, err error) {
	spec := &baseservices.ListSpec{
		Limit:  1,
		Detail: true,
		Fields: request.Fields,
		Filters: []*baseservices.Filter{
			&baseservices.Filter{
				Key:    "uuid",
				Values: []string{request.ID},
			},
		},
	}
	listRequest := &services.ListTagRequest{
		Spec: spec,
	}
	var result *services.ListTagResponse
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			result, err = db.listTag(ctx, listRequest)
			return err
		}); err != nil {
		return nil, errutil.ErrorInternal
	}
	if len(result.Tags) == 0 {
		return nil, errutil.ErrorNotFoundf("No tag: %s", request.ID)
	}
	response = &services.GetTagResponse{
		Tag: result.Tags[0],
	}
	return response, nil
}

//ListTag handles a List service Request.
func (db *Service) ListTag(
	ctx context.Context,
	request *services.ListTagRequest) (response *services.ListTagResponse, err error) {
	spec := request.Spec
	if err := db.DoInTransaction(
		ctx,
		func(ctx context.Context) error {
			if spec.Count {
				response, err = db.countTag(ctx, request)
			} else {
				response, err = db.listTag(ctx, request)
			}

			return err
		}); err != nil {
		return nil, err
	}
	return response, nil
}
