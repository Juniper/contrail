// Code generated by contrailschema tool from template cachedb.tmpl; DO NOT EDIT.

package cache

import (
	"context"

	"github.com/Juniper/contrail/pkg/errutil"
	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/services"
)

func (cache *DB) GetSample(
	_ context.Context,
	request *services.GetSampleRequest,
) (*services.GetSampleResponse, error) {
	response := &services.GetSampleResponse{}
	resourceMap, ok := cache.resources["sample"]
	if !ok {
		return nil, errutil.ErrorNotFoundf("no Sample found with uuid: %s", request.ID)
	}
	node, ok := resourceMap[request.ID]
	if !ok {
		return nil, errutil.ErrorNotFoundf("no Sample found with uuid: %s", request.ID)
	}
	resource, ok := node.event.GetResource().(*models.Sample)
	if !ok {
		return nil, errutil.ErrorNotFoundf("failed to get Sample with uuid: %s", request.ID)
	}
	response.Sample = resource
	return response, nil
}

func (cache *DB) ListSample(
	context.Context,
	*services.ListSampleRequest,
) (*services.ListSampleResponse, error) {
	response := &services.ListSampleResponse{}
	resourceMap := cache.resources["sample"]

	for _, node := range resourceMap {
		resource, ok := node.event.GetResource().(*models.Sample)
		if ok {
			response.Samples = append(response.Samples, resource)
		}
	}
	response.SampleCount = int64(len(response.Samples))
	return response, nil
}

func (cache *DB) GetTag(
	_ context.Context,
	request *services.GetTagRequest,
) (*services.GetTagResponse, error) {
	response := &services.GetTagResponse{}
	resourceMap, ok := cache.resources["tag"]
	if !ok {
		return nil, errutil.ErrorNotFoundf("no Tag found with uuid: %s", request.ID)
	}
	node, ok := resourceMap[request.ID]
	if !ok {
		return nil, errutil.ErrorNotFoundf("no Tag found with uuid: %s", request.ID)
	}
	resource, ok := node.event.GetResource().(*models.Tag)
	if !ok {
		return nil, errutil.ErrorNotFoundf("failed to get Tag with uuid: %s", request.ID)
	}
	response.Tag = resource
	return response, nil
}

func (cache *DB) ListTag(
	context.Context,
	*services.ListTagRequest,
) (*services.ListTagResponse, error) {
	response := &services.ListTagResponse{}
	resourceMap := cache.resources["tag"]

	for _, node := range resourceMap {
		resource, ok := node.event.GetResource().(*models.Tag)
		if ok {
			response.Tags = append(response.Tags, resource)
		}
	}
	response.TagCount = int64(len(response.Tags))
	return response, nil
}
