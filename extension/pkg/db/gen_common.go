// Code generated by contrailschema tool from template db_common.tmpl; DO NOT EDIT.

package db

import (
	"context"
	"fmt"

	"github.com/gogo/protobuf/types"

	"github.com/Juniper/contrail/extension/pkg/services"
	"github.com/Juniper/contrail/pkg/db/basedb"
	"github.com/Juniper/contrail/pkg/services/baseservices"
)

func (db *Service) initQueryBuilders() {
	queryBuilders := map[string]*basedb.QueryBuilder{}
	db.QueryBuilders = queryBuilders

	queryBuilders["sample"] = basedb.NewQueryBuilder(db.Dialect,
		"sample",
		SampleFields,
		SampleRefFields,
		SampleChildFields,
		SampleBackRefFields)

	queryBuilders["tag"] = basedb.NewQueryBuilder(db.Dialect,
		"tag",
		TagFields,
		TagRefFields,
		TagChildFields,
		TagBackRefFields)

}

func (db *Service) dump(ctx context.Context, ow basedb.ObjectWriter) error {

	listSampleResponse, err := db.listSample(
		ctx,
		&services.ListSampleRequest{
			Spec: &baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return err
	}

	for _, item := range listSampleResponse.Samples {
		if err = ow.WriteObject("sample", item.GetUUID(), item); err != nil {
			return err
		}
	}

	listTagResponse, err := db.listTag(
		ctx,
		&services.ListTagRequest{
			Spec: &baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return err
	}

	for _, item := range listTagResponse.Tags {
		if err = ow.WriteObject("tag", item.GetUUID(), item); err != nil {
			return err
		}
	}

	return nil
}

// ScanRow maps row from database table named schemaID into generated Go struct.
func (db *Service) ScanRow(schemaID string, rowData map[string]interface{}) (basedb.Object, *types.FieldMask, error) {
	switch schemaID {
	case "sample":
		return db.scanSample(rowData)
	case "ref_sample_tag":
		return nil, nil, nil
	case "tag":
		return db.scanTag(rowData)
	case "ref_tag_tag":
		return nil, nil, nil
	}

	return nil, nil, fmt.Errorf("unknown schemaID: %v", schemaID)
}
