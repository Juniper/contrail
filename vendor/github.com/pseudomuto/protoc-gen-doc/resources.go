// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93yfHIb9/dLQUtvGCiM/nc+zj833HSfHpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHnrWOEEoSSfgCkDulDNR6baYq8A3KmHNHSeJekRDW69JcMzsikiD3HJQvaWRmpS5Kfi9BKbLIXBfOEQ3GTpK405gx69ixLssRLwRftETti2tsdI7cz0RNKbBA5eNYkxkDNJckhLFDGMsD5iGxz4hSnISN6IUBWbe1BRkXCyniCPmCqbHzX8k5QtgMRuAb4z0N9HLs/ON4WyOO3JNh0HEdopdAgvIIQliK++oIQhi4lo+TdLfYsw/tkLvHCPoRF2QGrB9SOslWIPZqa8ReYyNYz0RQm1eq70o1DG68VPB968aM8u/I/AFeVLRJianorIrsI/YMbNLvz8ww2RqK28oAW/rnMCcx098Ii01Ug5tkYx9QktTtXgpIEuBBR9BG7k1aU3j1PKrZx55lRE5rLyVgQeGyh5y0nx40cCNzuyfuFSgNASoiDHD4ZB8cfhssz3OyLdM/EjWAuIrDGchXFoOWKhvM0SsJQtPfmeCaUE75oua5MPy66Nhj+atUB3uVi07ZVBQKj8P9XV12pXRpkofk7Xgf8ralLpm9/QZyYvO9cynZjpb7IlUHjbKHrrZefcnIy9u8hRwyWAHr7tOY8rmQIWG9bHnv5O+d/L2T/1GdvML7TcQnq5FbkCvqP+8TxMv38Jb+fQl6Kd7GN4YXFyy7VzTc6W/gRwxKo2HpugEVCa5gA+iL61N2lHsQpyw/NSXJRhsyYqmeWW+1BBJSvlivkUr/76Nz7xps5huLsMOdq7DmZy7jLd5+aoaSLrV+Xb31CSPS3tvTqq1yf/jG033fGeJ0i/1kCLBbe5NQjVPKTtqNpNCim9ZPFxOhTQK7AWcHB4NOvpAVGQRdP+ql4F2wWrk1pKMpHEXLSguiKhtdaXnqY+m3/hLrSs99ezCCYxI2iDqLoo28mcxtBLTZ64Q22Frnao2pVZ62XBdKlBxhL/+x5GcAAAD//x4vKjleGQAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz2+jOhC+81fMC+/wqor0XiU5vPZVT6u2qtpqL9Vq6yQTgmRsFptoK/D/vvIPsAnQVNrVXpYLnhk8zHzf54EYHkou+YZTuOabKkcmicw4ixYEGMlxOZO8mK0WF2QVRXEMz2RNEfgOrjiTyKSI6rokLEWY32QUhVJRXf+9yyh+1dvhcgnze5KjUgm81LVbf/kn7tZnEUCX4w6FIKlOA2A33HKWhptuKkrDjci2SoUp/mNV/lP7v0tkIuOsTaL7SigekIKPmWS+T6US7GITiZ+wPGSbsLfTdbX3BF6eNoSSEj4TWiE8vxWoaxDGmRy0M5HaeRZ9mBHPcVeLY3pRAKFZypazMkv3crZaENiXuFvOYiOHZ17o5xYXhVVFtz+q6/k1ik2ZFVpFSgXVeG57L/aNe5mZjJ650azZDub/E3GTId3qnA2YJTQGHGjglqyRQgPBTmiiBhJ9gb1D33QXNCGGOj8khsvGdwpNJy/9vpBGa5/Zp00V5vG6ZnxdQr8T28c17khFpeFWKXDmJZi+w5DTgymwrxCPSCjgqPGa9cj8S4S+3Vf5GssphIYodSBNo+XfPYpYDzBr6zlCMpax9Dhiy/s90NnQ4q8kAWRbyJ1UIUlWgYLdaPkF8m1Ah05x8AHATXOTYJ+CMABjCALqblsExrQVwDAxCUNIRsfon6vP14FAXycV6jnpUXCkTv99+ZhA3xHnHco937YafcRvFQrZsvOIouBMYGtPsnNMxLF5bDfht0IXMD12XUnH09e5gyFsSXD+J1kiyTOWKgXCrDvIXVbb2TCt9Y/ktYH3Ep86eAOOheOxpdedzziG4S+AJmte6D+4lo17LlFAA1fn563rEzmQdv3wJvecOWucrIAVGJ61kUNly/Jkheozf5cWsxlcrKDvcszqkrvzVhRhTNce2rb+1tOh8yMAAP//me02bccKAAA=",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
