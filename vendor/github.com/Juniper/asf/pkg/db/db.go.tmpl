package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/Juniper/asf/pkg/schema"
	"github.com/Juniper/asf/pkg/errutil"
	"github.com/Juniper/asf/pkg/format"
	"github.com/Juniper/asf/pkg/schema"
	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"

	asfdb "github.com/Juniper/asf/pkg/db"
	asfmodels "github.com/Juniper/asf/pkg/models"
	asfservices "github.com/Juniper/asf/pkg/services"
	models "{{ modelsImportPath }}"
	services "{{ servicesImportPath }}"
)

// TODO(dfurman): write tests
// TODO(mblotniak): clean imports

//Service for DB.
type Service struct {
	services.BaseService
	asfdb.DB
}

//NewServiceFromConfig makes db service from viper config.
func NewServiceFromConfig() (*Service, error) {
	sqlDB, err := asfdb.ConnectDB()
	if err != nil {
		return nil, errors.Wrap(err, "Init DB failed")
	}
	return NewService(sqlDB), nil
}

//NewService makes a DB service.
func NewService(db *sql.DB) *Service {
	dbService := &Service{
		DB:      asfdb.NewDB(db),
	}
	dbService.initQueryBuilders()
	return dbService
}

// DecodeRowEvent transforms row data into *services.Event.
func (db *Service) DecodeRowEvent(
	operation, resourceName string, pk []string, properties map[string]interface{},
) (*services.Event, error) {
	obj, fields, err := db.ScanRow(resourceName, properties)
	if err != nil {
		return nil, fmt.Errorf("error scanning row: %v", err)
	}

	pkLen := len(pk)
	isRef := strings.HasPrefix(resourceName, schema.RefPrefix)
	switch {
	case pkLen == 1 && !isRef:
		return decodeResourceEvent(operation, resourceName, pk, obj, fields)
	case pkLen == 2 && isRef:
		return decodeReferenceEvent(operation, resourceName, pk, obj)
	}
	return nil, errors.Errorf(
		"%s row: unhandled case with table %v and primary key with %v elements", operation, resourceName, pkLen,
	)
}

type toMapper interface {
	ToMap() map[string]interface{}
}

func decodeResourceEvent(
	operation, resourceName string, pk []string, obj toMapper, fm *types.FieldMask,
) (*services.Event, error) {
	m := obj.ToMap()
	if fm != nil {
		m = asfmodels.ApplyFieldMask(m, *fm)
	}
	return services.NewEvent(services.EventOption{
		UUID:      pk[0],
		Kind:      resourceName,
		Data:      m,
		Operation: operation,
		FieldMask: fm,
	})
}

func decodeReferenceEvent(operation, resourceName string, pk []string, attr toMapper) (*services.Event, error) {
	if operation == asfservices.OperationUpdate {
		return nil, errors.New("method UPDATE not available on ref_* resources - received ref-relax event")
	}
	var attrMap map[string]interface{}
	if attr != nil {
		attrMap = attr.ToMap()
	}
	return services.NewRefUpdateEvent(services.RefUpdateOption{
		Operation:     asfservices.ParseRefOperation(operation),
		ReferenceType: refTableNameToReferenceName(resourceName),
		FromUUID:      pk[0],
		ToUUID:        pk[1],
		Attr:          attrMap,
	})
}

func refTableNameToReferenceName(name string) string {
	return strings.Replace(strings.TrimPrefix(name, "ref_"), "_", "-", -1)
}

func (db *Service) initQueryBuilders() {
    queryBuilders := map[string]*asfdb.QueryBuilder{}
    db.QueryBuilders = queryBuilders

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    queryBuilders["{{ schema.ID }}"] = asfdb.NewQueryBuilder(db.Dialect,
       "{{ schema.Table }}",
       {{ schema.JSONSchema.GoName }}Fields,
       {{ schema.JSONSchema.GoName }}RefFields,
       {{ schema.JSONSchema.GoName }}ChildFields,
       {{ schema.JSONSchema.GoName }}BackRefFields)
{% endif%}{% endfor %}
}

// ScanRow maps row from database table named schemaID into generated Go struct.
func (db *Service) ScanRow(schemaID string, rowData map[string]interface{}) (asfdb.Object, *types.FieldMask, error) {
    switch schemaID { {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    case "{{ schema.ID }}":
        return db.scan{{schema.JSONSchema.GoName}}(rowData)
        {%- for linkTo, reference in schema.References %}
    case "ref_{{ schema.ID }}_{{ linkTo }}":
        {% if reference.RefType %}o, fm := db.scan{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefAttr(rowData)
        return o, fm, nil
        {%- else %}return nil, nil, nil{% endif %}
{%- endfor -%}
    {% endif%}{% endfor %}
    }
    return nil, nil, fmt.Errorf("unknown schemaID: %v", schemaID)
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
// {{ schema.JSONSchema.GoName }}Fields is db columns for {{ schema.JSONSchema.GoName }}
var {{ schema.JSONSchema.GoName }}Fields = []string{
   {% for column in schema.Columns %}"{{ column.Column }}",
   {% endfor %}
}

// {{ schema.JSONSchema.GoName }}RefFields is db reference fields for {{ schema.JSONSchema.GoName }}
var {{ schema.JSONSchema.GoName }}RefFields = map[string][]string{
   {% for linkTo, reference in schema.References %}
	"{{ reference.LinkTo.Table }}": []string{
		{% for column in reference.Columns %}"{{ column.Column }}",
		{% endfor %}
	},
   {% endfor %}
}

// {{ schema.JSONSchema.GoName }}ChildFields is db child fields for {{ schema.JSONSchema.GoName }}
var {{ schema.JSONSchema.GoName }}ChildFields = map[string][]string{
   {% for _, backref in schema.Children %}
   {% set child = backref.LinkTo %}
   "{{ child.Table }}": []string{
		{% for column in child.Columns %}"{{ column.Column }}",
		{% endfor %}
   },
   {% endfor %}
}

// {{ schema.JSONSchema.GoName }}BackRefFields is db back reference fields for {{ schema.JSONSchema.GoName }}
var {{ schema.JSONSchema.GoName }}BackRefFields = map[string][]string{
   {% for _, definition in schema.BackReferences %}
   {% set backref = definition.LinkTo %}
   "{{ backref.Table }}": []string{
		{% for column in backref.Columns %}"{{ column.Column }}",
		{% endfor %}
   },
   {% endfor %}
}

// {{ schema.JSONSchema.GoName }}ParentTypes is possible parents for {{ schema.JSONSchema.GoName }}
var {{ schema.JSONSchema.GoName }}Parents = []string{
   {% for parent in schema.Parents %}
   "{{ parent }}",
   {% endfor %}
}

func (db *Service) create{{ schema.JSONSchema.GoName }}Reference(
	ctx context.Context,
	request *services.Create{{ schema.JSONSchema.GoName }}Request) error {
	{% for linkTo, reference in schema.References %}
	for _, ref := range request.{{ schema.JSONSchema.GoName }}.{{ reference.GoName }}Refs {
		if err := db.CreateRef(
			ctx,
			request.{{ schema.JSONSchema.GoName }}.UUID, ref.UUID,
			"{{ schema.ID }}", "{{ linkTo | lower }}",
			{% for column in reference.Columns %}{% if column.Bind == "json" %}format.MustJSON(ref.GetAttr(){{ column.GetPath }}){% elif column.Bind %}{{ column.Bind }}(ref.GetAttr(){{ column.GetPath }}){% else %}ref.GetAttr(){{ column.GetPath }}{% endif %},
{% endfor %}
		); err != nil {
			return err
		}
	}
	{% endfor %}
	return nil
}

// create{{ schema.JSONSchema.GoName }} inserts {{ schema.JSONSchema.GoName }} to DB
func (db *Service) create{{ schema.JSONSchema.GoName }}(
	ctx context.Context,
	request *services.Create{{ schema.JSONSchema.GoName }}Request) error {
	qb := db.QueryBuilders["{{ schema.ID }}"]
	tx := asfdb.GetTransaction(ctx)
	model := request.{{ schema.JSONSchema.GoName }}
	_, err := tx.ExecContext(ctx, qb.CreateQuery(),
	{% for column in schema.Columns %}
		{%- if column.Bind == "json" -%}
		format.MustJSON(model{{ column.GetPath }})
		{%- elif column.Bind == "uint64" -%}
		{# workaround for https://github.com/golang/go/issues/9373 #}
		fmt.Sprint({{ column.Bind }}(model{{ column.GetPath }}))
		{%- elif column.Bind -%}
		{{ column.Bind }}(model{{ column.GetPath }})
		{%- else -%}
		model{{ column.GetPath }}
		{%- endif -%},
	{% endfor %})
	if err != nil {
		err = asfdb.FormatDBError(err)
		return errors.Wrap(err, "creating {{ schema.JSONSchema.GoName }} failed")
	}

	{% if schema.References %}
	err = db.create{{ schema.JSONSchema.GoName }}Reference(ctx, request)
	if err != nil {
		return errors.Wrap(err, "creating references for {{ schema.JSONSchema.GoName }} failed")
	}
	{% endif %}

	{% if schema.HasParents() %}
	err = db.CreateParentReference(ctx, request.{{ schema.JSONSchema.GoName }}, qb, {{ schema.JSONSchema.GoName }}Parents, {% if schema.ParentOptional %}true{% else %}false{% endif %})
	if err != nil {
		return errors.Wrap(err, "creating parent reference for {{ schema.JSONSchema.GoName }} failed")
	}
	{% endif %}

	metaData := &asfmodels.Metadata{
		UUID: model.UUID,
		Type: "{{ schema.TypeName }}",
		FQName: model.FQName,
	}
	err = db.CreateMetadata(ctx, metaData)
	if err != nil {
		return errors.Wrap(err, "creating meta-data for {{ schema.JSONSchema.GoName }} failed")
	}
	for _, share := range model.GetPerms2().GetShare() {
		err = db.CreateSharing(tx, "{{ schema.ID }}", model.UUID, share)
		if err != nil {
			return errors.Wrap(err, "creating share perms2 for {{ schema.JSONSchema.GoName }} failed")
		}
	}
	return nil
}

{% macro scanJSONObject(JSONSchema, path, arg) %}
	{% if JSONSchema.Type == "array" -%}
		{% if JSONSchema.Items.Type == "string" -%}
			{{ path }} = format.InterfaceToStringList({{arg}})
		{% elif JSONSchema.Items.GoType == "int64" -%}
			{{ path }} = format.InterfaceToInt64List({{arg}})
		{% elif JSONSchema.Items.GoType == "uint64" -%}
			{{ path }} = format.InterfaceToUint64List({{arg}})
		{% elif JSONSchema.Items.Type == "boolean" -%}
			{{ path }} = format.InterfaceToBoolList({{arg}})
		{% elif JSONSchema.Items.Type == "object" -%}
			{{ path }} = models.InterfaceTo{{ JSONSchema.Items.GoType }}Slice({{arg}})
		{% endif -%}
	{% else -%}
		{% if JSONSchema.Type == "string" -%}
			{{ path }} = format.InterfaceToString({{arg}})
		{% elif JSONSchema.GoType == "int64" -%}
			{{ path }} = format.InterfaceToInt64({{arg}})
		{% elif JSONSchema.GoType == "uint64" -%}
			{{ path }} = format.InterfaceToUint64({{arg}})
		{% elif JSONSchema.Type == "boolean" -%}
			{{ path }} = format.InterfaceToBool({{arg}})
		{% elif JSONSchema.Type == "object" -%}
			{{ path }} = models.InterfaceTo{{ JSONSchema.Items.GoType }}({{arg}})
		{% endif -%}
	{% endif -%}
{% endmacro %}

func (db *Service) scan{{ schema.JSONSchema.GoName }}(
	values map[string]interface{},
) (
	*models.{{ schema.JSONSchema.GoName }}, *types.FieldMask, error,
) {
	if values == nil {
		return nil, nil, nil
	}
	m := models.Make{{ schema.JSONSchema.GoName }}()
	var paths []string
	{% for column in schema.Columns %}
	if value, ok := values["{{ column.Column }}"]; ok {
		paths = append(paths, "{{ column.UpdatePath }}")
		{% if column.Bind == "json" -%}
		if b, ok := value.([]byte); ok {
			json.Unmarshal(b, &m{{ column.Path }})
		} else {
			{{scanJSONObject(column.JSONSchema, "m"|add:column.Path, "value")}}
		}
		{%- elif column.Bind == "int" -%}
			m{{ column.Path }} = format.InterfaceToInt64(value)
		{%- elif column.Bind == "uint64" -%}
			m{{ column.Path }} = format.InterfaceToUint64(value)
		{%- elif column.Bind == "bool" -%}
			m{{ column.Path }} = format.InterfaceToBool(value)
		{%- elif column.Bind == "string" -%}
			m{{ column.Path }} = format.InterfaceToString(value)
		{% endif -%}
	}
	{%- endfor -%}

	{% if schema.References | length + schema.Children | length + schema.BackReferences | length  > 0 %}
	qb := db.QueryBuilders["{{ schema.ID }}"]
	{%- endif %}

	{% for linkTo, reference in schema.References %}
	if value, ok := values["ref_{{ linkTo | lower }}"]; ok {
		paths = append(paths, "{{ linkTo | lower }}_refs")
		references := qb.ScanResourceList(value)
		for _, reference := range references {
			referenceMap, ok := reference.(map[string]interface{})
			if !ok {
				continue
			}
			referenceModel := &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{}

			var err error
			referenceModel.UUID, referenceModel.To, err = asfdb.ResolveUUIDAndFQNameFromMap(referenceMap)
			if err != nil {
				return nil, nil, err
			}
			if referenceModel.UUID == "" {
				continue
			}

			{% if reference.RefType -%}
			referenceModel.Attr, _ = db.scan{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefAttr(referenceMap)
			{%- endif %}
			m.Add{{ reference.GoName }}Ref(referenceModel)
		}
	}
	{% endfor %}
	{%- for _, definition in schema.Children %}
	{% set child = definition.LinkTo %}
	if value, ok := values[schema.ChildColumnName("{{ child.Table }}", "{{ schema.ID }}")]; ok {
		childResources := qb.ScanResourceList(value)
		for _, childResource := range childResources {
			childResourceMap, ok := childResource.(map[string]interface{})
			if !ok {
				continue
			}
			childModel, _, err := db.scan{{ child.JSONSchema.GoName }}(childResourceMap)
			if err != nil {
				return nil, nil, err
			}
			if childModel.GetUUID() == "" {
				continue
			}

			m.{{ child.JSONSchema.GoName }}s = append(m.{{ child.JSONSchema.GoName }}s, childModel)
		}
	}
	{%- endfor %}
	{% for _, definition in schema.BackReferences %}
	{% set backref = definition.LinkTo %}
	if value, ok := values[schema.BackRefColumnName("{{ backref.Table }}", "{{ schema.Table }}")]; ok {
		backrefResources := qb.ScanResourceList(value)
		for _, childResource := range backrefResources {
			backrefResourceMap, ok := childResource.(map[string]interface{})
			if !ok {
				continue
			}
			uuid := format.InterfaceToString(backrefResourceMap["uuid"])
			if uuid == "" {
				continue
			}
			backrefModel, _, err := db.scan{{ backref.JSONSchema.GoName }}(backrefResourceMap)
			if err != nil {
				return nil, nil, err
			}
			if backrefModel.GetUUID() == "" {
				continue
			}

			m.{{ backref.JSONSchema.GoName }}BackRefs = append(m.{{ backref.JSONSchema.GoName }}BackRefs, backrefModel)
		}
	}
	{% endfor %}
	return m, &types.FieldMask{Paths: paths}, nil
}

{% for linkTo, reference in schema.References %}{% if reference.RefType %}
func (db *Service) scan{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefAttr(values map[string]interface{}) (*models.{{ reference.RefType }}, *types.FieldMask) {
	attr := models.Make{{reference.RefType}}()
	var paths []string
	{% for column in reference.Columns %}
	if refAttrValue, ok := values["{{column.Column}}"]; ok && refAttrValue != nil {
		paths = append(paths, "{{ column.UpdatePath }}")
		{{scanJSONObject(column.JSONSchema, "attr"|add:column.Path, "refAttrValue")}}
	}
	{% endfor %}
	return attr, &types.FieldMask{Paths: paths}
}
{% endif %}{% endfor %}

// list{{ schema.JSONSchema.GoName }} lists {{ schema.JSONSchema.GoName }} with list spec.
func (db *Service) list{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.List{{ schema.JSONSchema.GoName }}Request) (response *services.List{{ schema.JSONSchema.GoName }}Response, err error) {
	rows, err := db.ListRows(ctx, "{{ schema.ID }}", request.Spec)
	if err != nil {
		return nil, errors.Wrap(err, "select query failed")
	}

	defer rows.Close()

	if err := rows.Err(); err != nil {
		return nil, errors.Wrap(asfdb.FormatDBError(err), "row error")
	}

	result := []*models.{{ schema.JSONSchema.GoName }}{}
	for rows.Next() {
			valuesMap, err := rows.ReadMap()
			if err != nil {
				return nil, errors.Wrap(err, "reading row failed")
			}
			m, _, err := db.scan{{ schema.JSONSchema.GoName }}(valuesMap)
			if err != nil {
				return nil, errors.Wrap(err, "scan row failed")
			}
			result = append(result, m)
	}

	return &services.List{{ schema.JSONSchema.GoName }}Response{
		{{ schema.JSONSchema.GoName }}s: result,
		{{ schema.JSONSchema.GoName }}Count: int64(len(result)),
	}, nil
}

// Update{{ schema.JSONSchema.GoName }} updates a resource
func (db *Service) update{{ schema.JSONSchema.GoName }}(
	ctx context.Context,
	request *services.Update{{ schema.JSONSchema.GoName }}Request,
	) error {
	tx := asfdb.GetTransaction(ctx)
	qb := db.QueryBuilders["{{ schema.ID }}"]
	model := request.{{ schema.JSONSchema.GoName }}

	if err := db.CheckPolicy(ctx, qb, model.UUID); err != nil {
		return err
	}

	var paths []string
	for _, path := range request.FieldMask.Paths {
		childPaths := {{ schema.JSONSchema.GoName }}Structure.GetInnerPaths(path)
		if len(childPaths) == 0 {
			paths = append(paths, path)
		} else {
			paths = append(paths, childPaths...)
		}
	}

	columns := []string{}
	values := []interface{}{}
	for _, updatedPath := range paths {
		switch (updatedPath) {
			{% for column in schema.Columns %}
			case "{{ column.UpdatePath }}":
				columns = append(columns, "{{ column.Column }}")
				values = append(values,
					{%- if column.Bind == "json" -%}
					format.MustJSON(model{{ column.GetPath }})
					{%- elif column.Bind == "uint64" -%}
					fmt.Sprint({{ column.Bind }}(model{{ column.GetPath }}))
					{%- elif column.Bind -%}
					{{ column.Bind }}(model{{ column.GetPath }})
					{%- else -%}
					model{{ column.GetPath }}
					{%- endif -%} )
			{%- endfor %}
			{% for linkTo, reference in schema.References %}
			case "{{ linkTo | lower }}_refs":
				_, err := tx.ExecContext(ctx, qb.DeleteRefsQuery("{{ linkTo | lower }}"), model.UUID)
				if err != nil {
					err = asfdb.FormatDBError(err)
				  return errors.Wrapf(err,"{{ reference.GoName }}Refs update failed for object {{ schema.JSONSchema.GoName }} with UUID: '%v': ", request.{{ schema.JSONSchema.GoName }}.GetUUID())
				}
				for _, ref := range model.{{ reference.GoName }}Refs {
					{% if reference.RefType  %}
					if ref.Attr == nil {
						ref.Attr = &models.{{ reference.RefType }}{}
					}
					{% endif %}
					_, err = tx.ExecContext(ctx, qb.CreateRefQuery("{{ linkTo | lower  }}"), model.UUID, ref.UUID, {% for column in reference.Columns %}{% if column.Bind == "json" %}format.MustJSON(ref.Attr{{ column.GetPath }}){% elif column.Bind %}{{ column.Bind }}(ref.Attr{{ column.GetPath }}){% else %}ref.Attr{{ column.GetPath }}{% endif %}{% if not forloop.Last %},
				{% endif %}{% endfor %})
					if err != nil {
						err = asfdb.FormatDBError(err)
					  return errors.Wrapf(err,"{{ reference.GoName }}Refs create failed for object {{ schema.JSONSchema.GoName }} with UUID: '%v': ", request.{{ schema.JSONSchema.GoName }}.GetUUID())
					}
				}
			{%- endfor %}
		}
	}
	values = append(values, model.UUID)
	if len(columns) == 0 {
		return nil
	}
	_, err := tx.ExecContext(ctx, qb.UpdateQuery(columns), values...)
	return asfdb.FormatDBError(err)
}

//Create{{ schema.JSONSchema.GoName }} handle a Create API
func (db *Service) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context,
	request *services.Create{{ schema.JSONSchema.GoName }}Request) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
	model := request.{{ schema.JSONSchema.GoName }}
	if model == nil {
		return nil, errutil.ErrorBadRequest("update body is empty")
	}
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			return db.create{{ schema.JSONSchema.GoName }}(ctx, request)
		}); err != nil {
			return nil, err
	}
	return &services.Create{{ schema.JSONSchema.GoName }}Response{
		{{ schema.JSONSchema.GoName }}: request.{{ schema.JSONSchema.GoName }},
	}, nil
}

//Update{{ schema.JSONSchema.GoName }} handles a Update request.
func (db *Service) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context,
	request *services.Update{{ schema.JSONSchema.GoName }}Request) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
	model := request.{{ schema.JSONSchema.GoName }}
	if model == nil {
		return nil, errutil.ErrorBadRequest("update body is empty")
	}
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			return db.update{{ schema.JSONSchema.GoName }}(ctx, request)
		}); err != nil {
		return nil, err
	}
	return &services.Update{{ schema.JSONSchema.GoName }}Response{
		{{ schema.JSONSchema.GoName }}: model,
	}, nil
}

//Delete{{ schema.JSONSchema.GoName }} delete a resource.
func (db *Service) Delete{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
	id := request.GetID()
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			return db.Delete(ctx, db.QueryBuilders["{{ schema.ID }}"], id, {{schema.JSONSchema.GoName}}BackRefFields)
		}); err != nil {
		return nil, err
	}
	return &services.Delete{{ schema.JSONSchema.GoName }}Response{
		ID: id,
	}, nil
}

{% for linkTo, reference in schema.References %}
// Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref handles ref create.
func (db *Service) Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref(
	ctx context.Context,
	request *services.Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest) (*services.Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse, error) {
	ref := request.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref
	if request.ID == "" {
		return nil, errutil.ErrorBadRequest("reference from ID is missing")
	}
	if ref == nil {
		return nil, errutil.ErrorBadRequest("reference data is missing")
	}
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			return db.CreateRef(
				ctx,
				request.ID, ref.UUID,
				"{{ schema.ID }}", "{{ linkTo | lower }}",
				{% for column in reference.Columns %}{% if column.Bind == "json" %}format.MustJSON(ref.GetAttr(){{ column.GetPath }}){% elif column.Bind %}{{ column.Bind }}(ref.GetAttr(){{ column.GetPath }}){% else %}ref.GetAttr(){{ column.GetPath }}{% endif %},
				{% endfor %}
			)
		}); err != nil {
		return nil, err
	}
	return &services.Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse{
		ID: request.ID,
		{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref: request.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref,
	}, nil
}

// Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref handles ref delete.
func (db *Service) Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref(
	ctx context.Context,
	request *services.Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest) (*services.Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse, error) {
	ref := request.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref
	if request.ID == "" {
		return nil, errutil.ErrorBadRequest("reference from ID is missing")
	}
	if ref == nil {
		return nil, errutil.ErrorBadRequest("reference data is missing")
	}
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			return db.DeleteRef(ctx, request.ID, ref.UUID, "{{ schema.ID }}", "{{ linkTo | lower }}")
		}); err != nil {
		return nil, err
	}
	return &services.Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse{
		ID: request.ID,
		{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref: request.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref,
	}, nil
}
{% endfor %}

//Get{{ schema.JSONSchema.GoName }} a Get request.
func (db *Service) Get{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Get{{ schema.JSONSchema.GoName }}Request) (response *services.Get{{ schema.JSONSchema.GoName }}Response, err error) {
	listRequest := &services.List{{ schema.JSONSchema.GoName }}Request{
		Spec: asfdb.SingleObjectListSpec(request.ID, request.Fields),
	}
	var result *services.List{{ schema.JSONSchema.GoName }}Response
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			result, err = db.list{{ schema.JSONSchema.GoName }}(ctx, listRequest)
			return err
		}); err != nil {
		return nil, errutil.ErrorInternal
	}
	if len(result.{{ schema.JSONSchema.GoName }}s) == 0 {
		return nil, errutil.ErrorNotFoundf("{{ schema.TypeName }} with uuid: '%s' does not exists", request.ID)
	}

	return &services.Get{{ schema.JSONSchema.GoName }}Response{
	   {{ schema.JSONSchema.GoName }}: result.{{ schema.JSONSchema.GoName }}s[0],
	}, nil
}

//List{{ schema.JSONSchema.GoName }} handles a List service Request.
func (db *Service) List{{ schema.JSONSchema.GoName }}(
	ctx context.Context,
	request *services.List{{ schema.JSONSchema.GoName }}Request) (response *services.List{{ schema.JSONSchema.GoName }}Response, err error) {
	spec := request.Spec
	if err := db.DoInTransaction(
		ctx,
		func (ctx context.Context) error {
			if spec.Count {
				var count int64
				count, err = db.Count(ctx, db.QueryBuilders["{{ schema.ID }}"], request.Spec)
				if err == nil {
					response = &services.List{{ schema.JSONSchema.GoName }}Response{
						{{ schema.JSONSchema.GoName }}Count: count,
					}
				}
			} else {
				response, err = db.list{{ schema.JSONSchema.GoName }}(ctx, request)
			}

			return err
		}); err != nil {
		return nil, err
	}
	return response, nil
}

{% endif %}
{% endfor %}

{%- macro propertiesStructure(JSONSchema) %}
    {%- for property, definition in JSONSchema.Properties -%}
    {%- if definition.Properties|length == 0 %}
    "{{ property }}": struct{}{},
    {%- else %}
    "{{ property }}": {{definition.GoType}}Structure,
    {%- endif %}
    {%- endfor %}
{% endmacro -%}

{% for schema in schemas -%}
{%- if schema.JSONSchema.Type == "object" and schema.Type != "abstract" %}
// {{ schema.JSONSchema.GoName }}Structure describes {{ schema.JSONSchema.GoName }} structure
var {{ schema.JSONSchema.GoName }}Structure = &asfdb.Structure{
    {{- propertiesStructure(schema.JSONSchema) -}}
}
{% endif -%}
{%- endfor %}

{% for type, definition in types sorted -%}
// {{ type }}Structure describes {{ type }} structure
var {{ type }}Structure = &asfdb.Structure{
    {{- propertiesStructure(definition) -}}
}
{% endfor %}
