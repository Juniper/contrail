package db

import (
    "context"
    "testing"
    "time"
	"database/sql"
	"os"
	"strings"

	"github.com/Juniper/asf/pkg/logutil"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
    "github.com/gogo/protobuf/types"
    "github.com/stretchr/testify/assert"

	asfdb "github.com/Juniper/asf/pkg/db"
    asfservices "github.com/Juniper/asf/pkg/services"
	models "{{ modelsImportPath }}"
	services "{{ servicesImportPath }}"
	uuid "github.com/satori/go.uuid"
)

var db *Service

func TestMain(m *testing.M) {
	viper.SetConfigType("yml")
	viper.SetConfigName("test_config")
	viper.AddConfigPath("../../sample")
	err := viper.ReadInConfig()
	if err != nil {
		logutil.FatalWithStackTrace(err)
	}
	viper.SetEnvPrefix("asf")
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	viper.AutomaticEnv()

	if err = logutil.Configure(viper.GetString("log_level")); err != nil {
		logutil.FatalWithStackTrace(err)
	}

	testDB, err := asfdb.OpenConnection(asfdb.ConnectionConfig{
		User:     viper.GetString("database.user"),
		Password: viper.GetString("database.password"),
		Host:     viper.GetString("database.host"),
		Name:     viper.GetString("database.name"),
        Port:     viper.GetString("database.port"),
	})
	if err != nil {
		logutil.FatalWithStackTrace(err)
	}
	defer closeDB(testDB)

	db = &Service{
		DB: asfdb.NewDB(testDB),
	}
	db.initQueryBuilders()

	logrus.Info("Starting integration tests")
	code := m.Run()
	logrus.Info("Finished integration tests")
	if code != 0 {
		os.Exit(code)
	}
}

func closeDB(db *sql.DB) {
	if err := db.Close(); err != nil {
		logutil.FatalWithStackTrace(err)
	}
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func create{{ schema.JSONSchema.GoName }}(t *testing.T, ctx context.Context, id string, createRef bool, share []*models.ShareType) *models.{{ schema.JSONSchema.GoName }} {
    response, err := db.Get{{ schema.JSONSchema.GoName }}(
            ctx, &services.Get{{ schema.JSONSchema.GoName }}Request{
                ID: id})
    if err == nil {
        return response.{{ schema.JSONSchema.GoName }}
    }

    model := models.Make{{ schema.JSONSchema.GoName }}()
    model.UUID = id
    model.FQName = []string{"default", "default-domain", model.UUID}
    model.Perms2.Owner = "admin"
    model.Perms2.Share = share

    {% if schema.HasParents() && !schema.ParentOptional %}
    parent := create{{ schema.DefaultParent.GoName }}(t, ctx, uuid.NewV4().String(), false, share)
    model.ParentUUID = parent.UUID
    model.ParentType = "{{ schema.DefaultParent.LinkTo.Path }}"
    {% endif %}

    // Create referred objects
    if createRef {
        {% for linkTo, reference in schema.References %}
        ref{{ reference.GoName }}1 := create{{ reference.GoName }}(t, ctx, uuid.NewV4().String(), false, share)
        ref{{ reference.GoName }}2 := create{{ reference.GoName }}(t, ctx, uuid.NewV4().String(), false, share)

        model.{{ reference.GoName }}Refs = []*models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{
                &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{
                        UUID: ref{{ reference.GoName }}1.UUID,
                },
                &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{
                        UUID: ref{{ reference.GoName }}2.UUID,
                },
        }
        {% endfor %}
    }

    _, err = db.Create{{ schema.JSONSchema.GoName }}(ctx,
            &services.Create{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model,
    })

    assert.NoError(t, err, "failed to create {{ schema.JSONSchema.GoName }}")
    return model
}

func delete{{ schema.JSONSchema.GoName }}(t *testing.T, ctx context.Context, uuid string) {
    getResponse, err := db.Get{{ schema.JSONSchema.GoName }}(
            ctx, &services.Get{{ schema.JSONSchema.GoName }}Request{
                ID: uuid})
    if err != nil {
        return
    }
    model := getResponse.{{ schema.JSONSchema.GoName }}
    _, err = db.Delete{{ schema.JSONSchema.GoName }}(ctx,
            &services.Delete{{ schema.JSONSchema.GoName }}Request{
                ID: model.GetUUID()})
    assert.NoError(t, err, "Delete failed")

    {% for linkTo, reference in schema.References %}
    for _, ref := range model.{{ reference.GoName }}Refs {
        delete{{ reference.GoName }}(t, ctx, ref.UUID)
    }
    {% endfor %}

    {% if schema.HasParents() && !schema.ParentOptional %}
    delete{{ schema.DefaultParent.GoName }}(t, ctx, model.ParentUUID)
    {% endif %}
}

func Test{{ schema.JSONSchema.GoName }}(t *testing.T) {
    t.Parallel()
    var err error
    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

    project := createProject(t, ctx, uuid.NewV4().String(), false, nil)
    defer deleteProject(t, ctx, project.UUID)

    share := []*models.ShareType{&models.ShareType{Tenant:"tenant:" + project.UUID, TenantAccess:7}}
    model := create{{ schema.JSONSchema.GoName }}(t, ctx, uuid.NewV4().String(), true, share)
    defer delete{{ schema.JSONSchema.GoName }}(t, ctx, model.UUID)
	original := *model

    listSpec := &asfservices.ListSpec{
        Limit: 1,
        Filters: []*asfservices.Filter{
            &asfservices.Filter{
                Key: "uuid",
                Values: []string{model.UUID},
            },
        },
    }
    response, err := db.List{{ schema.JSONSchema.GoName }}(ctx,
        &services.List{{ schema.JSONSchema.GoName }}Request{Spec: listSpec})
    assert.NoError(t, err, "list failed")
    assert.Equal(t, 1, len(response.{{ schema.JSONSchema.GoName }}s), "expected one element")
    assert.Equal(t, int64(1), response.{{ schema.JSONSchema.GoName }}Count, "expected count = 1")

    listSpec.Count = true
    response, err = db.List{{ schema.JSONSchema.GoName }}(ctx,
        &services.List{{ schema.JSONSchema.GoName }}Request{
            Spec: listSpec,
    })
    assert.NoError(t, err, "list count failed")
    assert.Equal(t, ([]*models.{{ schema.JSONSchema.GoName }})(nil), response.{{ schema.JSONSchema.GoName }}s, "expected nil list")
    assert.Equal(t, int64(1), response.{{ schema.JSONSchema.GoName }}Count, "expected count = 1")

    model.DisplayName = "updated"
    {% for linkTo, reference in schema.References %}
    model.{{ reference.GoName }}Refs = []*models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{
        model.{{ reference.GoName }}Refs[0],
    }
    {% endfor %}

	fm := types.FieldMask{Paths: []string{
		"display_name",
{% for linkTo, reference in schema.References %}
        "{{ linkTo | lower }}_refs",{% endfor %}
    }}

    _, err = db.Update{{ schema.JSONSchema.GoName }}(ctx, &services.Update{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model,
                FieldMask: fm,
    })
    assert.NoError(t, err, "update failed")

    getResponse, err := db.Get{{ schema.JSONSchema.GoName }}(ctx, &services.Get{{ schema.JSONSchema.GoName }}Request{
            ID: model.UUID})
    updatedModel := getResponse.{{ schema.JSONSchema.GoName }}
    assert.NoError(t, err, "get response failed")
    assert.Equal(t, model.DisplayName, updatedModel.DisplayName, "update failed")

    {% for linkTo, reference in schema.References %}
    assert.Equal(t, 1, len(updatedModel.{{ reference.GoName }}Refs), "update failed")
    {% endfor %}

	// revert to old values
    _, err = db.Update{{ schema.JSONSchema.GoName }}(ctx, &services.Update{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: &original,
                FieldMask: fm,
    })
    assert.NoError(t, err, "update failed")

    _, err = db.Create{{ schema.JSONSchema.GoName }}(ctx, &services.Create{{ schema.JSONSchema.GoName }}Request{
		{{ schema.JSONSchema.GoName }}: model,
    })
    assert.Error(t, err, "Raise Error On Duplicate Create failed")
}

{% endif %}
{% endfor %}
