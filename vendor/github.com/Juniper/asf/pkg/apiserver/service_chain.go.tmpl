package apiserver

import (
	"github.com/pkg/errors"
	"github.com/spf13/viper"

	asfetcd "github.com/Juniper/asf/pkg/etcd"
	asfmodels "github.com/Juniper/asf/pkg/models"
	asfrbac "github.com/Juniper/asf/pkg/rbac"
	asfservices "github.com/Juniper/asf/pkg/services"
	db "{{ dbImportPath }}"
	etcd "{{ etcdImportPath }}"
	models "{{ modelsImportPath }}"
	rbac "{{ rbacImportPath }}"
	services "{{ servicesImportPath }}"
)

// SetupServiceChain creates service chain using default services, given extra services and DB service.
// It puts extra services after default services but before etcd notifier service and DB service.
// It returns first service of the built service chain.
// TODO(dfurman): return services.Service when APIService is split to plugins.
func SetupServiceChain(
	dbService *db.Service, ag asfrbac.AccessGetter, extraServices ...services.Service,
) (*services.APIService, error) {
	tv, err := models.NewTypeValidatorWithFormat()
	if err != nil {
		return nil, errors.Wrap(err, "new type validator with format")
	}
	cs := &services.APIService{
		BaseService:       services.BaseService{},
		DBService:         dbService,
		TypeValidator:     tv,
		MetadataGetter:    dbService,
		InTransactionDoer: dbService,
	}

	serviceChain := []services.Service{
		cs,
		&services.RefUpdateToUpdateService{
			ReadService:       dbService,
			InTransactionDoer: dbService,
		},
		&services.SanitizerService{
			Sanitizer: asfservices.Sanitizer{MetadataGetter: dbService},
		},
		&rbac.RBACService{
			Guard: asfrbac.Guard{
				AccessGetter: ag,
				AAAMode:      viper.GetString("aaa_mode"),
			},
		},
		services.NewQuotaCheckerService(dbService),
	}
	serviceChain = append(serviceChain, extraServices...)

	if viper.GetBool("server.notify_etcd") {
		en, enErr := etcd.NewNotifierService(viper.GetString(asfetcd.ETCDPathVK), asfmodels.JSONCodec)
		if enErr != nil {
			return nil, errors.Wrap(enErr, "new notifier service")
		}
		serviceChain = append(serviceChain, en)
	}

	serviceChain = append(serviceChain, dbService)
	services.Chain(serviceChain...)
	return cs, nil
}
