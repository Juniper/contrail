// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base.proto

package services

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UUIDs struct {
	UUIDs []string `protobuf:"bytes,1,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (m *UUIDs) Reset()      { *m = UUIDs{} }
func (*UUIDs) ProtoMessage() {}
func (*UUIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{0}
}
func (m *UUIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UUIDs.Unmarshal(m, b)
}
func (m *UUIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UUIDs.Marshal(b, m, deterministic)
}
func (m *UUIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UUIDs.Merge(m, src)
}
func (m *UUIDs) XXX_Size() int {
	return xxx_messageInfo_UUIDs.Size(m)
}
func (m *UUIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_UUIDs.DiscardUnknown(m)
}

var xxx_messageInfo_UUIDs proto.InternalMessageInfo

func (m *UUIDs) GetUUIDs() []string {
	if m != nil {
		return m.UUIDs
	}
	return nil
}

type ListSpec struct {
	Filters      []*Filter         `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit        int64             `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Marker       string            `protobuf:"bytes,3,opt,name=marker,proto3" json:"marker,omitempty"`
	Detail       bool              `protobuf:"varint,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Count        bool              `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Shared       bool              `protobuf:"varint,6,opt,name=shared,proto3" json:"shared,omitempty"`
	ExcludeHrefs bool              `protobuf:"varint,7,opt,name=exclude_hrefs,json=excludeHrefs,proto3" json:"exclude_hrefs,omitempty"`
	ParentFQName []string          `protobuf:"bytes,8,rep,name=parent_fq_name,json=parentFqName,proto3" json:"parent_fq_name,omitempty"`
	ParentType   string            `protobuf:"bytes,9,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty"`
	ParentUUIDs  []string          `protobuf:"bytes,10,rep,name=parent_uuids,json=parentUuids,proto3" json:"parent_uuids,omitempty"`
	BackRefUUIDs []string          `protobuf:"bytes,11,rep,name=backref_uuids,json=backrefUuids,proto3" json:"backref_uuids,omitempty"`
	RefUUIDs     map[string]*UUIDs `protobuf:"bytes,12,rep,name=ref_uuids,json=refUuids,proto3" json:"ref_uuids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ObjectUUIDs  []string          `protobuf:"bytes,13,rep,name=object_uuids,json=objectUuids,proto3" json:"object_uuids,omitempty"`
	Fields       []string          `protobuf:"bytes,14,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *ListSpec) Reset()      { *m = ListSpec{} }
func (*ListSpec) ProtoMessage() {}
func (*ListSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{1}
}
func (m *ListSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSpec.Unmarshal(m, b)
}
func (m *ListSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSpec.Marshal(b, m, deterministic)
}
func (m *ListSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpec.Merge(m, src)
}
func (m *ListSpec) XXX_Size() int {
	return xxx_messageInfo_ListSpec.Size(m)
}
func (m *ListSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpec proto.InternalMessageInfo

func (m *ListSpec) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListSpec) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListSpec) GetMarker() string {
	if m != nil {
		return m.Marker
	}
	return ""
}

func (m *ListSpec) GetDetail() bool {
	if m != nil {
		return m.Detail
	}
	return false
}

func (m *ListSpec) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

func (m *ListSpec) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *ListSpec) GetExcludeHrefs() bool {
	if m != nil {
		return m.ExcludeHrefs
	}
	return false
}

func (m *ListSpec) GetParentFQName() []string {
	if m != nil {
		return m.ParentFQName
	}
	return nil
}

func (m *ListSpec) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ListSpec) GetParentUUIDs() []string {
	if m != nil {
		return m.ParentUUIDs
	}
	return nil
}

func (m *ListSpec) GetBackRefUUIDs() []string {
	if m != nil {
		return m.BackRefUUIDs
	}
	return nil
}

func (m *ListSpec) GetRefUUIDs() map[string]*UUIDs {
	if m != nil {
		return m.RefUUIDs
	}
	return nil
}

func (m *ListSpec) GetObjectUUIDs() []string {
	if m != nil {
		return m.ObjectUUIDs
	}
	return nil
}

func (m *ListSpec) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Filter struct {
	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *Filter) Reset()      { *m = Filter{} }
func (*Filter) ProtoMessage() {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{2}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Filter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type RelaxRefRequest struct {
	UUID    string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"uuid"`
	RefUUID string `protobuf:"bytes,2,opt,name=RefUUID,proto3" json:"ref-uuid"`
}

func (m *RelaxRefRequest) Reset()      { *m = RelaxRefRequest{} }
func (*RelaxRefRequest) ProtoMessage() {}
func (*RelaxRefRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{3}
}
func (m *RelaxRefRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelaxRefRequest.Unmarshal(m, b)
}
func (m *RelaxRefRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelaxRefRequest.Marshal(b, m, deterministic)
}
func (m *RelaxRefRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelaxRefRequest.Merge(m, src)
}
func (m *RelaxRefRequest) XXX_Size() int {
	return xxx_messageInfo_RelaxRefRequest.Size(m)
}
func (m *RelaxRefRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelaxRefRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelaxRefRequest proto.InternalMessageInfo

func (m *RelaxRefRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RelaxRefRequest) GetRefUUID() string {
	if m != nil {
		return m.RefUUID
	}
	return ""
}

type RelaxRefResponse struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"uuid"`
}

func (m *RelaxRefResponse) Reset()      { *m = RelaxRefResponse{} }
func (*RelaxRefResponse) ProtoMessage() {}
func (*RelaxRefResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{4}
}
func (m *RelaxRefResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelaxRefResponse.Unmarshal(m, b)
}
func (m *RelaxRefResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelaxRefResponse.Marshal(b, m, deterministic)
}
func (m *RelaxRefResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelaxRefResponse.Merge(m, src)
}
func (m *RelaxRefResponse) XXX_Size() int {
	return xxx_messageInfo_RelaxRefResponse.Size(m)
}
func (m *RelaxRefResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RelaxRefResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RelaxRefResponse proto.InternalMessageInfo

func (m *RelaxRefResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type GetIntOwnerRequest struct {
	Pool  string `protobuf:"bytes,1,opt,name=Pool,proto3" json:"pool"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"value"`
}

func (m *GetIntOwnerRequest) Reset()      { *m = GetIntOwnerRequest{} }
func (*GetIntOwnerRequest) ProtoMessage() {}
func (*GetIntOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{5}
}
func (m *GetIntOwnerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIntOwnerRequest.Unmarshal(m, b)
}
func (m *GetIntOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIntOwnerRequest.Marshal(b, m, deterministic)
}
func (m *GetIntOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIntOwnerRequest.Merge(m, src)
}
func (m *GetIntOwnerRequest) XXX_Size() int {
	return xxx_messageInfo_GetIntOwnerRequest.Size(m)
}
func (m *GetIntOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIntOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIntOwnerRequest proto.InternalMessageInfo

func (m *GetIntOwnerRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *GetIntOwnerRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GetIntOwnerResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=Owner,proto3" json:"owner"`
}

func (m *GetIntOwnerResponse) Reset()      { *m = GetIntOwnerResponse{} }
func (*GetIntOwnerResponse) ProtoMessage() {}
func (*GetIntOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{6}
}
func (m *GetIntOwnerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIntOwnerResponse.Unmarshal(m, b)
}
func (m *GetIntOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIntOwnerResponse.Marshal(b, m, deterministic)
}
func (m *GetIntOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIntOwnerResponse.Merge(m, src)
}
func (m *GetIntOwnerResponse) XXX_Size() int {
	return xxx_messageInfo_GetIntOwnerResponse.Size(m)
}
func (m *GetIntOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIntOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIntOwnerResponse proto.InternalMessageInfo

func (m *GetIntOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type CreateIntPoolRequest struct {
	Pool  string `protobuf:"bytes,1,opt,name=Pool,proto3" json:"pool"`
	Start int64  `protobuf:"varint,2,opt,name=Start,proto3" json:"start"`
	End   int64  `protobuf:"varint,3,opt,name=End,proto3" json:"end"`
}

func (m *CreateIntPoolRequest) Reset()      { *m = CreateIntPoolRequest{} }
func (*CreateIntPoolRequest) ProtoMessage() {}
func (*CreateIntPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{7}
}
func (m *CreateIntPoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateIntPoolRequest.Unmarshal(m, b)
}
func (m *CreateIntPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateIntPoolRequest.Marshal(b, m, deterministic)
}
func (m *CreateIntPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateIntPoolRequest.Merge(m, src)
}
func (m *CreateIntPoolRequest) XXX_Size() int {
	return xxx_messageInfo_CreateIntPoolRequest.Size(m)
}
func (m *CreateIntPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateIntPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateIntPoolRequest proto.InternalMessageInfo

func (m *CreateIntPoolRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *CreateIntPoolRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CreateIntPoolRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type DeleteIntPoolRequest struct {
	Pool string `protobuf:"bytes,1,opt,name=Pool,proto3" json:"pool"`
}

func (m *DeleteIntPoolRequest) Reset()      { *m = DeleteIntPoolRequest{} }
func (*DeleteIntPoolRequest) ProtoMessage() {}
func (*DeleteIntPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{8}
}
func (m *DeleteIntPoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteIntPoolRequest.Unmarshal(m, b)
}
func (m *DeleteIntPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteIntPoolRequest.Marshal(b, m, deterministic)
}
func (m *DeleteIntPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteIntPoolRequest.Merge(m, src)
}
func (m *DeleteIntPoolRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteIntPoolRequest.Size(m)
}
func (m *DeleteIntPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteIntPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteIntPoolRequest proto.InternalMessageInfo

func (m *DeleteIntPoolRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

type AllocateIntRequest struct {
	Pool  string `protobuf:"bytes,1,opt,name=Pool,proto3" json:"Pool,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=Owner,proto3" json:"owner"`
}

func (m *AllocateIntRequest) Reset()      { *m = AllocateIntRequest{} }
func (*AllocateIntRequest) ProtoMessage() {}
func (*AllocateIntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{9}
}
func (m *AllocateIntRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIntRequest.Unmarshal(m, b)
}
func (m *AllocateIntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIntRequest.Marshal(b, m, deterministic)
}
func (m *AllocateIntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIntRequest.Merge(m, src)
}
func (m *AllocateIntRequest) XXX_Size() int {
	return xxx_messageInfo_AllocateIntRequest.Size(m)
}
func (m *AllocateIntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIntRequest proto.InternalMessageInfo

func (m *AllocateIntRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *AllocateIntRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type AllocateIntResponse struct {
	Value int64 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *AllocateIntResponse) Reset()      { *m = AllocateIntResponse{} }
func (*AllocateIntResponse) ProtoMessage() {}
func (*AllocateIntResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{10}
}
func (m *AllocateIntResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIntResponse.Unmarshal(m, b)
}
func (m *AllocateIntResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIntResponse.Marshal(b, m, deterministic)
}
func (m *AllocateIntResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIntResponse.Merge(m, src)
}
func (m *AllocateIntResponse) XXX_Size() int {
	return xxx_messageInfo_AllocateIntResponse.Size(m)
}
func (m *AllocateIntResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIntResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIntResponse proto.InternalMessageInfo

func (m *AllocateIntResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SetIntRequest struct {
	Pool  string `protobuf:"bytes,1,opt,name=Pool,proto3" json:"Pool,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Owner string `protobuf:"bytes,3,opt,name=Owner,proto3" json:"owner"`
}

func (m *SetIntRequest) Reset()      { *m = SetIntRequest{} }
func (*SetIntRequest) ProtoMessage() {}
func (*SetIntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{11}
}
func (m *SetIntRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetIntRequest.Unmarshal(m, b)
}
func (m *SetIntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetIntRequest.Marshal(b, m, deterministic)
}
func (m *SetIntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetIntRequest.Merge(m, src)
}
func (m *SetIntRequest) XXX_Size() int {
	return xxx_messageInfo_SetIntRequest.Size(m)
}
func (m *SetIntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetIntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetIntRequest proto.InternalMessageInfo

func (m *SetIntRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *SetIntRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SetIntRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type DeallocateIntRequest struct {
	Pool  string `protobuf:"bytes,1,opt,name=Pool,proto3" json:"Pool,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *DeallocateIntRequest) Reset()      { *m = DeallocateIntRequest{} }
func (*DeallocateIntRequest) ProtoMessage() {}
func (*DeallocateIntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{12}
}
func (m *DeallocateIntRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeallocateIntRequest.Unmarshal(m, b)
}
func (m *DeallocateIntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeallocateIntRequest.Marshal(b, m, deterministic)
}
func (m *DeallocateIntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeallocateIntRequest.Merge(m, src)
}
func (m *DeallocateIntRequest) XXX_Size() int {
	return xxx_messageInfo_DeallocateIntRequest.Size(m)
}
func (m *DeallocateIntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeallocateIntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeallocateIntRequest proto.InternalMessageInfo

func (m *DeallocateIntRequest) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *DeallocateIntRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type KeyValuePair struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"key"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"value"`
}

func (m *KeyValuePair) Reset()      { *m = KeyValuePair{} }
func (*KeyValuePair) ProtoMessage() {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{13}
}
func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RetrieveValuesRequest struct {
	Keys []string `protobuf:"bytes,1,rep,name=Keys,proto3" json:"key"`
}

func (m *RetrieveValuesRequest) Reset()      { *m = RetrieveValuesRequest{} }
func (*RetrieveValuesRequest) ProtoMessage() {}
func (*RetrieveValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{14}
}
func (m *RetrieveValuesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetrieveValuesRequest.Unmarshal(m, b)
}
func (m *RetrieveValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetrieveValuesRequest.Marshal(b, m, deterministic)
}
func (m *RetrieveValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveValuesRequest.Merge(m, src)
}
func (m *RetrieveValuesRequest) XXX_Size() int {
	return xxx_messageInfo_RetrieveValuesRequest.Size(m)
}
func (m *RetrieveValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveValuesRequest proto.InternalMessageInfo

func (m *RetrieveValuesRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type RetrieveValuesResponse struct {
	Values []string `protobuf:"bytes,1,rep,name=Values,proto3" json:"value"`
}

func (m *RetrieveValuesResponse) Reset()      { *m = RetrieveValuesResponse{} }
func (*RetrieveValuesResponse) ProtoMessage() {}
func (*RetrieveValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{15}
}
func (m *RetrieveValuesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetrieveValuesResponse.Unmarshal(m, b)
}
func (m *RetrieveValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetrieveValuesResponse.Marshal(b, m, deterministic)
}
func (m *RetrieveValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveValuesResponse.Merge(m, src)
}
func (m *RetrieveValuesResponse) XXX_Size() int {
	return xxx_messageInfo_RetrieveValuesResponse.Size(m)
}
func (m *RetrieveValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveValuesResponse proto.InternalMessageInfo

func (m *RetrieveValuesResponse) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type RetrieveKVPsResponse struct {
	KeyValuePairs []*KeyValuePair `protobuf:"bytes,1,rep,name=value,proto3" json:"value"`
}

func (m *RetrieveKVPsResponse) Reset()      { *m = RetrieveKVPsResponse{} }
func (*RetrieveKVPsResponse) ProtoMessage() {}
func (*RetrieveKVPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{16}
}
func (m *RetrieveKVPsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetrieveKVPsResponse.Unmarshal(m, b)
}
func (m *RetrieveKVPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetrieveKVPsResponse.Marshal(b, m, deterministic)
}
func (m *RetrieveKVPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveKVPsResponse.Merge(m, src)
}
func (m *RetrieveKVPsResponse) XXX_Size() int {
	return xxx_messageInfo_RetrieveKVPsResponse.Size(m)
}
func (m *RetrieveKVPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveKVPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveKVPsResponse proto.InternalMessageInfo

func (m *RetrieveKVPsResponse) GetKeyValuePairs() []*KeyValuePair {
	if m != nil {
		return m.KeyValuePairs
	}
	return nil
}

type DeleteKeyRequest struct {
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"key"`
}

func (m *DeleteKeyRequest) Reset()      { *m = DeleteKeyRequest{} }
func (*DeleteKeyRequest) ProtoMessage() {}
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{17}
}
func (m *DeleteKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteKeyRequest.Unmarshal(m, b)
}
func (m *DeleteKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteKeyRequest.Marshal(b, m, deterministic)
}
func (m *DeleteKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteKeyRequest.Merge(m, src)
}
func (m *DeleteKeyRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteKeyRequest.Size(m)
}
func (m *DeleteKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteKeyRequest proto.InternalMessageInfo

func (m *DeleteKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type FQNameToIDRequest struct {
	FQName []string `protobuf:"bytes,1,rep,name=FQName,proto3" json:"fq_name"`
	Type   string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"type"`
}

func (m *FQNameToIDRequest) Reset()      { *m = FQNameToIDRequest{} }
func (*FQNameToIDRequest) ProtoMessage() {}
func (*FQNameToIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{18}
}
func (m *FQNameToIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FQNameToIDRequest.Unmarshal(m, b)
}
func (m *FQNameToIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FQNameToIDRequest.Marshal(b, m, deterministic)
}
func (m *FQNameToIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FQNameToIDRequest.Merge(m, src)
}
func (m *FQNameToIDRequest) XXX_Size() int {
	return xxx_messageInfo_FQNameToIDRequest.Size(m)
}
func (m *FQNameToIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FQNameToIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FQNameToIDRequest proto.InternalMessageInfo

func (m *FQNameToIDRequest) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FQNameToIDRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type FQNameToIDResponse struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"uuid"`
}

func (m *FQNameToIDResponse) Reset()      { *m = FQNameToIDResponse{} }
func (*FQNameToIDResponse) ProtoMessage() {}
func (*FQNameToIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{19}
}
func (m *FQNameToIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FQNameToIDResponse.Unmarshal(m, b)
}
func (m *FQNameToIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FQNameToIDResponse.Marshal(b, m, deterministic)
}
func (m *FQNameToIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FQNameToIDResponse.Merge(m, src)
}
func (m *FQNameToIDResponse) XXX_Size() int {
	return xxx_messageInfo_FQNameToIDResponse.Size(m)
}
func (m *FQNameToIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FQNameToIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FQNameToIDResponse proto.InternalMessageInfo

func (m *FQNameToIDResponse) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type IDToFQNameRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"uuid"`
}

func (m *IDToFQNameRequest) Reset()      { *m = IDToFQNameRequest{} }
func (*IDToFQNameRequest) ProtoMessage() {}
func (*IDToFQNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{20}
}
func (m *IDToFQNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDToFQNameRequest.Unmarshal(m, b)
}
func (m *IDToFQNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDToFQNameRequest.Marshal(b, m, deterministic)
}
func (m *IDToFQNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDToFQNameRequest.Merge(m, src)
}
func (m *IDToFQNameRequest) XXX_Size() int {
	return xxx_messageInfo_IDToFQNameRequest.Size(m)
}
func (m *IDToFQNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDToFQNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDToFQNameRequest proto.InternalMessageInfo

func (m *IDToFQNameRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type IDToFQNameResponse struct {
	FQName []string `protobuf:"bytes,1,rep,name=FQName,proto3" json:"fq_name"`
	Type   string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"type"`
}

func (m *IDToFQNameResponse) Reset()      { *m = IDToFQNameResponse{} }
func (*IDToFQNameResponse) ProtoMessage() {}
func (*IDToFQNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{21}
}
func (m *IDToFQNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDToFQNameResponse.Unmarshal(m, b)
}
func (m *IDToFQNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDToFQNameResponse.Marshal(b, m, deterministic)
}
func (m *IDToFQNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDToFQNameResponse.Merge(m, src)
}
func (m *IDToFQNameResponse) XXX_Size() int {
	return xxx_messageInfo_IDToFQNameResponse.Size(m)
}
func (m *IDToFQNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IDToFQNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IDToFQNameResponse proto.InternalMessageInfo

func (m *IDToFQNameResponse) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *IDToFQNameResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*UUIDs)(nil), "github.com.Juniper.asf.pkg.services.UUIDs")
	proto.RegisterType((*ListSpec)(nil), "github.com.Juniper.asf.pkg.services.ListSpec")
	proto.RegisterMapType((map[string]*UUIDs)(nil), "github.com.Juniper.asf.pkg.services.ListSpec.RefUuidsEntry")
	proto.RegisterType((*Filter)(nil), "github.com.Juniper.asf.pkg.services.Filter")
	proto.RegisterType((*RelaxRefRequest)(nil), "github.com.Juniper.asf.pkg.services.RelaxRefRequest")
	proto.RegisterType((*RelaxRefResponse)(nil), "github.com.Juniper.asf.pkg.services.RelaxRefResponse")
	proto.RegisterType((*GetIntOwnerRequest)(nil), "github.com.Juniper.asf.pkg.services.GetIntOwnerRequest")
	proto.RegisterType((*GetIntOwnerResponse)(nil), "github.com.Juniper.asf.pkg.services.GetIntOwnerResponse")
	proto.RegisterType((*CreateIntPoolRequest)(nil), "github.com.Juniper.asf.pkg.services.CreateIntPoolRequest")
	proto.RegisterType((*DeleteIntPoolRequest)(nil), "github.com.Juniper.asf.pkg.services.DeleteIntPoolRequest")
	proto.RegisterType((*AllocateIntRequest)(nil), "github.com.Juniper.asf.pkg.services.AllocateIntRequest")
	proto.RegisterType((*AllocateIntResponse)(nil), "github.com.Juniper.asf.pkg.services.AllocateIntResponse")
	proto.RegisterType((*SetIntRequest)(nil), "github.com.Juniper.asf.pkg.services.SetIntRequest")
	proto.RegisterType((*DeallocateIntRequest)(nil), "github.com.Juniper.asf.pkg.services.DeallocateIntRequest")
	proto.RegisterType((*KeyValuePair)(nil), "github.com.Juniper.asf.pkg.services.KeyValuePair")
	proto.RegisterType((*RetrieveValuesRequest)(nil), "github.com.Juniper.asf.pkg.services.RetrieveValuesRequest")
	proto.RegisterType((*RetrieveValuesResponse)(nil), "github.com.Juniper.asf.pkg.services.RetrieveValuesResponse")
	proto.RegisterType((*RetrieveKVPsResponse)(nil), "github.com.Juniper.asf.pkg.services.RetrieveKVPsResponse")
	proto.RegisterType((*DeleteKeyRequest)(nil), "github.com.Juniper.asf.pkg.services.DeleteKeyRequest")
	proto.RegisterType((*FQNameToIDRequest)(nil), "github.com.Juniper.asf.pkg.services.FQNameToIDRequest")
	proto.RegisterType((*FQNameToIDResponse)(nil), "github.com.Juniper.asf.pkg.services.FQNameToIDResponse")
	proto.RegisterType((*IDToFQNameRequest)(nil), "github.com.Juniper.asf.pkg.services.IDToFQNameRequest")
	proto.RegisterType((*IDToFQNameResponse)(nil), "github.com.Juniper.asf.pkg.services.IDToFQNameResponse")
}

func init() { proto.RegisterFile("base.proto", fileDescriptor_db1b6b0986796150) }

var fileDescriptor_db1b6b0986796150 = []byte{
	// 1386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x3b, 0x6f, 0xdb, 0xd6,
	0x17, 0x27, 0x2d, 0xeb, 0x75, 0x24, 0x39, 0xce, 0x8d, 0x93, 0xbf, 0xfe, 0x6a, 0x41, 0x1a, 0x4c,
	0x07, 0xa1, 0x41, 0x64, 0x44, 0xcd, 0x3b, 0x01, 0xda, 0x28, 0xb6, 0x53, 0x57, 0x69, 0xe3, 0x5e,
	0x3f, 0x06, 0xa3, 0x80, 0x41, 0x49, 0x57, 0x32, 0x63, 0x5a, 0x54, 0x48, 0x2a, 0xb1, 0x50, 0x14,
	0x08, 0xd0, 0xa5, 0x45, 0x97, 0xf6, 0x1b, 0x74, 0xec, 0x07, 0xe8, 0x07, 0xc8, 0xd8, 0x31, 0x63,
	0x26, 0x22, 0xa6, 0x37, 0x4f, 0x1d, 0x3b, 0x16, 0xf7, 0x41, 0x93, 0x8c, 0xec, 0x98, 0x0a, 0xd0,
	0x49, 0xf7, 0x9c, 0x7b, 0xde, 0xe7, 0x9e, 0xdf, 0xa1, 0x00, 0x5a, 0xba, 0x43, 0x6a, 0x03, 0xdb,
	0x72, 0x2d, 0x74, 0xb9, 0x67, 0xb8, 0x3b, 0xc3, 0x56, 0xad, 0x6d, 0xed, 0xd5, 0xbe, 0x1a, 0xf6,
	0x8d, 0x01, 0xb1, 0x6b, 0xba, 0xd3, 0xad, 0x0d, 0x76, 0x7b, 0x35, 0x87, 0xd8, 0xcf, 0x8d, 0x36,
	0x71, 0x2a, 0x73, 0x3d, 0xab, 0x67, 0x31, 0xf9, 0x05, 0x7a, 0xe2, 0xaa, 0x95, 0x8f, 0x7a, 0x96,
	0xd5, 0x33, 0xc9, 0x02, 0xa3, 0x5a, 0xc3, 0xee, 0x02, 0xd9, 0x1b, 0xb8, 0x23, 0x7e, 0xa9, 0x55,
	0x21, 0xbd, 0xb1, 0xb1, 0xb2, 0xe8, 0x20, 0x15, 0xd2, 0xc3, 0xa1, 0xd1, 0x71, 0xca, 0xf2, 0x7c,
	0xaa, 0x9a, 0x6f, 0xe4, 0x7d, 0x4f, 0xe5, 0x37, 0x98, 0xf3, 0xb5, 0x57, 0x19, 0xc8, 0x3d, 0x36,
	0x1c, 0x77, 0x6d, 0x40, 0xda, 0x08, 0x43, 0xb6, 0x6b, 0x98, 0x2e, 0xb1, 0xb9, 0x7c, 0xa1, 0x7e,
	0xa5, 0x96, 0x20, 0xc0, 0xda, 0x32, 0xd3, 0x69, 0x14, 0x7c, 0x4f, 0xcd, 0xf2, 0xb3, 0x83, 0x03,
	0x43, 0x34, 0x02, 0xd3, 0xd8, 0x33, 0xdc, 0xf2, 0xd4, 0xbc, 0x5c, 0x4d, 0xf1, 0x08, 0x1e, 0x53,
	0x06, 0xe6, 0x7c, 0xa4, 0x41, 0x66, 0x4f, 0xb7, 0x77, 0x89, 0x5d, 0x4e, 0xcd, 0xcb, 0xd5, 0x7c,
	0x03, 0x7c, 0x4f, 0xcd, 0x7c, 0xcd, 0x38, 0x58, 0xdc, 0x50, 0x99, 0x0e, 0x71, 0x75, 0xc3, 0x2c,
	0x4f, 0xcf, 0xcb, 0xd5, 0x1c, 0x97, 0x59, 0x64, 0x1c, 0x2c, 0x6e, 0xa8, 0xa3, 0xb6, 0x35, 0xec,
	0xbb, 0xe5, 0x34, 0x13, 0x61, 0x8e, 0x1e, 0x52, 0x06, 0xe6, 0x7c, 0x6a, 0xc4, 0xd9, 0xd1, 0x6d,
	0xd2, 0x29, 0x67, 0x42, 0x23, 0x6b, 0x8c, 0x83, 0xc5, 0x0d, 0xba, 0x01, 0x25, 0xb2, 0xdf, 0x36,
	0x87, 0x1d, 0xb2, 0xbd, 0x63, 0x93, 0xae, 0x53, 0xce, 0x32, 0xd1, 0x59, 0xdf, 0x53, 0x8b, 0x4b,
	0xfc, 0xe2, 0x4b, 0xca, 0xc7, 0x45, 0x12, 0xa1, 0xd0, 0x4d, 0x98, 0x19, 0xe8, 0x36, 0xe9, 0xbb,
	0xdb, 0xdd, 0x67, 0xdb, 0x7d, 0x7d, 0x8f, 0x94, 0x73, 0xac, 0xde, 0x4c, 0x6f, 0x95, 0xdd, 0x2c,
	0x7f, 0xfb, 0x8d, 0xbe, 0x47, 0x70, 0x91, 0xcb, 0x2d, 0x3f, 0xa3, 0x14, 0x5a, 0x80, 0x82, 0xd0,
	0x73, 0x47, 0x03, 0x52, 0xce, 0xb3, 0x02, 0xcc, 0xf8, 0x9e, 0x0a, 0x5c, 0x69, 0x7d, 0x34, 0x20,
	0x18, 0x06, 0xc7, 0x67, 0x54, 0x07, 0x61, 0x60, 0x9b, 0xb7, 0x15, 0x98, 0x9b, 0x73, 0xbe, 0xa7,
	0x16, 0xb8, 0x06, 0x6f, 0xae, 0xb0, 0xba, 0x41, 0x65, 0x68, 0x4e, 0x2d, 0xbd, 0xbd, 0x6b, 0x93,
	0xae, 0x50, 0x2a, 0x84, 0xb1, 0x35, 0xf4, 0xf6, 0x2e, 0x26, 0x5d, 0xae, 0x55, 0x14, 0x62, 0x5c,
	0xad, 0x0b, 0xf9, 0x50, 0xa5, 0xc8, 0x9e, 0xc3, 0xbd, 0x44, 0xcf, 0x21, 0x78, 0x4e, 0x35, 0x2c,
	0x4c, 0x2d, 0xf5, 0x5d, 0x7b, 0xd4, 0x28, 0xfa, 0x9e, 0x9a, 0x3b, 0xf6, 0x95, 0x3b, 0xf6, 0x53,
	0x87, 0xa2, 0xd5, 0x7a, 0x4a, 0xda, 0x41, 0x4a, 0xa5, 0x30, 0xa5, 0x27, 0x8c, 0x2f, 0x52, 0xe2,
	0x42, 0x5c, 0x47, 0x83, 0x4c, 0xd7, 0x20, 0x66, 0xc7, 0x29, 0xcf, 0x30, 0x69, 0xd6, 0xca, 0x65,
	0xc6, 0xc1, 0xe2, 0xa6, 0xd2, 0x83, 0x52, 0x2c, 0x00, 0x34, 0x0b, 0xa9, 0x5d, 0x32, 0x2a, 0xcb,
	0xb4, 0xc8, 0x98, 0x1e, 0xd1, 0x17, 0x90, 0x7e, 0xae, 0x9b, 0x43, 0xc2, 0xde, 0x66, 0xa1, 0xfe,
	0x69, 0xa2, 0xf4, 0xc4, 0xf8, 0x30, 0xc5, 0xbb, 0x53, 0xb7, 0x65, 0xed, 0x11, 0x64, 0xf8, 0xab,
	0x47, 0xff, 0x8f, 0x78, 0x68, 0x64, 0x7d, 0x4f, 0x4d, 0x35, 0xc9, 0x88, 0xbb, 0xd2, 0x20, 0xc3,
	0x34, 0x9c, 0xf2, 0x54, 0x18, 0xf1, 0x26, 0xe3, 0x60, 0x71, 0xa3, 0x3d, 0x85, 0x73, 0x98, 0x98,
	0xfa, 0x3e, 0x26, 0x5d, 0x4c, 0x9e, 0x0d, 0x89, 0xe3, 0xa2, 0x4f, 0x60, 0x9a, 0xfa, 0x13, 0x26,
	0x69, 0xcb, 0x18, 0x7d, 0xe4, 0xa9, 0xd3, 0xb4, 0x5a, 0x98, 0x51, 0xe8, 0x1a, 0x64, 0x45, 0x61,
	0x59, 0x26, 0xf9, 0xc6, 0xff, 0xe8, 0x28, 0x0a, 0xd6, 0x91, 0xa7, 0xd2, 0x62, 0x5f, 0x65, 0xf2,
	0x01, 0x53, 0xbb, 0x0d, 0xb3, 0xa1, 0x2f, 0x67, 0x60, 0xf5, 0x1d, 0x92, 0xcc, 0x99, 0xd6, 0x01,
	0xf4, 0x88, 0xb8, 0x2b, 0x7d, 0xf7, 0xc9, 0x8b, 0x3e, 0xb1, 0x23, 0x81, 0xae, 0x5a, 0x96, 0x19,
	0xd5, 0xa5, 0x34, 0xd5, 0x1d, 0x58, 0x96, 0x89, 0x19, 0x85, 0xaa, 0x90, 0xde, 0x3c, 0x2e, 0x78,
	0xaa, 0x81, 0xe8, 0x8c, 0x32, 0xc6, 0x91, 0xa7, 0xf2, 0x8a, 0x62, 0x4e, 0x6b, 0x9f, 0xc3, 0x85,
	0x98, 0x17, 0x11, 0x62, 0x15, 0xd2, 0x8c, 0x21, 0xfc, 0x30, 0x03, 0x8c, 0x41, 0x0d, 0x58, 0x4c,
	0x94, 0xd3, 0xda, 0x4f, 0x32, 0xcc, 0x3d, 0xb4, 0x89, 0xee, 0x92, 0x95, 0xbe, 0x4b, 0x9d, 0x4f,
	0x1c, 0xe9, 0x9a, 0xab, 0xdb, 0x6e, 0x34, 0x52, 0xc6, 0xa0, 0x8e, 0x1c, 0x7a, 0xc0, 0x9c, 0x46,
	0xf3, 0x90, 0x5a, 0xea, 0x77, 0x18, 0x78, 0xa5, 0xd8, 0xec, 0x52, 0xf2, 0xc8, 0x53, 0x53, 0xa4,
	0xdf, 0xc1, 0xf4, 0xac, 0xdd, 0x87, 0xb9, 0x45, 0x62, 0x92, 0x0f, 0x8b, 0x44, 0xfb, 0x0e, 0xd0,
	0x03, 0xd3, 0xb4, 0xda, 0x3c, 0x93, 0x40, 0xf7, 0xe3, 0x98, 0x6e, 0x2e, 0xd0, 0x0d, 0xa3, 0xe7,
	0x65, 0x9a, 0x3a, 0xab, 0x4c, 0x37, 0xe1, 0x42, 0xcc, 0xba, 0xa8, 0xb3, 0x1a, 0x34, 0x4a, 0x0e,
	0x51, 0x7b, 0x33, 0xda, 0x9f, 0x7d, 0x28, 0xad, 0xb1, 0xfe, 0x24, 0x0b, 0x48, 0x8d, 0x37, 0x7e,
	0xcc, 0x5e, 0x18, 0x71, 0xea, 0xac, 0x88, 0x37, 0x68, 0x35, 0xf5, 0x49, 0x2b, 0x72, 0x56, 0x00,
	0xda, 0x16, 0x14, 0x9b, 0x64, 0xc4, 0xce, 0xab, 0xba, 0x61, 0xd3, 0xb6, 0x36, 0x8f, 0x67, 0x79,
	0x46, 0xcc, 0x32, 0x6d, 0xeb, 0x2e, 0x1d, 0xe9, 0x26, 0x19, 0xc5, 0x1f, 0x73, 0xfe, 0x7d, 0x8f,
	0xf9, 0x3e, 0x5c, 0xc4, 0xc4, 0xb5, 0x0d, 0xf2, 0x9c, 0x88, 0x91, 0x17, 0x31, 0x5f, 0x86, 0xe9,
	0x26, 0x19, 0x05, 0xdb, 0x99, 0x62, 0x1e, 0xa3, 0x03, 0x37, 0x8c, 0xd0, 0x96, 0xe0, 0xd2, 0xbb,
	0xda, 0xa2, 0x4b, 0x57, 0x40, 0x40, 0x88, 0x30, 0x70, 0x21, 0x04, 0x95, 0x30, 0x06, 0xc1, 0xd0,
	0xbe, 0x87, 0xb9, 0xc0, 0x4c, 0x73, 0x73, 0x35, 0x34, 0xd2, 0x0e, 0x40, 0x90, 0xaf, 0xfc, 0x6b,
	0x89, 0x40, 0x30, 0x5a, 0xaa, 0x46, 0xc5, 0xf7, 0xd4, 0x52, 0x94, 0x13, 0xf1, 0xce, 0x7f, 0xb4,
	0xeb, 0x30, 0xcb, 0x47, 0x80, 0x02, 0xa2, 0x48, 0xfe, 0xcc, 0x0a, 0x6b, 0x3b, 0x70, 0x9e, 0xaf,
	0xcd, 0x75, 0x6b, 0x65, 0x31, 0x50, 0xbb, 0x0a, 0x19, 0xce, 0x14, 0x49, 0x5f, 0x64, 0xd8, 0xcf,
	0x38, 0x47, 0x9e, 0x9a, 0x15, 0x0b, 0x18, 0x0b, 0x16, 0x1d, 0x32, 0xba, 0x39, 0x45, 0x93, 0xd8,
	0x90, 0x51, 0x9a, 0x0e, 0x19, 0xdd, 0xb9, 0x98, 0x51, 0xda, 0x5d, 0x40, 0x51, 0x4f, 0x13, 0x01,
	0xe2, 0x1d, 0x38, 0xbf, 0xb2, 0xb8, 0x6e, 0x89, 0x05, 0x3f, 0x09, 0x70, 0x6b, 0x06, 0xa0, 0xa8,
	0xaa, 0x70, 0xfb, 0x5f, 0x64, 0x58, 0xff, 0x51, 0x86, 0x1c, 0x03, 0x7b, 0x53, 0xdf, 0x47, 0x2f,
	0xe8, 0x99, 0xa3, 0x3f, 0xba, 0x9e, 0xa8, 0xe1, 0xef, 0x2c, 0xa6, 0xca, 0x8d, 0x09, 0xb5, 0x78,
	0x6a, 0xf5, 0xdf, 0xd2, 0x90, 0x15, 0x28, 0x88, 0x5a, 0x50, 0x8a, 0x01, 0x34, 0xba, 0x93, 0xc8,
	0xe6, 0x49, 0xa0, 0x5e, 0xb9, 0x54, 0xe3, 0x9f, 0xc3, 0xb5, 0xe0, 0x73, 0xb8, 0xb6, 0x44, 0x3f,
	0x87, 0xd1, 0x4b, 0x19, 0x0a, 0x91, 0x3d, 0x82, 0x6e, 0x25, 0x72, 0x31, 0xbe, 0xdf, 0x2a, 0xb7,
	0x27, 0x57, 0x14, 0xdd, 0x6c, 0x41, 0x29, 0x86, 0xfe, 0x09, 0xd3, 0x3c, 0x69, 0x63, 0xbc, 0x37,
	0xcd, 0x08, 0x8c, 0x27, 0x4c, 0x73, 0x7c, 0xad, 0x24, 0x4c, 0xf3, 0xa4, 0x8d, 0xb1, 0x0e, 0x19,
	0xbe, 0x10, 0x50, 0x3d, 0x91, 0x8d, 0xd8, 0xf6, 0x38, 0x35, 0x31, 0x56, 0xbc, 0x08, 0xd8, 0x27,
	0x2e, 0xde, 0xf8, 0x82, 0x38, 0xcd, 0x47, 0xfd, 0xcf, 0x14, 0x14, 0x36, 0x1c, 0x62, 0x3f, 0xe8,
	0x91, 0xbe, 0xdb, 0xdc, 0x44, 0x5b, 0x50, 0x5a, 0x73, 0x2d, 0x9b, 0x04, 0x88, 0x86, 0x26, 0x87,
	0xc4, 0x53, 0xf3, 0xf9, 0x59, 0x86, 0x99, 0x38, 0x98, 0xa3, 0xbb, 0x09, 0x27, 0xe9, 0x84, 0xfd,
	0x51, 0xb9, 0xf7, 0x41, 0xba, 0xa2, 0x63, 0x3a, 0x14, 0xa3, 0x0b, 0x01, 0x9d, 0x12, 0x73, 0xe5,
	0xce, 0x44, 0x4e, 0x62, 0xbb, 0x65, 0x0b, 0xf2, 0xc7, 0xb0, 0x8f, 0x6e, 0x4c, 0xf0, 0xee, 0xc3,
	0x35, 0x71, 0x6a, 0xdb, 0x7e, 0x91, 0x01, 0x42, 0xcc, 0x46, 0x3f, 0xc4, 0xa8, 0x9b, 0xc9, 0xfe,
	0xb8, 0xbe, 0xbb, 0x5c, 0x2a, 0xb7, 0x26, 0xd6, 0x13, 0xc0, 0x46, 0xa3, 0x09, 0xa1, 0x9c, 0x46,
	0x13, 0xa1, 0x92, 0x45, 0x33, 0xb6, 0x44, 0x12, 0x46, 0x33, 0xbe, 0x41, 0x1a, 0xcb, 0xaf, 0x0f,
	0x14, 0xe9, 0xcd, 0x81, 0x22, 0xbd, 0x3d, 0x50, 0xa4, 0xbf, 0x0f, 0x14, 0xe9, 0x9f, 0x03, 0x45,
	0x7a, 0xe9, 0x2b, 0xf2, 0x1f, 0xbe, 0x22, 0xbd, 0xf2, 0x15, 0xe9, 0x2f, 0x5f, 0x91, 0x5e, 0xfb,
	0x8a, 0xf4, 0xd6, 0x57, 0xe4, 0x5f, 0x0f, 0x15, 0xe9, 0xf7, 0x43, 0x45, 0x7a, 0x7d, 0xa8, 0x48,
	0x6f, 0x0e, 0x15, 0x69, 0x2b, 0x17, 0x98, 0x6e, 0x65, 0x58, 0xcd, 0x3f, 0xfb, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xdf, 0x9e, 0x4e, 0xf1, 0xb4, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RefRelaxClient is the client API for RefRelax service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RefRelaxClient interface {
	RelaxRef(ctx context.Context, in *RelaxRefRequest, opts ...grpc.CallOption) (*RelaxRefResponse, error)
}

type refRelaxClient struct {
	cc *grpc.ClientConn
}

func NewRefRelaxClient(cc *grpc.ClientConn) RefRelaxClient {
	return &refRelaxClient{cc}
}

func (c *refRelaxClient) RelaxRef(ctx context.Context, in *RelaxRefRequest, opts ...grpc.CallOption) (*RelaxRefResponse, error) {
	out := new(RelaxRefResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.RefRelax/RelaxRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefRelaxServer is the server API for RefRelax service.
type RefRelaxServer interface {
	RelaxRef(context.Context, *RelaxRefRequest) (*RelaxRefResponse, error)
}

func RegisterRefRelaxServer(s *grpc.Server, srv RefRelaxServer) {
	s.RegisterService(&_RefRelax_serviceDesc, srv)
}

func _RefRelax_RelaxRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelaxRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefRelaxServer).RelaxRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.RefRelax/RelaxRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefRelaxServer).RelaxRef(ctx, req.(*RelaxRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RefRelax_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Juniper.asf.pkg.services.RefRelax",
	HandlerType: (*RefRelaxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelaxRef",
			Handler:    _RefRelax_RelaxRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}

// IntPoolClient is the client API for IntPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntPoolClient interface {
	CreateIntPool(ctx context.Context, in *CreateIntPoolRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetIntOwner(ctx context.Context, in *GetIntOwnerRequest, opts ...grpc.CallOption) (*GetIntOwnerResponse, error)
	DeleteIntPool(ctx context.Context, in *DeleteIntPoolRequest, opts ...grpc.CallOption) (*types.Empty, error)
	AllocateInt(ctx context.Context, in *AllocateIntRequest, opts ...grpc.CallOption) (*AllocateIntResponse, error)
	SetInt(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DeallocateInt(ctx context.Context, in *DeallocateIntRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type intPoolClient struct {
	cc *grpc.ClientConn
}

func NewIntPoolClient(cc *grpc.ClientConn) IntPoolClient {
	return &intPoolClient{cc}
}

func (c *intPoolClient) CreateIntPool(ctx context.Context, in *CreateIntPoolRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IntPool/CreateIntPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPoolClient) GetIntOwner(ctx context.Context, in *GetIntOwnerRequest, opts ...grpc.CallOption) (*GetIntOwnerResponse, error) {
	out := new(GetIntOwnerResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IntPool/GetIntOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPoolClient) DeleteIntPool(ctx context.Context, in *DeleteIntPoolRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IntPool/DeleteIntPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPoolClient) AllocateInt(ctx context.Context, in *AllocateIntRequest, opts ...grpc.CallOption) (*AllocateIntResponse, error) {
	out := new(AllocateIntResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IntPool/AllocateInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPoolClient) SetInt(ctx context.Context, in *SetIntRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IntPool/SetInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPoolClient) DeallocateInt(ctx context.Context, in *DeallocateIntRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IntPool/DeallocateInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntPoolServer is the server API for IntPool service.
type IntPoolServer interface {
	CreateIntPool(context.Context, *CreateIntPoolRequest) (*types.Empty, error)
	GetIntOwner(context.Context, *GetIntOwnerRequest) (*GetIntOwnerResponse, error)
	DeleteIntPool(context.Context, *DeleteIntPoolRequest) (*types.Empty, error)
	AllocateInt(context.Context, *AllocateIntRequest) (*AllocateIntResponse, error)
	SetInt(context.Context, *SetIntRequest) (*types.Empty, error)
	DeallocateInt(context.Context, *DeallocateIntRequest) (*types.Empty, error)
}

func RegisterIntPoolServer(s *grpc.Server, srv IntPoolServer) {
	s.RegisterService(&_IntPool_serviceDesc, srv)
}

func _IntPool_CreateIntPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPoolServer).CreateIntPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IntPool/CreateIntPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPoolServer).CreateIntPool(ctx, req.(*CreateIntPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPool_GetIntOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPoolServer).GetIntOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IntPool/GetIntOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPoolServer).GetIntOwner(ctx, req.(*GetIntOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPool_DeleteIntPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPoolServer).DeleteIntPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IntPool/DeleteIntPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPoolServer).DeleteIntPool(ctx, req.(*DeleteIntPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPool_AllocateInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPoolServer).AllocateInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IntPool/AllocateInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPoolServer).AllocateInt(ctx, req.(*AllocateIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPool_SetInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPoolServer).SetInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IntPool/SetInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPoolServer).SetInt(ctx, req.(*SetIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPool_DeallocateInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeallocateIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPoolServer).DeallocateInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IntPool/DeallocateInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPoolServer).DeallocateInt(ctx, req.(*DeallocateIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntPool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Juniper.asf.pkg.services.IntPool",
	HandlerType: (*IntPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIntPool",
			Handler:    _IntPool_CreateIntPool_Handler,
		},
		{
			MethodName: "GetIntOwner",
			Handler:    _IntPool_GetIntOwner_Handler,
		},
		{
			MethodName: "DeleteIntPool",
			Handler:    _IntPool_DeleteIntPool_Handler,
		},
		{
			MethodName: "AllocateInt",
			Handler:    _IntPool_AllocateInt_Handler,
		},
		{
			MethodName: "SetInt",
			Handler:    _IntPool_SetInt_Handler,
		},
		{
			MethodName: "DeallocateInt",
			Handler:    _IntPool_DeallocateInt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}

// UserAgentKVClient is the client API for UserAgentKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserAgentKVClient interface {
	StoreKeyValue(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*types.Empty, error)
	RetrieveValues(ctx context.Context, in *RetrieveValuesRequest, opts ...grpc.CallOption) (*RetrieveValuesResponse, error)
	RetrieveKVPs(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*RetrieveKVPsResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type userAgentKVClient struct {
	cc *grpc.ClientConn
}

func NewUserAgentKVClient(cc *grpc.ClientConn) UserAgentKVClient {
	return &userAgentKVClient{cc}
}

func (c *userAgentKVClient) StoreKeyValue(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.UserAgentKV/StoreKeyValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentKVClient) RetrieveValues(ctx context.Context, in *RetrieveValuesRequest, opts ...grpc.CallOption) (*RetrieveValuesResponse, error) {
	out := new(RetrieveValuesResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.UserAgentKV/RetrieveValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentKVClient) RetrieveKVPs(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*RetrieveKVPsResponse, error) {
	out := new(RetrieveKVPsResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.UserAgentKV/RetrieveKVPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentKVClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.UserAgentKV/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAgentKVServer is the server API for UserAgentKV service.
type UserAgentKVServer interface {
	StoreKeyValue(context.Context, *KeyValuePair) (*types.Empty, error)
	RetrieveValues(context.Context, *RetrieveValuesRequest) (*RetrieveValuesResponse, error)
	RetrieveKVPs(context.Context, *types.Empty) (*RetrieveKVPsResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*types.Empty, error)
}

func RegisterUserAgentKVServer(s *grpc.Server, srv UserAgentKVServer) {
	s.RegisterService(&_UserAgentKV_serviceDesc, srv)
}

func _UserAgentKV_StoreKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentKVServer).StoreKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.UserAgentKV/StoreKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentKVServer).StoreKeyValue(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentKV_RetrieveValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentKVServer).RetrieveValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.UserAgentKV/RetrieveValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentKVServer).RetrieveValues(ctx, req.(*RetrieveValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentKV_RetrieveKVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentKVServer).RetrieveKVPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.UserAgentKV/RetrieveKVPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentKVServer).RetrieveKVPs(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentKV_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentKVServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.UserAgentKV/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentKVServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAgentKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Juniper.asf.pkg.services.UserAgentKV",
	HandlerType: (*UserAgentKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreKeyValue",
			Handler:    _UserAgentKV_StoreKeyValue_Handler,
		},
		{
			MethodName: "RetrieveValues",
			Handler:    _UserAgentKV_RetrieveValues_Handler,
		},
		{
			MethodName: "RetrieveKVPs",
			Handler:    _UserAgentKV_RetrieveKVPs_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _UserAgentKV_DeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}

// FQNameToIDClient is the client API for FQNameToID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FQNameToIDClient interface {
	FQNameToID(ctx context.Context, in *FQNameToIDRequest, opts ...grpc.CallOption) (*FQNameToIDResponse, error)
}

type fQNameToIDClient struct {
	cc *grpc.ClientConn
}

func NewFQNameToIDClient(cc *grpc.ClientConn) FQNameToIDClient {
	return &fQNameToIDClient{cc}
}

func (c *fQNameToIDClient) FQNameToID(ctx context.Context, in *FQNameToIDRequest, opts ...grpc.CallOption) (*FQNameToIDResponse, error) {
	out := new(FQNameToIDResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.FQNameToID/FQNameToID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FQNameToIDServer is the server API for FQNameToID service.
type FQNameToIDServer interface {
	FQNameToID(context.Context, *FQNameToIDRequest) (*FQNameToIDResponse, error)
}

func RegisterFQNameToIDServer(s *grpc.Server, srv FQNameToIDServer) {
	s.RegisterService(&_FQNameToID_serviceDesc, srv)
}

func _FQNameToID_FQNameToID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FQNameToIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FQNameToIDServer).FQNameToID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.FQNameToID/FQNameToID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FQNameToIDServer).FQNameToID(ctx, req.(*FQNameToIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FQNameToID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Juniper.asf.pkg.services.FQNameToID",
	HandlerType: (*FQNameToIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FQNameToID",
			Handler:    _FQNameToID_FQNameToID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}

// IDToFQNameClient is the client API for IDToFQName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDToFQNameClient interface {
	IDToFQName(ctx context.Context, in *IDToFQNameRequest, opts ...grpc.CallOption) (*IDToFQNameResponse, error)
}

type iDToFQNameClient struct {
	cc *grpc.ClientConn
}

func NewIDToFQNameClient(cc *grpc.ClientConn) IDToFQNameClient {
	return &iDToFQNameClient{cc}
}

func (c *iDToFQNameClient) IDToFQName(ctx context.Context, in *IDToFQNameRequest, opts ...grpc.CallOption) (*IDToFQNameResponse, error) {
	out := new(IDToFQNameResponse)
	err := c.cc.Invoke(ctx, "/github.com.Juniper.asf.pkg.services.IDToFQName/IDToFQName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDToFQNameServer is the server API for IDToFQName service.
type IDToFQNameServer interface {
	IDToFQName(context.Context, *IDToFQNameRequest) (*IDToFQNameResponse, error)
}

func RegisterIDToFQNameServer(s *grpc.Server, srv IDToFQNameServer) {
	s.RegisterService(&_IDToFQName_serviceDesc, srv)
}

func _IDToFQName_IDToFQName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDToFQNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDToFQNameServer).IDToFQName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Juniper.asf.pkg.services.IDToFQName/IDToFQName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDToFQNameServer).IDToFQName(ctx, req.(*IDToFQNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDToFQName_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Juniper.asf.pkg.services.IDToFQName",
	HandlerType: (*IDToFQNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IDToFQName",
			Handler:    _IDToFQName_IDToFQName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}

func (m *UUIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UUIDs) > 0 {
		for _, s := range m.UUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *ListSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovBase(uint64(m.Limit))
	}
	l = len(m.Marker)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Detail {
		n += 2
	}
	if m.Count {
		n += 2
	}
	if m.Shared {
		n += 2
	}
	if m.ExcludeHrefs {
		n += 2
	}
	if len(m.ParentFQName) > 0 {
		for _, s := range m.ParentFQName {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.ParentUUIDs) > 0 {
		for _, s := range m.ParentUUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if len(m.BackRefUUIDs) > 0 {
		for _, s := range m.BackRefUUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if len(m.RefUUIDs) > 0 {
		for k, v := range m.RefUUIDs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBase(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBase(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBase(uint64(mapEntrySize))
		}
	}
	if len(m.ObjectUUIDs) > 0 {
		for _, s := range m.ObjectUUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *RelaxRefRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.RefUUID)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *RelaxRefResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *GetIntOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovBase(uint64(m.Value))
	}
	return n
}

func (m *GetIntOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *CreateIntPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovBase(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovBase(uint64(m.End))
	}
	return n
}

func (m *DeleteIntPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *AllocateIntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *AllocateIntResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovBase(uint64(m.Value))
	}
	return n
}

func (m *SetIntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovBase(uint64(m.Value))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *DeallocateIntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovBase(uint64(m.Value))
	}
	return n
}

func (m *KeyValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *RetrieveValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *RetrieveValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *RetrieveKVPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyValuePairs) > 0 {
		for _, e := range m.KeyValuePairs {
			l = e.Size()
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *DeleteKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *FQNameToIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *FQNameToIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *IDToFQNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *IDToFQNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func sovBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UUIDs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UUIDs{`,
		`UUIDs:` + fmt.Sprintf("%v", this.UUIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForRefUUIDs := make([]string, 0, len(this.RefUUIDs))
	for k, _ := range this.RefUUIDs {
		keysForRefUUIDs = append(keysForRefUUIDs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRefUUIDs)
	mapStringForRefUUIDs := "map[string]*UUIDs{"
	for _, k := range keysForRefUUIDs {
		mapStringForRefUUIDs += fmt.Sprintf("%v: %v,", k, this.RefUUIDs[k])
	}
	mapStringForRefUUIDs += "}"
	s := strings.Join([]string{`&ListSpec{`,
		`Filters:` + strings.Replace(fmt.Sprintf("%v", this.Filters), "Filter", "Filter", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Marker:` + fmt.Sprintf("%v", this.Marker) + `,`,
		`Detail:` + fmt.Sprintf("%v", this.Detail) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Shared:` + fmt.Sprintf("%v", this.Shared) + `,`,
		`ExcludeHrefs:` + fmt.Sprintf("%v", this.ExcludeHrefs) + `,`,
		`ParentFQName:` + fmt.Sprintf("%v", this.ParentFQName) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUIDs:` + fmt.Sprintf("%v", this.ParentUUIDs) + `,`,
		`BackRefUUIDs:` + fmt.Sprintf("%v", this.BackRefUUIDs) + `,`,
		`RefUUIDs:` + mapStringForRefUUIDs + `,`,
		`ObjectUUIDs:` + fmt.Sprintf("%v", this.ObjectUUIDs) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Filter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Filter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RelaxRefRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RelaxRefRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`RefUUID:` + fmt.Sprintf("%v", this.RefUUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RelaxRefResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RelaxRefResponse{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetIntOwnerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetIntOwnerRequest{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetIntOwnerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetIntOwnerResponse{`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateIntPoolRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateIntPoolRequest{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteIntPoolRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteIntPoolRequest{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocateIntRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateIntRequest{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocateIntResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateIntResponse{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetIntRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetIntRequest{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeallocateIntRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeallocateIntRequest{`,
		`Pool:` + fmt.Sprintf("%v", this.Pool) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValuePair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValuePair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveValuesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveValuesRequest{`,
		`Keys:` + fmt.Sprintf("%v", this.Keys) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveValuesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveValuesResponse{`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveKVPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveKVPsResponse{`,
		`KeyValuePairs:` + strings.Replace(fmt.Sprintf("%v", this.KeyValuePairs), "KeyValuePair", "KeyValuePair", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteKeyRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FQNameToIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FQNameToIDRequest{`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FQNameToIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FQNameToIDResponse{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IDToFQNameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IDToFQNameRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IDToFQNameResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IDToFQNameResponse{`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBase(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
