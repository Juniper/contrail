package services

import (
	"context"

	"github.com/Juniper/asf/pkg/auth"
	"github.com/Juniper/asf/pkg/rbac"
	"github.com/Juniper/asf/pkg/services/baseservices"

	models "{{ modelsImportPath }}"
)

// RBACService will RBAC check on resource opeations.
type RBACService struct {
	BaseService
	ReadService  ReadService
	AAAMode      string
	AccessGetter AccessGetter
}

func (service *ContrailService) GetAPIAccessLists(ctx context.Context) []*rbac.APIAccessList {
	listRequest := &ListAPIAccessListRequest {
		Spec: &baseservices.ListSpec{},
	}
	if result, err := service.ListAPIAccessList(ctx, listRequest); err == nil {
		return models.ToRBACAPIAcesssList(result.APIAccessLists)
	}
	return nil
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (service *ContrailService) Get{{ schema.JSONSchema.GoName }}PermType2(ctx context.Context, uuid string) *rbac.PermType2 {
	listRequest := &Get{{ schema.JSONSchema.GoName }}Request{
		ID: uuid,
	}
	if result, err := service.Get{{ schema.JSONSchema.GoName }}(ctx, listRequest); err == nil {
		return models.ToRBACPermType2(result.{{ schema.JSONSchema.GoName }}.GetPerms2())
	}
	return nil
}
{% endif %}{% endfor %}

type AccessGetter interface {
	GetAPIAccessLists(ctx context.Context)	[]*rbac.APIAccessList
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	Get{{ schema.JSONSchema.GoName }}PermType2(ctx context.Context, uuid string) *rbac.PermType2
{% endif %}{% endfor %}
}

func (service *RBACService) getAllAPIAccessLists(ctx context.Context) []*rbac.APIAccessList {
	return service.AccessGetter.GetAPIAccessLists(auth.NoAuth(ctx))
}


{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func (r *RBACService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {
    model := request.{{ schema.JSONSchema.GoName }}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(),rbac.ActionCreate);
    if err != nil {
        return nil,err
    }
    if  !allowed  {
        if err := rbac.CheckPermissions(ctx, r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionCreate) ; err != nil {
		    return nil,err
	    }
	}
    return r.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
	model := request.{{ schema.JSONSchema.GoName }}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(), rbac.ActionUpdate);
    if err != nil {
        return nil,err
    }

    if  !allowed  {
        if err := rbac.CheckPermissions(ctx, r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionUpdate); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,model.UUID )
	    if err := rbac.CheckObjectPermissions(ctx, perms2,
		    r.AAAMode,model.Kind(),rbac.ActionUpdate) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Delete{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Delete{{ schema.JSONSchema.GoName }}Request,
) (*Delete{{ schema.JSONSchema.GoName }}Response, error) {

	model := models.{{ schema.JSONSchema.GoName }}{}
    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(), rbac.ActionDelete);
    if err != nil {
        return nil,err
    }

    if  !allowed  {
        if err := rbac.CheckPermissions(ctx, r.getAllAPIAccessLists(ctx),
		    r.AAAMode, model.Kind(), rbac.ActionDelete); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,request.GetID())
	    if err := rbac.CheckObjectPermissions(ctx, perms2,
		    r.AAAMode, model.Kind(), rbac.ActionDelete) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Get{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Get{{ schema.JSONSchema.GoName }}Request,
) (*Get{{ schema.JSONSchema.GoName }}Response, error) {

	model := models.{{ schema.JSONSchema.GoName }}{}
    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(), rbac.ActionRead);
    if err != nil {
        return nil,err
    }

    if  !allowed  {

        if err := rbac.CheckPermissions(ctx, r.getAllAPIAccessLists(ctx),
		    r.AAAMode, model.Kind(), rbac.ActionRead); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,request.GetID())
	    if err := rbac.CheckObjectPermissions(ctx, perms2,
		    r.AAAMode, model.Kind(), rbac.ActionRead) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.Get{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) List{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *List{{ schema.JSONSchema.GoName }}Request,
) (*List{{ schema.JSONSchema.GoName }}Response, error) {

	model := models.{{ schema.JSONSchema.GoName }}{}
    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(), rbac.ActionRead);

    if err != nil {
        return nil,err
    }

    if  !allowed  {

        if err := rbac.CheckPermissions(ctx, r.getAllAPIAccessLists(ctx),
		    r.AAAMode, model.Kind(), rbac.ActionRead); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx, model.UUID)
	    if err := rbac.CheckObjectPermissions(ctx, perms2,
		    r.AAAMode, model.Kind(), rbac.ActionRead) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.List{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (service *RBACService) Get{{ schema.JSONSchema.GoName }}Perms2(ctx context.Context, uuid string) *rbac.PermType2 {
	return service.AccessGetter.Get{{ schema.JSONSchema.GoName }}PermType2(auth.NoAuth(ctx), uuid)
}

{% endif %}{% endfor %}
