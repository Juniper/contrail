package services

import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/Juniper/asf/pkg/apiserver"
	"github.com/Juniper/asf/pkg/errutil"
	"github.com/Juniper/asf/pkg/services"
	"github.com/labstack/echo"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"

	asfmodels "github.com/Juniper/asf/pkg/models"
	models "{{ modelsImportPath }}"
)

// TODO(dfurman): write tests

// Chain setup chain of services.
func Chain(services ...Service) {
	if len(services) < 2 {
		return
	}
	previous := services[0]
	for _, current := range services[1:] {
		previous.SetNext(current)
		previous = current
	}
}

// InternalContextWriteServiceWrapper is a WriteService that marks it requests
// with internal request context.
type InternalContextWriteServiceWrapper struct {
	WriteService
}

// RefUpdateToUpdateService is a service that promotes CreateRef and DeleteRef
// methods to Update method by fetching the object and updating reference
// field with fieldmask applied.
type RefUpdateToUpdateService struct {
	BaseService

	ReadService       ReadService
	InTransactionDoer services.InTransactionDoer
}

//EventProcessor can handle events on generic way.
type EventProcessor interface {
	Process(ctx context.Context, event *Event) (*Event, error)
}

//EventProducerService can dispatch method call for event processor.
type EventProducerService struct {
	BaseService
	Processor EventProcessor
	Timeout   time.Duration
}

//ServiceEventProcessor dispatch event to method call.
type ServiceEventProcessor struct {
	Service Service
}

//Process processes event.
func (p *ServiceEventProcessor) Process(ctx context.Context, event *Event) (*Event, error) {
	return event.Process(ctx, p.Service)
}

// FQNameCache event processor with fqName cache.
type FQNameCache struct {
	EventProcessor
	idToFQName map[string][]string
}

// NewFQNameCache returns new event processor with fqName cache.
func NewFQNameCache(p EventProcessor) *FQNameCache {
	return &FQNameCache{
		EventProcessor: p,
		idToFQName:     map[string][]string{},
	}
}

// Process updates cache, adds fqNames to refEvents and processes the event with the EventProcessor.
func (p *FQNameCache) Process(ctx context.Context, event *Event) (*Event, error) {
	p.updateFQNameCache(event)

	if err := p.sanitizeCreateRefEvent(event); err != nil {
		return nil, errors.Wrapf(err, "failed to sanitize reference fqName, event: %v", event)
	}

	return p.EventProcessor.Process(ctx, event)
}

func (p *FQNameCache) updateFQNameCache(event *Event) {
	switch request := event.Unwrap().(type) {
	case services.ResourceEvent:
		r := request.GetResource()
		p.idToFQName[r.GetUUID()] = r.GetFQName()
	case DeleteRequest:
		delete(p.idToFQName, request.GetID())
	}
}

func (p *FQNameCache) sanitizeCreateRefEvent(event *Event) error {
	refRequest, ok := event.Unwrap().(CreateRefRequest)
	if !ok {
		return nil
	}
	reference := refRequest.GetReference()
	fqName, ok := p.idToFQName[reference.GetUUID()]
	if !ok {
		return errors.Errorf("failed to fetched reference fq_name for uuid: '%v'", reference.GetUUID())
	}
	reference.SetTo(fqName)
	return nil
}

// EventListProcessor processes event lists in transaction.
type EventListProcessor struct {
	EventProcessor
	InTransactionDoer services.InTransactionDoer
}

// ProcessList processes list of events.
func (p *EventListProcessor) ProcessList(ctx context.Context, e *EventList) (*EventList, error) {
	var results []*Event
	if err := p.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		for _, event := range e.Events {
			r, err := p.Process(ctx, event)
			if err != nil {
				return err
			}
			results = append(results, r)
		}
		return nil
	}); err != nil {
		return nil, err
	}
	return &EventList{
		Events: results,
	}, nil
}

// ContrailService implementation.
type ContrailService struct {
	BaseService

	DBService          ReadService
	MetadataGetter     services.MetadataGetter
	TypeValidator      *models.TypeValidator
	InTransactionDoer  services.InTransactionDoer
}

// UpdateRef performs a RefUpdate.
func (service *ContrailService) UpdateRef(ctx context.Context, req *services.RefUpdate) error {
	e, err := NewRefUpdateEvent(RefUpdateOption{
		ReferenceType: asfmodels.ReferenceKind(req.Type, req.RefType),
		FromUUID:      req.UUID,
		ToUUID:        req.RefUUID,
		Operation:     req.Operation,
		Attr:          req.Attr,
	})
	if err != nil {
		return errutil.ErrorBadRequest(err.Error())
	}
	_, err = e.Process(ctx, service)
	return err
}

// RESTSync handles Sync API request.
func (service *ContrailService) RESTSync(c echo.Context) error {
	events := &EventList{}
	if err := c.Bind(events); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("invalid JSON format: %v", err))
	}

	if len(events.Events) == 0 {
		return c.JSON(http.StatusOK, events.Events)
	}

	events, err := sortEvents(c.Request().Context(), service, events)
	if err != nil {
		return errutil.ToHTTPError(err)
	}

	responses, err := events.Process(c.Request().Context(), service, service.InTransactionDoer)
	if err != nil {
		return errutil.ToHTTPError(err)
	}
	return c.JSON(http.StatusOK, responses.Events)
}

func sortEvents(ctx context.Context, service *ContrailService, events *EventList) (*EventList, error) {
	switch events.OperationType() {
	case services.OperationDelete:
		return sortDelete(ctx, service, events)
	case services.OperationCreate, services.OperationMixed:
		return sortMixed(events)
	default:
		return events, nil
	}
}

func sortDelete(ctx context.Context, service *ContrailService, events *EventList) (*EventList, error) {
	refMap, err := getRefMapFromObjects(ctx, service, events.Events)
	if err != nil {
		return nil, err
	}
	return syncSort(events, refMap)
}

func getRefMapFromObjects(
		ctx context.Context, service *ContrailService, events []*Event,
) (map[*Event]asfmodels.References, error) {
	refMap := make(map[*Event]asfmodels.References)
	for i, ev := range events {
		obj, _, err := GetObjectAndType(ctx, ev.GetUUID(), service.MetadataGetter, service)
		if err != nil {
			return nil, errors.Wrapf(err,
				"failed to retrieve object for event at index: %v, operation: '%v', kind '%v', uuid '%v'",
				i, ev.Operation(), ev.Kind(), ev.GetUUID())
		}
		refMap[ev] = obj.GetReferences()
		if parentRef := asfmodels.ExtractParent(obj); parentRef != nil {
			refMap[ev] = append(refMap[ev], parentRef)
		}
	}
	return refMap, nil
}

// GetObjectAndType retrieves an object and its type by UUID.
func GetObjectAndType(
	ctx context.Context,
	uuid string,
	mg services.MetadataGetter,
	readService ReadService,
) (asfmodels.Object, string, error) {
	m, err := mg.GetMetadata(ctx, asfmodels.UUIDMetadata(uuid))
	if err != nil {
		return nil, "", errors.Wrapf(err, "error getting type for provided UUID: %v", uuid)
	}

	o, err := GetObject(ctx, readService, m.Type, uuid)
	if err != nil {
		return nil, "", errors.Wrapf(err, "error getting %v with UUID = %v", m.Type, uuid)
	}
	return o, m.Type, nil
}

func syncSort(events *EventList, refMap map[*Event]asfmodels.References) (*EventList, error) {
	g := NewEventGraph(events.Events, refMap)
	if g.HasCycle() {
		return events, errors.New("cycle found in reference graph")
	}

	if !g.IsSortRequired(events, refMap) {
		return events, nil
	}

	return g.SortEvents(), nil
}

func sortMixed(events *EventList) (*EventList, error) {
	createsList, updatesList, deletesList := events.separateListByOperation()

	if len(deletesList.Events) != 0 {
		logrus.Warn("Sort for events mixed with deletes is not supported.")
		return events, nil
	}

	if len(createsList.Events) != 0 {
		var err error
		refMap := getRefMapFromEvents(createsList.Events)
		events, err = syncSort(createsList, refMap)
		if err != nil {
			return nil, err
		}
	}

	if len(updatesList.Events) != 0 {
		events.Events = append(events.Events, updatesList.Events...)
	}
	return events, nil
}

func (e *EventList) separateListByOperation() (*EventList, *EventList, *EventList) {
	createList, updateList, deleteList := &EventList{}, &EventList{}, &EventList{}
	for _, event := range e.Events {
		switch event.Operation() {
		case services.OperationCreate:
			createList.Events = append(createList.Events, event)
		case services.OperationUpdate:
			updateList.Events = append(updateList.Events, event)
		case services.OperationDelete:
			deleteList.Events = append(deleteList.Events, event)
		}
	}
	return createList, updateList, deleteList
}

func getRefMapFromEvents(events []*Event) map[*Event]asfmodels.References {
	refMap := map[*Event]asfmodels.References{}
	for _, ev := range events {
		refMap[ev] = ev.getReferences()
	}
	return refMap
}

// RegisterHTTPAPI registers REST API and action endpoints.
func (service *ContrailService) RegisterHTTPAPI(r apiserver.HTTPRouter) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	r.POST(
		"{{ schema.Prefix }}{{ schema.PluralPath }}",
		service.RESTCreate{{ schema.JSONSchema.GoName }},
		apiserver.WithNoHomepageMethod(),
		apiserver.WithHomepageName("{{ schema.Path }}"),
		apiserver.WithHomepageType(apiserver.CollectionEndpoint),
	)
	r.GET(
		"{{ schema.Prefix }}{{ schema.PluralPath }}",
		service.RESTList{{ schema.JSONSchema.GoName }},
		apiserver.WithNoHomepageMethod(),
		apiserver.WithHomepageName("{{ schema.Path }}"),
		apiserver.WithHomepageType(apiserver.CollectionEndpoint),
	)

	r.PUT(
		"{{ schema.Prefix }}{{ schema.Path }}/:id",
		service.RESTUpdate{{ schema.JSONSchema.GoName }},
		apiserver.WithNoHomepageMethod(),
		apiserver.WithHomepageName("{{ schema.Path }}"),
	)
	r.GET(
		"{{ schema.Prefix }}{{ schema.Path }}/:id",
		service.RESTGet{{ schema.JSONSchema.GoName }},
		apiserver.WithNoHomepageMethod(),
		apiserver.WithHomepageName("{{ schema.Path }}"),
	)
	r.DELETE(
		"{{ schema.Prefix }}{{ schema.Path }}/:id",
		service.RESTDelete{{ schema.JSONSchema.GoName }},
		apiserver.WithNoHomepageMethod(),
		apiserver.WithHomepageName("{{ schema.Path }}"),
	)

{% endif %}{% endfor %}

	r.POST(services.SyncPath, service.RESTSync)
}

// RegisterGRPCAPI registers GRPC services.
func (service *ContrailService) RegisterGRPCAPI(r apiserver.GRPCRouter) {
	r.RegisterService(&_ContrailService_serviceDesc, service)
}

// GetObject retrieves object dynamically from ReadService by its schema ID and UUID.
func GetObject(ctx context.Context, rs ReadService, typeName, uuid string) (asfmodels.Object, error) {
	return getObject(ctx, rs, typeName, uuid, nil)
}

func getObject(ctx context.Context, rs ReadService, typeName, uuid string, fields []string) (asfmodels.Object, error) {
	kind := strings.Replace(typeName, "_", "-", -1)
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	case "{{ schema.TypeName }}":
		resp, err := rs.Get{{ schema.JSONSchema.GoName }}(ctx, &Get{{ schema.JSONSchema.GoName }}Request{ID: uuid, Fields: fields})
		return resp.Get{{ schema.JSONSchema.GoName }}(), err
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("unknown type provided: %v", kind)
}
