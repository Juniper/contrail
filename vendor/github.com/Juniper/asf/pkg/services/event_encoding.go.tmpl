package services

import (
	"github.com/pkg/errors"
	"github.com/gogo/protobuf/types"

	"github.com/Juniper/asf/pkg/models/basemodels"
	"github.com/Juniper/asf/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

// GetRequest underlying request.
func (e *Event_Create{{ schema.JSONSchema.GoName }}Request) GetRequest() CreateRequest {
	return e.Create{{ schema.JSONSchema.GoName }}Request
}

// GetResource underlying request.
func (r *Create{{ schema.JSONSchema.GoName }}Request) GetResource() basemodels.Object {
	return r.Get{{ schema.JSONSchema.GoName }}()
}

// SetFieldMask sets fieldMask of the event.
func (r *Create{{ schema.JSONSchema.GoName }}Request) SetFieldMask(mask types.FieldMask) {
	r.FieldMask = mask
}

// isCreateRequest determines create request.
func (r *Create{{ schema.JSONSchema.GoName }}Request) isCreateRequest() {}

// Operation returns operation that is performed by the request.
func (r *Create{{ schema.JSONSchema.GoName }}Request) Operation() string {
	return OperationCreate
}

// GetRequest underlying request.
func (e *Event_Update{{ schema.JSONSchema.GoName }}Request) GetRequest() UpdateRequest {
	return e.Update{{ schema.JSONSchema.GoName }}Request
}

// GetResource underlying request.
func (r *Update{{ schema.JSONSchema.GoName }}Request) GetResource() basemodels.Object {
	return r.Get{{ schema.JSONSchema.GoName }}()
}

// SetFieldMask sets fieldMask of the event.
func (r *Update{{ schema.JSONSchema.GoName }}Request) SetFieldMask(mask types.FieldMask) {
	r.FieldMask = mask
}

// isUpdateRequest determines update request.
func (r *Update{{ schema.JSONSchema.GoName }}Request) isUpdateRequest() {}

// Operation returns operation that is performed by the request.
func (r *Update{{ schema.JSONSchema.GoName }}Request) Operation() string {
	return OperationUpdate
}

// GetRequest underlying request.
func (e *Event_Delete{{ schema.JSONSchema.GoName }}Request) GetRequest() DeleteRequest {
	return e.Delete{{ schema.JSONSchema.GoName }}Request
}

// SetID sets id of the event.
func (r *Delete{{ schema.JSONSchema.GoName }}Request) SetID(id string) {
	r.ID = id
}

// Kind returns underlying resource kind.
func (r *Delete{{ schema.JSONSchema.GoName }}Request) Kind() string {
	return "{{ schema.TypeName }}"
}

// isDeleteRequest determines delete request.
func (r *Delete{{ schema.JSONSchema.GoName }}Request) isDeleteRequest() {}

// Operation returns operation that is performed by the request.
func (r *Delete{{ schema.JSONSchema.GoName }}Request) Operation() string {
	return OperationDelete
}

{% for _, reference in schema.References %}
{% set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}

// GetRequest returns underlying request.
func (r *Event_Create{{ refType }}Request) GetRequest() CreateRefRequest {
	return r.Create{{ refType }}Request
}

// isCreateRefRequest determines delete request.
func (r *Create{{ refType }}Request) isCreateRefRequest() {}

// SetID sets referencing object's uuid.
func (r *Create{{ refType }}Request) SetID(id string) {
	r.ID = id
}

// GetReference returns reference.
func (r *Create{{ refType }}Request) GetReference() basemodels.Reference {
	return r.Get{{ refType }}()
}

// Operation returns operation that is performed by the request.
func (r *Create{{ refType }}Request) Operation() string {
	return OperationCreate
}

// GetRequest returns underlying request.
func (r *Event_Delete{{ refType }}Request) GetRequest() DeleteRefRequest {
	return r.Delete{{ refType }}Request
}

// isDeleteRefRequest determines delete request.
func (r *Delete{{ refType }}Request) isDeleteRefRequest() {}

// SetID sets referencing object's uuid.
func (r *Delete{{ refType }}Request) SetID(id string) {
	r.ID = id
}

// GetReference returns reference.
func (r *Delete{{ refType }}Request) GetReference() basemodels.Reference {
	return r.Get{{ refType }}()
}

// Operation returns operation that is performed by the request.
func (r *Delete{{ refType }}Request) Operation() string {
	return OperationDelete
}

{% endfor %}
{% endif%}{% endfor %}

func newEmptyCreateEventRequest(kind string) (createEventRequest, error) {
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
		case "{{ schema.TypeName }}":
		return &Event_Create{{ schema.JSONSchema.GoName }}Request{
			Create{{ schema.JSONSchema.GoName }}Request: &Create{{ schema.JSONSchema.GoName }}Request{
				{{ schema.JSONSchema.GoName }}: &models.{{ schema.JSONSchema.GoName }}{},
			},
		}, nil
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("invalid kind \"%s\" of create event", kind)
}

func newEmptyUpdateEventRequest(kind string) (updateEventRequest, error) {
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
		case "{{ schema.TypeName }}":
		return &Event_Update{{ schema.JSONSchema.GoName }}Request{
			Update{{ schema.JSONSchema.GoName }}Request: &Update{{ schema.JSONSchema.GoName }}Request{
				{{ schema.JSONSchema.GoName }}: &models.{{ schema.JSONSchema.GoName }}{},
			},
		}, nil
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("invalid kind \"%s\" of update event", kind)
}

func newEmptyDeleteEventRequest(kind string) (deleteEventRequest, error) {
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
		case "{{ schema.TypeName }}":
		return &Event_Delete{{ schema.JSONSchema.GoName }}Request{
			Delete{{ schema.JSONSchema.GoName }}Request: &Delete{{ schema.JSONSchema.GoName }}Request{},
		}, nil
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("invalid kind \"%s\" of delete event", kind)
}

func newEmptyCreateRefEventRequest(kind string) (createRefEventRequest, error) {
	switch kind {
{%- for schema in schemas %}{% if schema.Type != "abstract" and schema.ID -%}
{%- for _, reference in schema.References -%}
{%- set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}
	case "{{ schema.TypeName }}-{{ reference.LinkTo.TypeName }}":
		return &Event_Create{{ refType }}Request{
			Create{{ refType }}Request: &Create{{ refType }}Request{
				{{ refType }}: &models.{{ refType }}{
					{%- if reference.RefType %}
					Attr: &models.{{ reference.RefType }}{},
					{%- endif %}
				},
			},
		}, nil
{%- endfor %}{% endif%}{% endfor %}
	default:
		return nil, errors.Errorf("invalid kind \"%s\" of ref create event", kind)
	}
}

func newEmptyDeleteRefEventRequest(kind string) (deleteRefEventRequest, error) {
	switch kind {
{%- for schema in schemas %}{% if schema.Type != "abstract" and schema.ID -%}
{%- for _, reference in schema.References -%}
{%- set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}
	case "{{ schema.TypeName }}-{{ reference.LinkTo.TypeName }}":
		return &Event_Delete{{ refType }}Request{
			Delete{{ refType }}Request: &Delete{{ refType }}Request{
				{{ refType }}: &models.{{ refType }}{},
			},
		}, nil
{%- endfor %}{% endif%}{% endfor %}
	default:
		return nil, errors.Errorf("invalid kind \"%s\" of ref delete event", kind)
	}
}
