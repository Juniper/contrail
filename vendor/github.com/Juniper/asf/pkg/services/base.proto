syntax = "proto3";
package github.com.Juniper.asf.pkg.services;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.gostring_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.verbose_equal_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = false;
option (gogoproto.benchgen_all) = false;
option (gogoproto.marshaler_all) = false;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.protosizer_all) = false;

option go_package = "services";

message UUIDs {
    repeated string uuids = 1 [(gogoproto.customname) = "UUIDs"]; // UUIDs for refs and backrefs
}

message ListSpec {
    repeated Filter filters = 1 [(gogoproto.customname) = "Filters"]; // QueryFilter
    int64 limit = 2 [(gogoproto.customname) = "Limit"]; // Number of items expected to be returned
    string marker = 3 [(gogoproto.customname) = "Marker"]; // Include only objects with UUID lexically greater than this.
    bool detail = 4 [(gogoproto.customname) = "Detail"]; // Include detail informatoin or not
    bool count = 5 [(gogoproto.customname) = "Count"]; // TBD
    bool shared = 6 [(gogoproto.customname) = "Shared"]; // Include shared resources or not
    bool exclude_hrefs = 7 [(gogoproto.customname) = "ExcludeHrefs"]; // Exclude href parameters
    repeated string parent_fq_name = 8 [(gogoproto.customname) = "ParentFQName"]; // Filter by parent FQ Name
    string parent_type = 9  [(gogoproto.customname) = "ParentType"]; // Filter by parent type
    repeated string parent_uuids = 10 [(gogoproto.customname) = "ParentUUIDs"]; // Filter by parent UUIDs
    repeated string backref_uuids = 11 [(gogoproto.customname) = "BackRefUUIDs"]; // Filter by backref UUIDss
    map<string, UUIDs> ref_uuids = 12 [(gogoproto.customname) = "RefUUIDs"]; // Filter by ref UUIDss
    repeated string object_uuids = 13 [(gogoproto.customname) = "ObjectUUIDs"]; // Filter by UUIDs
    repeated string fields = 14 [(gogoproto.customname) = "Fields"]; // limit displayed fields
}

message Filter {
    string key = 1 [(gogoproto.customname) = "Key"]; // Filter key
    repeated string values = 2 [(gogoproto.customname) = "Values"]; // Filter values
}

service RefRelax {
	rpc RelaxRef (RelaxRefRequest) returns (RelaxRefResponse);
}

message RelaxRefRequest {
	string UUID = 1 [(gogoproto.customname) = "UUID",(gogoproto.jsontag) = "uuid"];
	string RefUUID = 2 [(gogoproto.customname) = "RefUUID",(gogoproto.jsontag) = "ref-uuid"];
}

message RelaxRefResponse {
	string UUID = 1 [(gogoproto.customname) = "UUID",(gogoproto.jsontag) = "uuid"];
}

service IntPool {
	rpc CreateIntPool (CreateIntPoolRequest) returns (google.protobuf.Empty);
	rpc GetIntOwner (GetIntOwnerRequest) returns (GetIntOwnerResponse);
	rpc DeleteIntPool (DeleteIntPoolRequest) returns (google.protobuf.Empty);
	rpc AllocateInt (AllocateIntRequest) returns (AllocateIntResponse);
	rpc SetInt (SetIntRequest) returns (google.protobuf.Empty);
	rpc DeallocateInt (DeallocateIntRequest) returns (google.protobuf.Empty);
}

message GetIntOwnerRequest {
	string Pool = 1 [(gogoproto.customname) = "Pool",(gogoproto.jsontag) = "pool"];
	int64 Value = 2 [(gogoproto.customname) = "Value",(gogoproto.jsontag) = "value"];
}

message GetIntOwnerResponse {
	string Owner = 1 [(gogoproto.customname) = "Owner",(gogoproto.jsontag) = "owner"];
}

message CreateIntPoolRequest {
	string Pool = 1 [(gogoproto.customname) = "Pool",(gogoproto.jsontag) = "pool"];
	int64 Start = 2 [(gogoproto.customname) = "Start",(gogoproto.jsontag) = "start"];
	int64 End = 3 [(gogoproto.customname) = "End",(gogoproto.jsontag) = "end"];
}

message DeleteIntPoolRequest {
	string Pool = 1 [(gogoproto.customname) = "Pool",(gogoproto.jsontag) = "pool"];
}

message AllocateIntRequest {
	string Pool = 1 [(gogoproto.customname) = "Pool"];
	string Owner = 2 [(gogoproto.customname) = "Owner",(gogoproto.jsontag) = "owner"];
}

message AllocateIntResponse {
	int64 Value = 1 [(gogoproto.customname) = "Value"];
}

message SetIntRequest {
	string Pool = 1 [(gogoproto.customname) = "Pool"];
	int64 Value = 2 [(gogoproto.customname) = "Value"];
	string Owner = 3 [(gogoproto.customname) = "Owner",(gogoproto.jsontag) = "owner"];
}

message DeallocateIntRequest {
	string Pool = 1 [(gogoproto.customname) = "Pool"];
	int64 Value = 2 [(gogoproto.customname) = "Value"];
}

service UserAgentKV {
	rpc StoreKeyValue(KeyValuePair) returns (google.protobuf.Empty);
	rpc RetrieveValues(RetrieveValuesRequest) returns (RetrieveValuesResponse);
	rpc RetrieveKVPs(google.protobuf.Empty) returns (RetrieveKVPsResponse);
	rpc DeleteKey(DeleteKeyRequest) returns (google.protobuf.Empty);
}

message KeyValuePair {
	string Key = 1 [(gogoproto.customname) = "Key",(gogoproto.jsontag) = "key"];
	string Value = 2 [(gogoproto.customname) = "Value",(gogoproto.jsontag) = "value"];
}

message RetrieveValuesRequest {
	repeated string Keys = 1 [(gogoproto.customname) = "Keys",(gogoproto.jsontag) = "key"];
}

message RetrieveValuesResponse {
	repeated string Values = 1 [(gogoproto.customname) = "Values",(gogoproto.jsontag) = "value"];
}

message RetrieveKVPsResponse {
	repeated KeyValuePair value = 1 [(gogoproto.customname) = "KeyValuePairs",(gogoproto.jsontag) = "value"];
}

message DeleteKeyRequest {
	string Key = 1 [(gogoproto.customname) = "Key",(gogoproto.jsontag) = "key"];
}

service FQNameToID {
	rpc FQNameToID(FQNameToIDRequest) returns (FQNameToIDResponse);
}

message FQNameToIDRequest {
	repeated string FQName = 1 [(gogoproto.customname) = "FQName",(gogoproto.jsontag) = "fq_name"];
	string Type = 2 [(gogoproto.customname) = "Type",(gogoproto.jsontag) = "type"];
}

message FQNameToIDResponse {
	string UUID = 1 [(gogoproto.customname) = "UUID",(gogoproto.jsontag) = "uuid"];
}

service IDToFQName {
	rpc IDToFQName(IDToFQNameRequest) returns (IDToFQNameResponse);
}

message IDToFQNameRequest {
	string UUID = 1 [(gogoproto.customname) = "UUID",(gogoproto.jsontag) = "uuid"];
}

message IDToFQNameResponse {
	repeated string FQName = 1 [(gogoproto.customname) = "FQName",(gogoproto.jsontag) = "fq_name"];
	string Type = 2 [(gogoproto.customname) = "Type",(gogoproto.jsontag) = "type"];
}
