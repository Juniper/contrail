package services

import (
	"context"

	"github.com/Juniper/asf/pkg/errutil"
	"github.com/Juniper/asf/pkg/services"
)

// SanitizerService fills up missing properties based on resources logic and metadata
// TODO: Move logic from ContrailService when validation will be a separate service
type SanitizerService struct {
	BaseService
	services.Sanitizer
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (sv *SanitizerService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {
	m := request.Get{{ schema.JSONSchema.GoName }}()
	m.Name, m.DisplayName = sv.SanitizeDisplayNameAndName(ctx, m)

	{% if schema.References | length != 0 %}
	if err := sv.SanitizeRefs(ctx, m.GetReferences()); err != nil {
		return nil, errutil.ErrorBadRequestf("couldn't sanitize refs of {{ schema.JSONSchema.GoName }} %v: %v", m.GetUUID(), err)
	}
	{% endif %}
	return sv.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

{% if schema.References | length != 0 %}
func (sv *SanitizerService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
	m := request.Get{{ schema.JSONSchema.GoName }}()
	if err := sv.SanitizeRefs(ctx, m.GetReferences()); err != nil {
		return nil, errutil.ErrorBadRequestf("couldn't sanitize refs of {{ schema.JSONSchema.GoName }} %v: %v", m.GetUUID(), err)
	}

	return sv.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}
{% endif %}
{% endif %}{% endfor %}
