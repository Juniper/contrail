package services

import (
	"context"
	"fmt"
	"strings"

	"github.com/pkg/errors"
	"github.com/Juniper/asf/pkg/errutil"
	"github.com/Juniper/asf/pkg/services/baseservices"

	asfmodels "github.com/Juniper/asf/pkg/models"
	models "{{ modelsImportPath }}"
)

// TODO(dfurman): move non-template code out of template
// TODO(dfurman): write tests

// SanitizerService fills up missing properties based on resources logic and metadata
// TODO: Move logic from ContrailService when validation will be a separate service
type SanitizerService struct {
	BaseService
	MetadataGetter baseservices.MetadataGetter
}

func (sv *SanitizerService) sanitizeRefs(
		ctx context.Context,
		refs asfmodels.References,
) error {
	refsWithoutUUID := refs.Filter(func(r asfmodels.Reference) bool { return r.GetUUID() == "" })
	if len(refsWithoutUUID) == 0 {
		return nil
	}
	foundMetadata, err := sv.MetadataGetter.ListMetadata(ctx, refsToMetadatas(refsWithoutUUID))
	if err != nil {
		return err
	}
	if len(foundMetadata) != len(refsWithoutUUID) {
		if notFound := getRefsNotFound(refsWithoutUUID, foundMetadata); len(notFound) != 0 {
			return errors.Errorf("couldn't get metadata for references:%v", listNotFoundEvents(notFound))
		}
	}
	fillUUIDs(refsWithoutUUID, foundMetadata)
	return nil
}

func listNotFoundEvents(notFound asfmodels.References) string {
	var results []string
	for _, ref := range notFound {
		results = append(results, fmt.Sprintf("{type: %v, to: %v}", ref.GetToKind(), ref.GetTo()))
	}
	return strings.Join(results, " ")
}

func fillUUIDs(refs asfmodels.References, foundMetadata []*asfmodels.Metadata) {
	fqNameToUUID := make(map[string]string)
	for _, metadata := range foundMetadata {
		fqNameToUUID[asfmodels.FQNameToString(metadata.FQName)] = metadata.UUID
	}
	for _, ref := range refs {
		ref.SetUUID(fqNameToUUID[asfmodels.FQNameToString(ref.GetTo())])
	}
}

func getRefsNotFound(
		refs asfmodels.References, mds []*asfmodels.Metadata,
) asfmodels.References {
	found := metadatasToFQNames(mds)
	return refs.Filter(func(r asfmodels.Reference) bool {
		return !found[asfmodels.FQNameToString(r.GetTo())]
	})
}

func metadatasToFQNames(mds []*asfmodels.Metadata) map[string]bool {
	fqNames := make(map[string]bool, len(mds))
	for _, m := range mds {
		fqNames[asfmodels.FQNameToString(m.FQName)] = true
	}
	return fqNames
}

func refsToMetadatas(refs asfmodels.References) []*asfmodels.Metadata {
	var metadatas []*asfmodels.Metadata
	for _, ref := range refs {
		metadatas = append(metadatas, &asfmodels.Metadata{
			FQName: ref.GetTo(),
			Type:   ref.GetToKind(),
		})
	}
	return metadatas
}


{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (sv *SanitizerService) sanitize{{ schema.JSONSchema.GoName }}DisplayNameAndName(ctx context.Context, m *models.{{ schema.JSONSchema.GoName }}) {
	if m.Name == "" {
		m.Name = m.FQName[len(m.FQName)-1]
	}

	if m.DisplayName == "" {
		m.DisplayName = m.Name
	}
}

func (sv *SanitizerService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {
	m := request.Get{{ schema.JSONSchema.GoName }}()
	sv.sanitize{{ schema.JSONSchema.GoName }}DisplayNameAndName(ctx, m)

	{% if schema.References | length != 0 %}
	if err := sv.sanitizeRefs(ctx, m.GetReferences()); err != nil {
		return nil, errutil.ErrorBadRequestf("couldn't sanitize refs of {{ schema.JSONSchema.GoName }} %v: %v", m.GetUUID(), err)
	}
	{% endif %}

	return sv.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *SanitizerService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
	{% if schema.References | length != 0 %}
	m := request.Get{{ schema.JSONSchema.GoName }}()

	if err := sv.sanitizeRefs(ctx, m.GetReferences()); err != nil {
		return nil, errutil.ErrorBadRequestf("couldn't sanitize refs of {{ schema.JSONSchema.GoName }} %v: %v", m.GetUUID(), err)
	}
	{% endif %}

	return sv.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}
{% endif %}{% endfor %}
