name: Test Updating Resource with FieldMask
description: Verifies fieldmask work with passing fieldmask as a value.
cleanup:
- path: /cloud/cloud_uuid
test_data:
  cloud: &cloud
    uuid: cloud_uuid
    name: cloud_name
    display_name: display_name
    parent_type: global_system_config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001

clients:
  default:
    id: alice
    password: alice_password
    insecure: true
    scope:
      project:
        name: admin

workflow:
- name: create cloud
  request:
    path: /clouds
    method: POST
    expected: [200]
    data:
      cloud: *cloud
  expect:
    cloud: *cloud

- name: update cloud without passing fieldmask
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: changed_value

- name: ensure display name changed
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      display_name: changed_value

- name: update cloud with passing proper fieldmask
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: other_value
      field_mask:
        paths: [display_name]

- name: ensure display name changed
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      display_name: other_value

- name: update cloud with fieldmask that does not cover proper field
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: value_that_shouldnt_appear
      field_mask:
        paths: [name]

- name: ensure display name didn't change
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      display_name: other_value

- name: update cloud with empty display name
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: ""

- name: verify if display name does not exist
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      display_name: $null

- name: update display name to be non empty
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: not_empty

- name: update cloud with empty display name using fieldmask
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: ""
      field_mask:
        paths: [display_name]

- name: verify if display name does not exist
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      display_name: $null

- name: update display name and name of cloud
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: not_changed
        name: not_changed

- name: update cloud name and display_name but mention only one of them in fieldmask
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        display_name: changed
        name: changed
      field_mask:
        paths: [name]

- name: verify if only name has changed
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      name: changed
      display_name: not_changed


- name: update three fields using fieldmask
  request:
    path: /cloud/cloud_uuid
    method: PUT
    expected: [200]
    data:
      cloud:
        name: new_awesome_name
        display_name: new_awesome_display_name
        provisioning_state: new_awesome_state
      field_mask:
        paths: [name, display_name, provisioning_state]

- name: verify all mentioned in fieldmask fields changed
  request:
    path: /cloud/cloud_uuid
    method: GET
    expected: [200]
  expect:
    cloud:
      name: new_awesome_name
      display_name: new_awesome_display_name
      provisioning_state: new_awesome_state
