// Package sync contains functionality that supplies etcd with data from PostgreSQL database.
package sync

import (
	"context"

	"github.com/Juniper/asf/pkg/sync"
	"github.com/spf13/viper"

	asfetcd "github.com/Juniper/asf/pkg/etcd"
	asfservices "github.com/Juniper/asf/pkg/services"
	db "{{ dbImportPath }}"
	services "{{ servicesImportPath }}"
)

// NewEventProducer creates event producer that feeds EventProcessor with changes comming
// from PostgresWatcher.
func NewEventProducer(
	id string, processor services.EventProcessor, txn asfservices.InTransactionDoer, dump bool,
) (*sync.PostgresWatcher, error) {
	setViperDefaults()

	dbService, err := db.NewServiceFromConfig()
	if err != nil {
		return nil, err
	}
	handler := &eventChangeHandler{
		processor: &services.EventListProcessor{
			EventProcessor:    services.NewFQNameCache(processor),
			InTransactionDoer: txn,
		},
		decoder: dbService,
	}

	if !dump {
		return sync.NewPostgresWatcher(handler, &dbService.DB, sync.Slot(id), sync.NoDump())
	}
	return sync.NewPostgresWatcher(handler, &dbService.DB, sync.Slot(id))
}

func setViperDefaults() {
	viper.SetDefault("log_level", "debug")
	viper.SetDefault(asfetcd.ETCDDialTimeoutVK, "60s")
	viper.SetDefault("database.retry_period", "1s")
	viper.SetDefault("database.connection_retries", 10)
	viper.SetDefault("database.replication_status_timeout", "10s")
}

type eventListProcessor interface {
	ProcessList(context.Context, *services.EventList) (*services.EventList, error)
}

type eventDecoder interface {
	DecodeRowEvent(operation, resourceName string, pk []string, properties map[string]interface{}) (*services.Event, error)
}

type eventChangeHandler struct {
	processor eventListProcessor
	decoder   eventDecoder
}

func (e *eventChangeHandler) Handle(ctx context.Context, changes []sync.Change) error {
	list := services.EventList{}
	for _, c := range changes {
		ev, err := e.decoder.DecodeRowEvent(
			changeOperationToServices(c.Operation()),
			c.Kind(),
			c.PK(),
			c.Data(),
		)
		if err != nil {
			return err
		}
		list.Events = append(list.Events, ev)
	}
	_, err := e.processor.ProcessList(ctx, &list)
	return err
}

func changeOperationToServices(op sync.ChangeOperation) string {
	switch op {
	case sync.CreateOperation:
		return asfservices.OperationCreate
	case sync.UpdateOperation:
		return asfservices.OperationUpdate
	case sync.DeleteOperation:
		return asfservices.OperationDelete
	default:
		return asfservices.OperationCreate
	}
}
