syntax = "proto3";
package github.com.Juniper.contrail.pkg.generated.models;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.protosizer_all) = false;

option go_package = "models";

message ListSpec {
    repeated Filter filters = 1 [(gogoproto.customname) = "Filters"]; // QueryFilter
	int64 limit = 2 [(gogoproto.customname) = "Limit", (gogoproto.casttype) = "int"]; // Number of items expected to be returned
	int64 offset = 3 [(gogoproto.customname) = "Offset", (gogoproto.casttype) = "int"]; // Starting offset of items
    bool detail = 4 [(gogoproto.customname) = "Detail"]; // Include detail informatoin or not
    bool count = 5 [(gogoproto.customname) = "Count"]; // TBD
    bool shared = 6 [(gogoproto.customname) = "Shared"]; // Include shared resources or not
    bool exclude_hrefs = 7 [(gogoproto.customname) = "ExcludeHrefs"]; // Exclude href parameters
    repeated string parent_fq_name = 8 [(gogoproto.customname) = "ParentFQName"]; // Filter by parent FQ Name
    string parent_type = 9  [(gogoproto.customname) = "ParentType"]; // Filter by parent type
    repeated string parent_uuids = 10 [(gogoproto.customname) = "ParentUUIDs"]; // Filter by parent UUIDs
    repeated string backref_uuids = 11 [(gogoproto.customname) = "BackRefUUIDs"]; // Filter by backref UUIDss
    repeated string object_uuids = 12 [(gogoproto.customname) = "ObjectUUIDs"]; // Filter by UUIDs
    repeated string fields = 13 [(gogoproto.customname) = "Fields"]; // limit displayed fields
}

message Filter {
    string key = 1 [(gogoproto.customname) = "Key"]; // Filter key
    repeated string values = 2 [(gogoproto.customname) = "Values"]; // Filter values
}



message AccessControlList {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    int64 access_control_list_hash = 9 [(gogoproto.customname) = "AccessControlListHash"]; // A hash value of all the access-control-list-entries in this ACL objects automatically generated by system.
    AclEntriesType access_control_list_entries = 10 [(gogoproto.customname) = "AccessControlListEntries"]; // Automatically generated by system based on security groups or network policies. 


}



message CreateAccessControlListRequest {
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList",(gogoproto.jsontag) = "access-control-list"];
}

message CreateAccessControlListResponse {
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList" ,(gogoproto.jsontag) = "access-control-list"];
}

message UpdateAccessControlListRequest {
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList",(gogoproto.jsontag) = "access-control-list"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAccessControlListResponse {
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList",(gogoproto.jsontag) = "access-control-list"];
}

message DeleteAccessControlListRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAccessControlListResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAccessControlListRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAccessControlListResponse {
    repeated AccessControlList access_control_lists = 1 [(gogoproto.customname) = "AccessControlLists", (gogoproto.jsontag) = "access-control-lists"];
}

message GetAccessControlListRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAccessControlListResponse {
    AccessControlList access_control_list = 1 [(gogoproto.customname) = "AccessControlList", (gogoproto.jsontag) = "access-control-list"];
}



message AddressGroup {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    SubnetListType address_group_prefix = 9 [(gogoproto.customname) = "AddressGroupPrefix"]; // List of IP prefix 


}



message CreateAddressGroupRequest {
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup",(gogoproto.jsontag) = "address-group"];
}

message CreateAddressGroupResponse {
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup" ,(gogoproto.jsontag) = "address-group"];
}

message UpdateAddressGroupRequest {
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup",(gogoproto.jsontag) = "address-group"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAddressGroupResponse {
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup",(gogoproto.jsontag) = "address-group"];
}

message DeleteAddressGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAddressGroupResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAddressGroupRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAddressGroupResponse {
    repeated AddressGroup address_groups = 1 [(gogoproto.customname) = "AddressGroups", (gogoproto.jsontag) = "address-groups"];
}

message GetAddressGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAddressGroupResponse {
    AddressGroup address_group = 1 [(gogoproto.customname) = "AddressGroup", (gogoproto.jsontag) = "address-group"];
}



message Alarm {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    AlarmOrList alarm_rules = 9 [(gogoproto.customname) = "AlarmRules"]; // Rules based on the UVE attributes specified as OR-of-ANDs of AlarmExpression template. Example: &quot;alarm_rules&quot;: {&quot;or_list&quot;: [{&quot;and_list&quot;: [{AlarmExpression1}, {AlarmExpression2}, ...]}, {&quot;and_list&quot;: [{AlarmExpression3}, {AlarmExpression4}, ...]}]}
    UveKeysType uve_keys = 10 [(gogoproto.customname) = "UveKeys"]; // List of UVE tables or UVE objects where this alarm config should be applied. For example, rules based on NodeStatus UVE can be applied to multiple object types or specific uve objects such as analytics-node, config-node, control-node:&lt;hostname&gt;, etc.,
    int64 alarm_severity = 11 [(gogoproto.customname) = "AlarmSeverity"]; // Severity level for the alarm. 


}



message CreateAlarmRequest {
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm",(gogoproto.jsontag) = "alarm"];
}

message CreateAlarmResponse {
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm" ,(gogoproto.jsontag) = "alarm"];
}

message UpdateAlarmRequest {
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm",(gogoproto.jsontag) = "alarm"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAlarmResponse {
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm",(gogoproto.jsontag) = "alarm"];
}

message DeleteAlarmRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAlarmResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAlarmRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAlarmResponse {
    repeated Alarm alarms = 1 [(gogoproto.customname) = "Alarms", (gogoproto.jsontag) = "alarms"];
}

message GetAlarmRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAlarmResponse {
    Alarm alarm = 1 [(gogoproto.customname) = "Alarm", (gogoproto.jsontag) = "alarm"];
}



message AliasIPPool {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


    
    repeated AliasIP alias_ips = 3009 [(gogoproto.customname) = "AliasIPs"]; // alias ip is a ip that can be assigned to virtual-machine-interface(VMI), By doing so VMI can now be part of the alias ip network. packets originating with alias-ip as the source-ip belongs to alias-ip-network 
}



message CreateAliasIPPoolRequest {
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool",(gogoproto.jsontag) = "alias-ip-pool"];
}

message CreateAliasIPPoolResponse {
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool" ,(gogoproto.jsontag) = "alias-ip-pool"];
}

message UpdateAliasIPPoolRequest {
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool",(gogoproto.jsontag) = "alias-ip-pool"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAliasIPPoolResponse {
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool",(gogoproto.jsontag) = "alias-ip-pool"];
}

message DeleteAliasIPPoolRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAliasIPPoolResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAliasIPPoolRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAliasIPPoolResponse {
    repeated AliasIPPool alias_ip_pools = 1 [(gogoproto.customname) = "AliasIPPools", (gogoproto.jsontag) = "alias-ip-pools"];
}

message GetAliasIPPoolRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAliasIPPoolResponse {
    AliasIPPool alias_ip_pool = 1 [(gogoproto.customname) = "AliasIPPool", (gogoproto.jsontag) = "alias-ip-pool"];
}



message AliasIP {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string alias_ip_address = 9 [(gogoproto.customname) = "AliasIPAddress"]; // Alias ip address.
    string alias_ip_address_family = 10 [(gogoproto.customname) = "AliasIPAddressFamily"]; // Ip address family of the alias ip, IpV4 or IpV6 

    repeated AliasIPProjectRef project_refs = 1011 [(gogoproto.customname) = "ProjectRefs"];// Reference to project from which this alias ip was allocated. 
    repeated AliasIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1012 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to virtual machine interface to which this alias ip is attached. 

}


message AliasIPProjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message AliasIPVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateAliasIPRequest {
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP",(gogoproto.jsontag) = "alias-ip"];
}

message CreateAliasIPResponse {
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP" ,(gogoproto.jsontag) = "alias-ip"];
}

message UpdateAliasIPRequest {
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP",(gogoproto.jsontag) = "alias-ip"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAliasIPResponse {
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP",(gogoproto.jsontag) = "alias-ip"];
}

message DeleteAliasIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAliasIPResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAliasIPRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAliasIPResponse {
    repeated AliasIP alias_ips = 1 [(gogoproto.customname) = "AliasIPs", (gogoproto.jsontag) = "alias-ips"];
}

message GetAliasIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAliasIPResponse {
    AliasIP alias_ip = 1 [(gogoproto.customname) = "AliasIP", (gogoproto.jsontag) = "alias-ip"];
}



message AnalyticsNode {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string analytics_node_ip_address = 9 [(gogoproto.customname) = "AnalyticsNodeIPAddress"]; // Ip address of the analytics node, set while provisioning. 


}



message CreateAnalyticsNodeRequest {
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode",(gogoproto.jsontag) = "analytics-node"];
}

message CreateAnalyticsNodeResponse {
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode" ,(gogoproto.jsontag) = "analytics-node"];
}

message UpdateAnalyticsNodeRequest {
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode",(gogoproto.jsontag) = "analytics-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAnalyticsNodeResponse {
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode",(gogoproto.jsontag) = "analytics-node"];
}

message DeleteAnalyticsNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAnalyticsNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAnalyticsNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAnalyticsNodeResponse {
    repeated AnalyticsNode analytics_nodes = 1 [(gogoproto.customname) = "AnalyticsNodes", (gogoproto.jsontag) = "analytics-nodes"];
}

message GetAnalyticsNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAnalyticsNodeResponse {
    AnalyticsNode analytics_node = 1 [(gogoproto.customname) = "AnalyticsNode", (gogoproto.jsontag) = "analytics-node"];
}



message APIAccessList {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    RbacRuleEntriesType api_access_list_entries = 9 [(gogoproto.customname) = "APIAccessListEntries"]; // List of rules e.g network.* =&gt; admin:CRUD (admin can perform all ops on networks). 


}



message CreateAPIAccessListRequest {
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList",(gogoproto.jsontag) = "api-access-list"];
}

message CreateAPIAccessListResponse {
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList" ,(gogoproto.jsontag) = "api-access-list"];
}

message UpdateAPIAccessListRequest {
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList",(gogoproto.jsontag) = "api-access-list"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAPIAccessListResponse {
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList",(gogoproto.jsontag) = "api-access-list"];
}

message DeleteAPIAccessListRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAPIAccessListResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAPIAccessListRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAPIAccessListResponse {
    repeated APIAccessList api_access_lists = 1 [(gogoproto.customname) = "APIAccessLists", (gogoproto.jsontag) = "api-access-lists"];
}

message GetAPIAccessListRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAPIAccessListResponse {
    APIAccessList api_access_list = 1 [(gogoproto.customname) = "APIAccessList", (gogoproto.jsontag) = "api-access-list"];
}



message ApplicationPolicySet {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    bool all_applications = 9 [(gogoproto.customname) = "AllApplications"]; // If set, indicates application policy set to be applied to all application tags 

    repeated ApplicationPolicySetFirewallPolicyRef firewall_policy_refs = 1010 [(gogoproto.customname) = "FirewallPolicyRefs"];// Reference to firewall-policy attached to this application-policy 
    repeated ApplicationPolicySetGlobalVrouterConfigRef global_vrouter_config_refs = 1011 [(gogoproto.customname) = "GlobalVrouterConfigRefs"];// Reference to global-vrouter-config is automatically created by system for global           application policy sets 

}


message ApplicationPolicySetFirewallPolicyRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    FirewallSequence attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message ApplicationPolicySetGlobalVrouterConfigRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateApplicationPolicySetRequest {
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet",(gogoproto.jsontag) = "application-policy-set"];
}

message CreateApplicationPolicySetResponse {
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet" ,(gogoproto.jsontag) = "application-policy-set"];
}

message UpdateApplicationPolicySetRequest {
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet",(gogoproto.jsontag) = "application-policy-set"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateApplicationPolicySetResponse {
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet",(gogoproto.jsontag) = "application-policy-set"];
}

message DeleteApplicationPolicySetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteApplicationPolicySetResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListApplicationPolicySetRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListApplicationPolicySetResponse {
    repeated ApplicationPolicySet application_policy_sets = 1 [(gogoproto.customname) = "ApplicationPolicySets", (gogoproto.jsontag) = "application-policy-sets"];
}

message GetApplicationPolicySetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetApplicationPolicySetResponse {
    ApplicationPolicySet application_policy_set = 1 [(gogoproto.customname) = "ApplicationPolicySet", (gogoproto.jsontag) = "application-policy-set"];
}



message BGPAsAService {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    bool bgpaas_shared = 9 [(gogoproto.customname) = "BgpaasShared"]; // True if only one BGP router needs to be created. Otherwise, one BGP router is created for each VMI
    string bgpaas_session_attributes = 10 [(gogoproto.customname) = "BgpaasSessionAttributes"]; // BGP peering session attributes.
    bool bgpaas_suppress_route_advertisement = 11 [(gogoproto.customname) = "BgpaasSuppressRouteAdvertisement"]; // True when server should not advertise any routes to the client i.e. the client has static routes (typically a default) configured.
    bool bgpaas_ipv4_mapped_ipv6_nexthop = 12 [(gogoproto.customname) = "BgpaasIpv4MappedIpv6Nexthop"]; // True when client bgp implementation expects to receive a ipv4-mapped ipv6 address (as opposed to regular ipv6 address) as the bgp nexthop for ipv6 routes.
    string bgpaas_ip_address = 13 [(gogoproto.customname) = "BgpaasIPAddress"]; // Ip address of the BGP peer.
    int64 autonomous_system = 14 [(gogoproto.customname) = "AutonomousSystem"]; // 16 bit BGP Autonomous System number for the cluster. 

    repeated BGPAsAServiceVirtualMachineInterfaceRef virtual_machine_interface_refs = 1015 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to VMI on which BGPaaS BGP peering will happen. 
    repeated BGPAsAServiceServiceHealthCheckRef service_health_check_refs = 1016 [(gogoproto.customname) = "ServiceHealthCheckRefs"];// Reference to health check object attached to BGPaaS object, used to enable BFD health check over active BGPaaS VMI. 

}


message BGPAsAServiceVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message BGPAsAServiceServiceHealthCheckRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateBGPAsAServiceRequest {
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService",(gogoproto.jsontag) = "bgp-as-a-service"];
}

message CreateBGPAsAServiceResponse {
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService" ,(gogoproto.jsontag) = "bgp-as-a-service"];
}

message UpdateBGPAsAServiceRequest {
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService",(gogoproto.jsontag) = "bgp-as-a-service"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBGPAsAServiceResponse {
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService",(gogoproto.jsontag) = "bgp-as-a-service"];
}

message DeleteBGPAsAServiceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBGPAsAServiceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBGPAsAServiceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBGPAsAServiceResponse {
    repeated BGPAsAService bgp_as_a_services = 1 [(gogoproto.customname) = "BGPAsAServices", (gogoproto.jsontag) = "bgp-as-a-services"];
}

message GetBGPAsAServiceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBGPAsAServiceResponse {
    BGPAsAService bgp_as_a_service = 1 [(gogoproto.customname) = "BGPAsAService", (gogoproto.jsontag) = "bgp-as-a-service"];
}



message BGPRouter {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


}



message CreateBGPRouterRequest {
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter",(gogoproto.jsontag) = "bgp-router"];
}

message CreateBGPRouterResponse {
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter" ,(gogoproto.jsontag) = "bgp-router"];
}

message UpdateBGPRouterRequest {
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter",(gogoproto.jsontag) = "bgp-router"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBGPRouterResponse {
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter",(gogoproto.jsontag) = "bgp-router"];
}

message DeleteBGPRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBGPRouterResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBGPRouterRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBGPRouterResponse {
    repeated BGPRouter bgp_routers = 1 [(gogoproto.customname) = "BGPRouters", (gogoproto.jsontag) = "bgp-routers"];
}

message GetBGPRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBGPRouterResponse {
    BGPRouter bgp_router = 1 [(gogoproto.customname) = "BGPRouter", (gogoproto.jsontag) = "bgp-router"];
}



message BGPVPN {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    RouteTargetList route_target_list = 9 [(gogoproto.customname) = "RouteTargetList"]; // List of route targets that are used as both import and export for this virtual network.
    RouteTargetList import_route_target_list = 10 [(gogoproto.customname) = "ImportRouteTargetList"]; // List of route targets that are used as import for this virtual network.
    RouteTargetList export_route_target_list = 11 [(gogoproto.customname) = "ExportRouteTargetList"]; // List of route targets that are used as export for this virtual network.
    string bgpvpn_type = 12 [(gogoproto.customname) = "BGPVPNType"]; // BGP VPN type selection between IP VPN (l3) and Ethernet VPN (l2) (default: l3). 


}



message CreateBGPVPNRequest {
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN",(gogoproto.jsontag) = "bgpvpn"];
}

message CreateBGPVPNResponse {
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN" ,(gogoproto.jsontag) = "bgpvpn"];
}

message UpdateBGPVPNRequest {
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN",(gogoproto.jsontag) = "bgpvpn"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBGPVPNResponse {
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN",(gogoproto.jsontag) = "bgpvpn"];
}

message DeleteBGPVPNRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBGPVPNResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBGPVPNRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBGPVPNResponse {
    repeated BGPVPN bgpvpns = 1 [(gogoproto.customname) = "BGPVPNs", (gogoproto.jsontag) = "bgpvpns"];
}

message GetBGPVPNRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBGPVPNResponse {
    BGPVPN bgpvpn = 1 [(gogoproto.customname) = "BGPVPN", (gogoproto.jsontag) = "bgpvpn"];
}



message BridgeDomain {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    int64 mac_aging_time = 9 [(gogoproto.customname) = "MacAgingTime"]; // MAC aging time on the network
    int64 isid = 10 [(gogoproto.customname) = "Isid"]; // i-sid value
    bool mac_learning_enabled = 11 [(gogoproto.customname) = "MacLearningEnabled"]; // Enable MAC learning on the network
    MACMoveLimitControlType mac_move_control = 12 [(gogoproto.customname) = "MacMoveControl"]; // MAC move control on the network
    MACLimitControlType mac_limit_control = 13 [(gogoproto.customname) = "MacLimitControl"]; // MAC limit control on the network 


}



message CreateBridgeDomainRequest {
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain",(gogoproto.jsontag) = "bridge-domain"];
}

message CreateBridgeDomainResponse {
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain" ,(gogoproto.jsontag) = "bridge-domain"];
}

message UpdateBridgeDomainRequest {
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain",(gogoproto.jsontag) = "bridge-domain"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBridgeDomainResponse {
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain",(gogoproto.jsontag) = "bridge-domain"];
}

message DeleteBridgeDomainRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBridgeDomainResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBridgeDomainRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBridgeDomainResponse {
    repeated BridgeDomain bridge_domains = 1 [(gogoproto.customname) = "BridgeDomains", (gogoproto.jsontag) = "bridge-domains"];
}

message GetBridgeDomainRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBridgeDomainResponse {
    BridgeDomain bridge_domain = 1 [(gogoproto.customname) = "BridgeDomain", (gogoproto.jsontag) = "bridge-domain"];
}



message ConfigNode {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string config_node_ip_address = 9 [(gogoproto.customname) = "ConfigNodeIPAddress"]; // Ip address of the config node, set while provisioning. 


}



message CreateConfigNodeRequest {
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode",(gogoproto.jsontag) = "config-node"];
}

message CreateConfigNodeResponse {
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode" ,(gogoproto.jsontag) = "config-node"];
}

message UpdateConfigNodeRequest {
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode",(gogoproto.jsontag) = "config-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateConfigNodeResponse {
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode",(gogoproto.jsontag) = "config-node"];
}

message DeleteConfigNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteConfigNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListConfigNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListConfigNodeResponse {
    repeated ConfigNode config_nodes = 1 [(gogoproto.customname) = "ConfigNodes", (gogoproto.jsontag) = "config-nodes"];
}

message GetConfigNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetConfigNodeResponse {
    ConfigNode config_node = 1 [(gogoproto.customname) = "ConfigNode", (gogoproto.jsontag) = "config-node"];
}



message ConfigRoot {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ConfigRootTagRef tag_refs = 1009 [(gogoproto.customname) = "TagRefs"];// Attribute attached to objects - has a type and value 

    
    repeated Domain domains = 3010 [(gogoproto.customname) = "Domains"]; // Domain is authentication namespace, a collection of projects. 
    
    repeated GlobalSystemConfig global_system_configs = 3011 [(gogoproto.customname) = "GlobalSystemConfigs"]; // Global system config is object where all global system configuration is present. 
    
    repeated Tag tags = 3012 [(gogoproto.customname) = "Tags"]; // Attribute attached to objects - has a type and value 
}


message ConfigRootTagRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateConfigRootRequest {
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot",(gogoproto.jsontag) = "config-root"];
}

message CreateConfigRootResponse {
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot" ,(gogoproto.jsontag) = "config-root"];
}

message UpdateConfigRootRequest {
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot",(gogoproto.jsontag) = "config-root"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateConfigRootResponse {
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot",(gogoproto.jsontag) = "config-root"];
}

message DeleteConfigRootRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteConfigRootResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListConfigRootRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListConfigRootResponse {
    repeated ConfigRoot config_roots = 1 [(gogoproto.customname) = "ConfigRoots", (gogoproto.jsontag) = "config-roots"];
}

message GetConfigRootRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetConfigRootResponse {
    ConfigRoot config_root = 1 [(gogoproto.customname) = "ConfigRoot", (gogoproto.jsontag) = "config-root"];
}



message CustomerAttachment {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated CustomerAttachmentVirtualMachineInterfaceRef virtual_machine_interface_refs = 1009 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Not in Use. 
    repeated CustomerAttachmentFloatingIPRef floating_ip_refs = 1010 [(gogoproto.customname) = "FloatingIPRefs"];// Not in Use. 

}


message CustomerAttachmentVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message CustomerAttachmentFloatingIPRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateCustomerAttachmentRequest {
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment",(gogoproto.jsontag) = "customer-attachment"];
}

message CreateCustomerAttachmentResponse {
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment" ,(gogoproto.jsontag) = "customer-attachment"];
}

message UpdateCustomerAttachmentRequest {
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment",(gogoproto.jsontag) = "customer-attachment"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateCustomerAttachmentResponse {
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment",(gogoproto.jsontag) = "customer-attachment"];
}

message DeleteCustomerAttachmentRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteCustomerAttachmentResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListCustomerAttachmentRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListCustomerAttachmentResponse {
    repeated CustomerAttachment customer_attachments = 1 [(gogoproto.customname) = "CustomerAttachments", (gogoproto.jsontag) = "customer-attachments"];
}

message GetCustomerAttachmentRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetCustomerAttachmentResponse {
    CustomerAttachment customer_attachment = 1 [(gogoproto.customname) = "CustomerAttachment", (gogoproto.jsontag) = "customer-attachment"];
}



message DatabaseNode {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string database_node_ip_address = 9 [(gogoproto.customname) = "DatabaseNodeIPAddress"]; // Ip address of the database node, set while provisioning. 


}



message CreateDatabaseNodeRequest {
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode",(gogoproto.jsontag) = "database-node"];
}

message CreateDatabaseNodeResponse {
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode" ,(gogoproto.jsontag) = "database-node"];
}

message UpdateDatabaseNodeRequest {
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode",(gogoproto.jsontag) = "database-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDatabaseNodeResponse {
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode",(gogoproto.jsontag) = "database-node"];
}

message DeleteDatabaseNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDatabaseNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDatabaseNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDatabaseNodeResponse {
    repeated DatabaseNode database_nodes = 1 [(gogoproto.customname) = "DatabaseNodes", (gogoproto.jsontag) = "database-nodes"];
}

message GetDatabaseNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDatabaseNodeResponse {
    DatabaseNode database_node = 1 [(gogoproto.customname) = "DatabaseNode", (gogoproto.jsontag) = "database-node"];
}



message DiscoveryServiceAssignment {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


    
    repeated DsaRule dsa_rules = 3009 [(gogoproto.customname) = "DsaRules"]; // Discovery service rule for assigning subscriber to publisher. (set of subscriber) can be assigned to (set of publisher). 
}



message CreateDiscoveryServiceAssignmentRequest {
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment",(gogoproto.jsontag) = "discovery-service-assignment"];
}

message CreateDiscoveryServiceAssignmentResponse {
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment" ,(gogoproto.jsontag) = "discovery-service-assignment"];
}

message UpdateDiscoveryServiceAssignmentRequest {
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment",(gogoproto.jsontag) = "discovery-service-assignment"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDiscoveryServiceAssignmentResponse {
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment",(gogoproto.jsontag) = "discovery-service-assignment"];
}

message DeleteDiscoveryServiceAssignmentRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDiscoveryServiceAssignmentResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDiscoveryServiceAssignmentRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDiscoveryServiceAssignmentResponse {
    repeated DiscoveryServiceAssignment discovery_service_assignments = 1 [(gogoproto.customname) = "DiscoveryServiceAssignments", (gogoproto.jsontag) = "discovery-service-assignments"];
}

message GetDiscoveryServiceAssignmentRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDiscoveryServiceAssignmentResponse {
    DiscoveryServiceAssignment discovery_service_assignment = 1 [(gogoproto.customname) = "DiscoveryServiceAssignment", (gogoproto.jsontag) = "discovery-service-assignment"];
}



message Domain {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    DomainLimitsType domain_limits = 9 [(gogoproto.customname) = "DomainLimits"]; // Domain level quota, not currently implemented 


    
    repeated APIAccessList api_access_lists = 3010 [(gogoproto.customname) = "APIAccessLists"]; // API access list is list of rules that define role based access to each API and its properties at domain level. 
    
    repeated Namespace namespaces = 3011 [(gogoproto.customname) = "Namespaces"]; // Namespace is unique networking namespace within this domain. If namespace is not present then default namespace of default project is used. 
    
    repeated Project projects = 3012 [(gogoproto.customname) = "Projects"]; // Project represent one instance of application or tenant. 
    
    repeated ServiceTemplate service_templates = 3013 [(gogoproto.customname) = "ServiceTemplates"]; // Service template defines how a service may be deployed in the network. Service instance is instantiated from config in service template. 
    
    repeated VirtualDNS virtual_DNSs = 3014 [(gogoproto.customname) = "VirtualDNSs"]; // Virtual DNS server is DNS as service for tenants. It is inbound DNS service for virtual machines in this project. DNS requests by end points inside this project/IPAM are served by this DNS server rules. 
}



message CreateDomainRequest {
    Domain domain = 1 [(gogoproto.customname) = "Domain",(gogoproto.jsontag) = "domain"];
}

message CreateDomainResponse {
    Domain domain = 1 [(gogoproto.customname) = "Domain" ,(gogoproto.jsontag) = "domain"];
}

message UpdateDomainRequest {
    Domain domain = 1 [(gogoproto.customname) = "Domain",(gogoproto.jsontag) = "domain"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDomainResponse {
    Domain domain = 1 [(gogoproto.customname) = "Domain",(gogoproto.jsontag) = "domain"];
}

message DeleteDomainRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDomainResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDomainRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDomainResponse {
    repeated Domain domains = 1 [(gogoproto.customname) = "Domains", (gogoproto.jsontag) = "domains"];
}

message GetDomainRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDomainResponse {
    Domain domain = 1 [(gogoproto.customname) = "Domain", (gogoproto.jsontag) = "domain"];
}



message DsaRule {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    DiscoveryServiceAssignmentType dsa_rule_entry = 9 [(gogoproto.customname) = "DsaRuleEntry"]; // rule entry defining publisher set and subscriber set. 


}



message CreateDsaRuleRequest {
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule",(gogoproto.jsontag) = "dsa-rule"];
}

message CreateDsaRuleResponse {
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule" ,(gogoproto.jsontag) = "dsa-rule"];
}

message UpdateDsaRuleRequest {
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule",(gogoproto.jsontag) = "dsa-rule"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDsaRuleResponse {
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule",(gogoproto.jsontag) = "dsa-rule"];
}

message DeleteDsaRuleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDsaRuleResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDsaRuleRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDsaRuleResponse {
    repeated DsaRule dsa_rules = 1 [(gogoproto.customname) = "DsaRules", (gogoproto.jsontag) = "dsa-rules"];
}

message GetDsaRuleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDsaRuleResponse {
    DsaRule dsa_rule = 1 [(gogoproto.customname) = "DsaRule", (gogoproto.jsontag) = "dsa-rule"];
}



message E2ServiceProvider {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    bool e2_service_provider_promiscuous = 9 [(gogoproto.customname) = "E2ServiceProviderPromiscuous"]; // This service provider is connected to all other service providers. 

    repeated E2ServiceProviderPhysicalRouterRef physical_router_refs = 1010 [(gogoproto.customname) = "PhysicalRouterRefs"];// Links the service provider to peer routers. 
    repeated E2ServiceProviderPeeringPolicyRef peering_policy_refs = 1011 [(gogoproto.customname) = "PeeringPolicyRefs"];// Links the service provider to a peering policy. 

}


message E2ServiceProviderPhysicalRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message E2ServiceProviderPeeringPolicyRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateE2ServiceProviderRequest {
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider",(gogoproto.jsontag) = "e2-service-provider"];
}

message CreateE2ServiceProviderResponse {
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider" ,(gogoproto.jsontag) = "e2-service-provider"];
}

message UpdateE2ServiceProviderRequest {
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider",(gogoproto.jsontag) = "e2-service-provider"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateE2ServiceProviderResponse {
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider",(gogoproto.jsontag) = "e2-service-provider"];
}

message DeleteE2ServiceProviderRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteE2ServiceProviderResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListE2ServiceProviderRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListE2ServiceProviderResponse {
    repeated E2ServiceProvider e2_service_providers = 1 [(gogoproto.customname) = "E2ServiceProviders", (gogoproto.jsontag) = "e2-service-providers"];
}

message GetE2ServiceProviderRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetE2ServiceProviderResponse {
    E2ServiceProvider e2_service_provider = 1 [(gogoproto.customname) = "E2ServiceProvider", (gogoproto.jsontag) = "e2-service-provider"];
}



message FirewallPolicy {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated FirewallPolicyFirewallRuleRef firewall_rule_refs = 1009 [(gogoproto.customname) = "FirewallRuleRefs"];// Reference to firewall-rule attached to this firewall-policy 
    repeated FirewallPolicySecurityLoggingObjectRef security_logging_object_refs = 1010 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];// Reference to security-logging-object attached to this firewall-policy 

}


message FirewallPolicySecurityLoggingObjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallPolicyFirewallRuleRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    FirewallSequence attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateFirewallPolicyRequest {
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy",(gogoproto.jsontag) = "firewall-policy"];
}

message CreateFirewallPolicyResponse {
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy" ,(gogoproto.jsontag) = "firewall-policy"];
}

message UpdateFirewallPolicyRequest {
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy",(gogoproto.jsontag) = "firewall-policy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFirewallPolicyResponse {
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy",(gogoproto.jsontag) = "firewall-policy"];
}

message DeleteFirewallPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFirewallPolicyResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFirewallPolicyRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFirewallPolicyResponse {
    repeated FirewallPolicy firewall_policys = 1 [(gogoproto.customname) = "FirewallPolicys", (gogoproto.jsontag) = "firewall-policys"];
}

message GetFirewallPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFirewallPolicyResponse {
    FirewallPolicy firewall_policy = 1 [(gogoproto.customname) = "FirewallPolicy", (gogoproto.jsontag) = "firewall-policy"];
}



message FirewallRule {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    FirewallRuleEndpointType endpoint_1 = 9 [(gogoproto.customname) = "Endpoint1"]; // match condition for traffic source
    FirewallRuleEndpointType endpoint_2 = 10 [(gogoproto.customname) = "Endpoint2"]; // match condition for traffic destination
    ActionListType action_list = 11 [(gogoproto.customname) = "ActionList"]; // Actions to be performed if packets match condition
    FirewallServiceType service = 12 [(gogoproto.customname) = "Service"]; // Service (port, protocol) for packets match condition
    string direction = 13 [(gogoproto.customname) = "Direction"]; // Direction in the rule
    FirewallRuleMatchTagsTypeIdList match_tag_types = 14 [(gogoproto.customname) = "MatchTagTypes"]; // matching tags ids for source and destination endpoints
    FirewallRuleMatchTagsType match_tags = 15 [(gogoproto.customname) = "MatchTags"]; // matching tags for source and destination endpoints 

    repeated FirewallRuleServiceGroupRef service_group_refs = 1016 [(gogoproto.customname) = "ServiceGroupRefs"];// Reference to service-group attached to this firewall policy 
    repeated FirewallRuleAddressGroupRef address_group_refs = 1017 [(gogoproto.customname) = "AddressGroupRefs"];// Reference to address group attached to endpoints 
    repeated FirewallRuleSecurityLoggingObjectRef security_logging_object_refs = 1018 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];// Reference to security-logging-object attached to this firewall-rule 
    repeated FirewallRuleVirtualNetworkRef virtual_network_refs = 1019 [(gogoproto.customname) = "VirtualNetworkRefs"];// Reference to virtual network attached to endpoints 

}


message FirewallRuleServiceGroupRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallRuleAddressGroupRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallRuleSecurityLoggingObjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FirewallRuleVirtualNetworkRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateFirewallRuleRequest {
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule",(gogoproto.jsontag) = "firewall-rule"];
}

message CreateFirewallRuleResponse {
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule" ,(gogoproto.jsontag) = "firewall-rule"];
}

message UpdateFirewallRuleRequest {
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule",(gogoproto.jsontag) = "firewall-rule"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFirewallRuleResponse {
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule",(gogoproto.jsontag) = "firewall-rule"];
}

message DeleteFirewallRuleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFirewallRuleResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFirewallRuleRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFirewallRuleResponse {
    repeated FirewallRule firewall_rules = 1 [(gogoproto.customname) = "FirewallRules", (gogoproto.jsontag) = "firewall-rules"];
}

message GetFirewallRuleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFirewallRuleResponse {
    FirewallRule firewall_rule = 1 [(gogoproto.customname) = "FirewallRule", (gogoproto.jsontag) = "firewall-rule"];
}



message FloatingIPPool {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    FloatingIpPoolSubnetType floating_ip_pool_subnets = 9 [(gogoproto.customname) = "FloatingIPPoolSubnets"]; // Subnets that restrict floating ip allocation from the corresponding virtual network. 


    
    repeated FloatingIP floating_ips = 3010 [(gogoproto.customname) = "FloatingIPs"]; // Floating ip is a ip that can be assigned to (virtual machine interface(VMI), ip), By doing so VMI can no be part of the floating ip network and floating ip is used as one:one to NAT for doing so. 
}



message CreateFloatingIPPoolRequest {
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool",(gogoproto.jsontag) = "floating-ip-pool"];
}

message CreateFloatingIPPoolResponse {
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool" ,(gogoproto.jsontag) = "floating-ip-pool"];
}

message UpdateFloatingIPPoolRequest {
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool",(gogoproto.jsontag) = "floating-ip-pool"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFloatingIPPoolResponse {
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool",(gogoproto.jsontag) = "floating-ip-pool"];
}

message DeleteFloatingIPPoolRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFloatingIPPoolResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFloatingIPPoolRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFloatingIPPoolResponse {
    repeated FloatingIPPool floating_ip_pools = 1 [(gogoproto.customname) = "FloatingIPPools", (gogoproto.jsontag) = "floating-ip-pools"];
}

message GetFloatingIPPoolRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFloatingIPPoolResponse {
    FloatingIPPool floating_ip_pool = 1 [(gogoproto.customname) = "FloatingIPPool", (gogoproto.jsontag) = "floating-ip-pool"];
}



message FloatingIP {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string floating_ip_address_family = 9 [(gogoproto.customname) = "FloatingIPAddressFamily"]; // Ip address family of the floating ip, IpV4 or IpV6
    PortMappings floating_ip_port_mappings = 10 [(gogoproto.customname) = "FloatingIPPortMappings"]; // List of PortMaps for this floating-ip.
    bool floating_ip_is_virtual_ip = 11 [(gogoproto.customname) = "FloatingIPIsVirtualIP"]; // This floating ip is used as virtual ip (VIP) in case of LBaaS.
    string floating_ip_address = 12 [(gogoproto.customname) = "FloatingIPAddress"]; // Floating ip address.
    bool floating_ip_port_mappings_enable = 13 [(gogoproto.customname) = "FloatingIPPortMappingsEnable"]; // If it is false, floating-ip Nat is done for all Ports. If it is true, floating-ip Nat is done to the list of PortMaps.
    string floating_ip_fixed_ip_address = 14 [(gogoproto.customname) = "FloatingIPFixedIPAddress"]; // This floating is tracking given fixed ip of the interface. The given fixed ip is used in 1:1 NAT.
    string floating_ip_traffic_direction = 15 [(gogoproto.customname) = "FloatingIPTrafficDirection"]; // Specifies direction of traffic for the floating-ip 

    repeated FloatingIPProjectRef project_refs = 1016 [(gogoproto.customname) = "ProjectRefs"];// Reference to project is which this floating ip was allocated. 
    repeated FloatingIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1017 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to virtual machine interface to which this floating ip is attached. 

}


message FloatingIPVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message FloatingIPProjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateFloatingIPRequest {
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP",(gogoproto.jsontag) = "floating-ip"];
}

message CreateFloatingIPResponse {
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP" ,(gogoproto.jsontag) = "floating-ip"];
}

message UpdateFloatingIPRequest {
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP",(gogoproto.jsontag) = "floating-ip"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFloatingIPResponse {
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP",(gogoproto.jsontag) = "floating-ip"];
}

message DeleteFloatingIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFloatingIPResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFloatingIPRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFloatingIPResponse {
    repeated FloatingIP floating_ips = 1 [(gogoproto.customname) = "FloatingIPs", (gogoproto.jsontag) = "floating-ips"];
}

message GetFloatingIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFloatingIPResponse {
    FloatingIP floating_ip = 1 [(gogoproto.customname) = "FloatingIP", (gogoproto.jsontag) = "floating-ip"];
}



message ForwardingClass {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    int64 forwarding_class_dscp = 9 [(gogoproto.customname) = "ForwardingClassDSCP"]; // DSCP value to be written on outgoing packet for this forwarding-class.
    int64 forwarding_class_vlan_priority = 10 [(gogoproto.customname) = "ForwardingClassVlanPriority"]; // 802.1p value to be written on outgoing packet for this forwarding-class.
    int64 forwarding_class_mpls_exp = 11 [(gogoproto.customname) = "ForwardingClassMPLSExp"]; // MPLS exp value to be written on outgoing packet for this forwarding-class.
    int64 forwarding_class_id = 12 [(gogoproto.customname) = "ForwardingClassID"]; // Unique ID for this forwarding class. 

    repeated ForwardingClassQosQueueRef qos_queue_refs = 1013 [(gogoproto.customname) = "QosQueueRefs"];// Qos queue to be used for this forwarding class. 

}


message ForwardingClassQosQueueRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateForwardingClassRequest {
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass",(gogoproto.jsontag) = "forwarding-class"];
}

message CreateForwardingClassResponse {
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass" ,(gogoproto.jsontag) = "forwarding-class"];
}

message UpdateForwardingClassRequest {
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass",(gogoproto.jsontag) = "forwarding-class"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateForwardingClassResponse {
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass",(gogoproto.jsontag) = "forwarding-class"];
}

message DeleteForwardingClassRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteForwardingClassResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListForwardingClassRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListForwardingClassResponse {
    repeated ForwardingClass forwarding_classs = 1 [(gogoproto.customname) = "ForwardingClasss", (gogoproto.jsontag) = "forwarding-classs"];
}

message GetForwardingClassRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetForwardingClassResponse {
    ForwardingClass forwarding_class = 1 [(gogoproto.customname) = "ForwardingClass", (gogoproto.jsontag) = "forwarding-class"];
}



message GlobalQosConfig {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    ControlTrafficDscpType control_traffic_dscp = 9 [(gogoproto.customname) = "ControlTrafficDSCP"]; // DSCP value of IP header for control traffic 


    
    repeated ForwardingClass forwarding_classs = 3010 [(gogoproto.customname) = "ForwardingClasss"]; // Link to global-qos config. 
    
    repeated QosConfig qos_configs = 3011 [(gogoproto.customname) = "QosConfigs"]; // Global system QoS config for vhost and fabric traffic . 
    
    repeated QosQueue qos_queues = 3012 [(gogoproto.customname) = "QosQueues"]; // QOS queue config object in this project. 
}



message CreateGlobalQosConfigRequest {
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig",(gogoproto.jsontag) = "global-qos-config"];
}

message CreateGlobalQosConfigResponse {
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig" ,(gogoproto.jsontag) = "global-qos-config"];
}

message UpdateGlobalQosConfigRequest {
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig",(gogoproto.jsontag) = "global-qos-config"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateGlobalQosConfigResponse {
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig",(gogoproto.jsontag) = "global-qos-config"];
}

message DeleteGlobalQosConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteGlobalQosConfigResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListGlobalQosConfigRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListGlobalQosConfigResponse {
    repeated GlobalQosConfig global_qos_configs = 1 [(gogoproto.customname) = "GlobalQosConfigs", (gogoproto.jsontag) = "global-qos-configs"];
}

message GetGlobalQosConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetGlobalQosConfigResponse {
    GlobalQosConfig global_qos_config = 1 [(gogoproto.customname) = "GlobalQosConfig", (gogoproto.jsontag) = "global-qos-config"];
}



message GlobalSystemConfig {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string config_version = 9 [(gogoproto.customname) = "ConfigVersion"]; // Version of OpenContrail software that generated this config.
    BGPaaServiceParametersType bgpaas_parameters = 10 [(gogoproto.customname) = "BgpaasParameters"]; // BGP As A Service Parameters configuration
    bool alarm_enable = 11 [(gogoproto.customname) = "AlarmEnable"]; // Flag to enable/disable alarms configured under global-system-config. True, if not set.
    MACMoveLimitControlType mac_move_control = 12 [(gogoproto.customname) = "MacMoveControl"]; // MAC move control on the network
    PluginProperties plugin_tuning = 13 [(gogoproto.customname) = "PluginTuning"]; // Various Orchestration system plugin(interface) parameters, like Openstack Neutron plugin.
    bool ibgp_auto_mesh = 14 [(gogoproto.customname) = "IbgpAutoMesh"]; // When true, system will automatically create BGP peering mesh with all control-nodes that have same BGP AS number as global AS number.
    int64 mac_aging_time = 15 [(gogoproto.customname) = "MacAgingTime"]; // MAC aging time on the network
    bool bgp_always_compare_med = 16 [(gogoproto.customname) = "BGPAlwaysCompareMed"]; // Always compare MED even if paths are received from different ASes.
    UserDefinedLogStatList user_defined_log_statistics = 17 [(gogoproto.customname) = "UserDefinedLogStatistics"]; // stats name and patterns
    GracefulRestartParametersType graceful_restart_parameters = 18 [(gogoproto.customname) = "GracefulRestartParameters"]; // Graceful Restart parameters
    SubnetListType ip_fabric_subnets = 19 [(gogoproto.customname) = "IPFabricSubnets"]; // List of all subnets in which vrouter ip address exist. Used by Device manager to configure dynamic GRE tunnels on the SDN gateway.
    int64 autonomous_system = 20 [(gogoproto.customname) = "AutonomousSystem"]; // 16 bit BGP Autonomous System number for the cluster.
    MACLimitControlType mac_limit_control = 21 [(gogoproto.customname) = "MacLimitControl"]; // MAC limit control on the network 

    repeated GlobalSystemConfigBGPRouterRef bgp_router_refs = 1022 [(gogoproto.customname) = "BGPRouterRefs"];// List of references to all bgp routers in systems. 

    
    repeated Alarm alarms = 3023 [(gogoproto.customname) = "Alarms"]; // List of alarms that are applicable to objects anchored under global-system-config. 
    
    repeated AnalyticsNode analytics_nodes = 3024 [(gogoproto.customname) = "AnalyticsNodes"]; // Analytics node is object representing a logical node in system which serves operational API and analytics collector. 
    
    repeated APIAccessList api_access_lists = 3025 [(gogoproto.customname) = "APIAccessLists"]; // Global API access list applicable to all domain and projects 
    
    repeated ConfigNode config_nodes = 3026 [(gogoproto.customname) = "ConfigNodes"]; // Config node is object representing a logical node in system which serves config API. 
    
    repeated DatabaseNode database_nodes = 3027 [(gogoproto.customname) = "DatabaseNodes"]; // Database node is object representing a logical node in system which host Cassandra DB and Zookeeper. 
    
    repeated GlobalQosConfig global_qos_configs = 3028 [(gogoproto.customname) = "GlobalQosConfigs"]; // Global QoS system config is object where all global system QoS configuration is present. 
    
    repeated GlobalVrouterConfig global_vrouter_configs = 3029 [(gogoproto.customname) = "GlobalVrouterConfigs"]; // Global vrouter config is object where all global vrouter config is present. 
    
    repeated PhysicalRouter physical_routers = 3030 [(gogoproto.customname) = "PhysicalRouters"]; // Physical router object represent any physical device that participates in virtual networking, like routers, switches, servers, firewalls etc. 
    
    repeated ServiceApplianceSet service_appliance_sets = 3031 [(gogoproto.customname) = "ServiceApplianceSets"]; //  
    
    repeated VirtualRouter virtual_routers = 3032 [(gogoproto.customname) = "VirtualRouters"]; // Virtual router is packet forwarding system on devices such as compute nodes(servers), TOR(s), routers. 
}


message GlobalSystemConfigBGPRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateGlobalSystemConfigRequest {
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig",(gogoproto.jsontag) = "global-system-config"];
}

message CreateGlobalSystemConfigResponse {
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig" ,(gogoproto.jsontag) = "global-system-config"];
}

message UpdateGlobalSystemConfigRequest {
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig",(gogoproto.jsontag) = "global-system-config"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateGlobalSystemConfigResponse {
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig",(gogoproto.jsontag) = "global-system-config"];
}

message DeleteGlobalSystemConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteGlobalSystemConfigResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListGlobalSystemConfigRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListGlobalSystemConfigResponse {
    repeated GlobalSystemConfig global_system_configs = 1 [(gogoproto.customname) = "GlobalSystemConfigs", (gogoproto.jsontag) = "global-system-configs"];
}

message GetGlobalSystemConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetGlobalSystemConfigResponse {
    GlobalSystemConfig global_system_config = 1 [(gogoproto.customname) = "GlobalSystemConfig", (gogoproto.jsontag) = "global-system-config"];
}



message GlobalVrouterConfig {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 9 [(gogoproto.customname) = "EcmpHashingIncludeFields"]; // ECMP hashing config at global level.
    FlowAgingTimeoutList flow_aging_timeout_list = 10 [(gogoproto.customname) = "FlowAgingTimeoutList"]; // Flow aging timeout per application (protocol, port) list.
    string forwarding_mode = 11 [(gogoproto.customname) = "ForwardingMode"]; // Packet forwarding mode for this system L2-only, L3-only OR L2-L3. L2-L3 is default.
    int64 flow_export_rate = 12 [(gogoproto.customname) = "FlowExportRate"]; // Flow export rate is global config, rate at which each vrouter will sample and export flow records to analytics
    LinklocalServicesTypes linklocal_services = 13 [(gogoproto.customname) = "LinklocalServices"]; // Global services provided on link local subnet to the virtual machines.
    EncapsulationPrioritiesType encapsulation_priorities = 14 [(gogoproto.customname) = "EncapsulationPriorities"]; // Ordered list of encapsulations that vrouter will use in priority order.
    string vxlan_network_identifier_mode = 15 [(gogoproto.customname) = "VxlanNetworkIdentifierMode"]; // 
    bool enable_security_logging = 16 [(gogoproto.customname) = "EnableSecurityLogging"]; // Enable or disable security-logging in the system 


    
    repeated SecurityLoggingObject security_logging_objects = 3017 [(gogoproto.customname) = "SecurityLoggingObjects"]; // Reference to security logging object for global-vrouter-config. 
}



message CreateGlobalVrouterConfigRequest {
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig",(gogoproto.jsontag) = "global-vrouter-config"];
}

message CreateGlobalVrouterConfigResponse {
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig" ,(gogoproto.jsontag) = "global-vrouter-config"];
}

message UpdateGlobalVrouterConfigRequest {
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig",(gogoproto.jsontag) = "global-vrouter-config"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateGlobalVrouterConfigResponse {
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig",(gogoproto.jsontag) = "global-vrouter-config"];
}

message DeleteGlobalVrouterConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteGlobalVrouterConfigResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListGlobalVrouterConfigRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListGlobalVrouterConfigResponse {
    repeated GlobalVrouterConfig global_vrouter_configs = 1 [(gogoproto.customname) = "GlobalVrouterConfigs", (gogoproto.jsontag) = "global-vrouter-configs"];
}

message GetGlobalVrouterConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetGlobalVrouterConfigResponse {
    GlobalVrouterConfig global_vrouter_config = 1 [(gogoproto.customname) = "GlobalVrouterConfig", (gogoproto.jsontag) = "global-vrouter-config"];
}



message InstanceIP {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    bool service_health_check_ip = 9 [(gogoproto.customname) = "ServiceHealthCheckIP"]; // This instance ip is used as service health check source ip
    SubnetType secondary_ip_tracking_ip = 10 [(gogoproto.customname) = "SecondaryIPTrackingIP"]; // When this instance ip is secondary ip, it can track activeness of another ip.
    string instance_ip_address = 11 [(gogoproto.customname) = "InstanceIPAddress"]; // Ip address value for instance ip.
    string instance_ip_mode = 12 [(gogoproto.customname) = "InstanceIPMode"]; // Ip address HA mode in case this instance ip is used in more than one interface, active-Active or active-Standby.
    string subnet_uuid = 13 [(gogoproto.customname) = "SubnetUUID"]; // This instance ip was allocated from this Subnet(UUID).
    string instance_ip_family = 14 [(gogoproto.customname) = "InstanceIPFamily"]; // Ip address family for instance ip, IPv4(v4) or IPv6(v6).
    bool service_instance_ip = 15 [(gogoproto.customname) = "ServiceInstanceIP"]; // This instance ip is used as service chain next hop
    bool instance_ip_local_ip = 16 [(gogoproto.customname) = "InstanceIPLocalIP"]; // This instance ip is local to compute and will not be exported to other nodes.
    bool instance_ip_secondary = 17 [(gogoproto.customname) = "InstanceIPSecondary"]; // This instance ip is secondary ip of the interface. 

    repeated InstanceIPVirtualRouterRef virtual_router_refs = 1022 [(gogoproto.customname) = "VirtualRouterRefs"];// Reference to virtual router of this instance ip. 
    repeated InstanceIPNetworkIpamRef network_ipam_refs = 1018 [(gogoproto.customname) = "NetworkIpamRefs"];// Reference to network ipam of this instance ip. 
    repeated InstanceIPVirtualNetworkRef virtual_network_refs = 1019 [(gogoproto.customname) = "VirtualNetworkRefs"];// Reference to virtual network of this instance ip. 
    repeated InstanceIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1020 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to virtual machine interface to which this instance ip is attached. 
    repeated InstanceIPPhysicalRouterRef physical_router_refs = 1021 [(gogoproto.customname) = "PhysicalRouterRefs"];// This instance ip is used as IRB address on the referenced physical router (e.g.MX), In case of OVSDB TOR usecase this address will be used as default gateway for Host behind the TOR. 

    
    repeated FloatingIP floating_ips = 3023 [(gogoproto.customname) = "FloatingIPs"]; // floating-ip can be child of instance-ip. By doing so instance-ip can be used as floating-ip. 
}


message InstanceIPNetworkIpamRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPVirtualNetworkRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPPhysicalRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message InstanceIPVirtualRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateInstanceIPRequest {
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP",(gogoproto.jsontag) = "instance-ip"];
}

message CreateInstanceIPResponse {
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP" ,(gogoproto.jsontag) = "instance-ip"];
}

message UpdateInstanceIPRequest {
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP",(gogoproto.jsontag) = "instance-ip"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateInstanceIPResponse {
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP",(gogoproto.jsontag) = "instance-ip"];
}

message DeleteInstanceIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteInstanceIPResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListInstanceIPRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListInstanceIPResponse {
    repeated InstanceIP instance_ips = 1 [(gogoproto.customname) = "InstanceIPs", (gogoproto.jsontag) = "instance-ips"];
}

message GetInstanceIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetInstanceIPResponse {
    InstanceIP instance_ip = 1 [(gogoproto.customname) = "InstanceIP", (gogoproto.jsontag) = "instance-ip"];
}



message InterfaceRouteTable {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    RouteTableType interface_route_table_routes = 9 [(gogoproto.customname) = "InterfaceRouteTableRoutes"]; // Interface route table used same structure as route table, however the next hop field is irrelevant. 

    repeated InterfaceRouteTableServiceInstanceRef service_instance_refs = 1010 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to interface route table attached to (service instance, interface), This is used to add interface static routes to service instance interface. 

}


message InterfaceRouteTableServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateInterfaceRouteTableRequest {
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable",(gogoproto.jsontag) = "interface-route-table"];
}

message CreateInterfaceRouteTableResponse {
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable" ,(gogoproto.jsontag) = "interface-route-table"];
}

message UpdateInterfaceRouteTableRequest {
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable",(gogoproto.jsontag) = "interface-route-table"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateInterfaceRouteTableResponse {
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable",(gogoproto.jsontag) = "interface-route-table"];
}

message DeleteInterfaceRouteTableRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteInterfaceRouteTableResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListInterfaceRouteTableRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListInterfaceRouteTableResponse {
    repeated InterfaceRouteTable interface_route_tables = 1 [(gogoproto.customname) = "InterfaceRouteTables", (gogoproto.jsontag) = "interface-route-tables"];
}

message GetInterfaceRouteTableRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetInterfaceRouteTableResponse {
    InterfaceRouteTable interface_route_table = 1 [(gogoproto.customname) = "InterfaceRouteTable", (gogoproto.jsontag) = "interface-route-table"];
}



message LoadbalancerHealthmonitor {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    LoadbalancerHealthmonitorType loadbalancer_healthmonitor_properties = 9 [(gogoproto.customname) = "LoadbalancerHealthmonitorProperties"]; // Configuration parameters for health monitor like type, method, retries etc. 


}



message CreateLoadbalancerHealthmonitorRequest {
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor",(gogoproto.jsontag) = "loadbalancer-healthmonitor"];
}

message CreateLoadbalancerHealthmonitorResponse {
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor" ,(gogoproto.jsontag) = "loadbalancer-healthmonitor"];
}

message UpdateLoadbalancerHealthmonitorRequest {
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor",(gogoproto.jsontag) = "loadbalancer-healthmonitor"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerHealthmonitorResponse {
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor",(gogoproto.jsontag) = "loadbalancer-healthmonitor"];
}

message DeleteLoadbalancerHealthmonitorRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerHealthmonitorResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerHealthmonitorRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerHealthmonitorResponse {
    repeated LoadbalancerHealthmonitor loadbalancer_healthmonitors = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitors", (gogoproto.jsontag) = "loadbalancer-healthmonitors"];
}

message GetLoadbalancerHealthmonitorRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerHealthmonitorResponse {
    LoadbalancerHealthmonitor loadbalancer_healthmonitor = 1 [(gogoproto.customname) = "LoadbalancerHealthmonitor", (gogoproto.jsontag) = "loadbalancer-healthmonitor"];
}



message LoadbalancerListener {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    LoadbalancerListenerType loadbalancer_listener_properties = 9 [(gogoproto.customname) = "LoadbalancerListenerProperties"]; //  

    repeated LoadbalancerListenerLoadbalancerRef loadbalancer_refs = 1010 [(gogoproto.customname) = "LoadbalancerRefs"];//  

}


message LoadbalancerListenerLoadbalancerRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLoadbalancerListenerRequest {
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener",(gogoproto.jsontag) = "loadbalancer-listener"];
}

message CreateLoadbalancerListenerResponse {
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener" ,(gogoproto.jsontag) = "loadbalancer-listener"];
}

message UpdateLoadbalancerListenerRequest {
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener",(gogoproto.jsontag) = "loadbalancer-listener"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerListenerResponse {
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener",(gogoproto.jsontag) = "loadbalancer-listener"];
}

message DeleteLoadbalancerListenerRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerListenerResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerListenerRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerListenerResponse {
    repeated LoadbalancerListener loadbalancer_listeners = 1 [(gogoproto.customname) = "LoadbalancerListeners", (gogoproto.jsontag) = "loadbalancer-listeners"];
}

message GetLoadbalancerListenerRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerListenerResponse {
    LoadbalancerListener loadbalancer_listener = 1 [(gogoproto.customname) = "LoadbalancerListener", (gogoproto.jsontag) = "loadbalancer-listener"];
}



message LoadbalancerMember {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    LoadbalancerMemberType loadbalancer_member_properties = 9 [(gogoproto.customname) = "LoadbalancerMemberProperties"]; // Member configuration like ip address, destination port, weight etc. 


}



message CreateLoadbalancerMemberRequest {
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember",(gogoproto.jsontag) = "loadbalancer-member"];
}

message CreateLoadbalancerMemberResponse {
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember" ,(gogoproto.jsontag) = "loadbalancer-member"];
}

message UpdateLoadbalancerMemberRequest {
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember",(gogoproto.jsontag) = "loadbalancer-member"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerMemberResponse {
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember",(gogoproto.jsontag) = "loadbalancer-member"];
}

message DeleteLoadbalancerMemberRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerMemberResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerMemberRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerMemberResponse {
    repeated LoadbalancerMember loadbalancer_members = 1 [(gogoproto.customname) = "LoadbalancerMembers", (gogoproto.jsontag) = "loadbalancer-members"];
}

message GetLoadbalancerMemberRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerMemberResponse {
    LoadbalancerMember loadbalancer_member = 1 [(gogoproto.customname) = "LoadbalancerMember", (gogoproto.jsontag) = "loadbalancer-member"];
}



message LoadbalancerPool {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    LoadbalancerPoolType loadbalancer_pool_properties = 9 [(gogoproto.customname) = "LoadbalancerPoolProperties"]; // Configuration for loadbalancer pool like protocol, subnet, etc.
    KeyValuePairs loadbalancer_pool_custom_attributes = 10 [(gogoproto.customname) = "LoadbalancerPoolCustomAttributes"]; // Custom loadbalancer config, opaque to the system. Specified as list of Key:Value pairs. Applicable to LBaaS V1.
    string loadbalancer_pool_provider = 11 [(gogoproto.customname) = "LoadbalancerPoolProvider"]; // Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the backend. Applicable to LBaaS V1 

    repeated LoadbalancerPoolVirtualMachineInterfaceRef virtual_machine_interface_refs = 1013 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to the virtual machine interface reaching pool subnet, applicable to LBaaS V1. 
    repeated LoadbalancerPoolLoadbalancerListenerRef loadbalancer_listener_refs = 1014 [(gogoproto.customname) = "LoadbalancerListenerRefs"];// Reference to loadbalancer listener served by this pool, applicable to LBaaS V2. 
    repeated LoadbalancerPoolServiceInstanceRef service_instance_refs = 1015 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to the service instance serving this pool, applicable to LBaaS V1. 
    repeated LoadbalancerPoolLoadbalancerHealthmonitorRef loadbalancer_healthmonitor_refs = 1016 [(gogoproto.customname) = "LoadbalancerHealthmonitorRefs"];// Reference to loadbalancer healthmonitor that this pool uses. 
    repeated LoadbalancerPoolServiceApplianceSetRef service_appliance_set_refs = 1012 [(gogoproto.customname) = "ServiceApplianceSetRefs"];//  

    
    repeated LoadbalancerMember loadbalancer_members = 3017 [(gogoproto.customname) = "LoadbalancerMembers"]; // Configuration object representing each member of load balancer pool. 
}


message LoadbalancerPoolLoadbalancerHealthmonitorRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolServiceApplianceSetRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolLoadbalancerListenerRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerPoolServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLoadbalancerPoolRequest {
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool",(gogoproto.jsontag) = "loadbalancer-pool"];
}

message CreateLoadbalancerPoolResponse {
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool" ,(gogoproto.jsontag) = "loadbalancer-pool"];
}

message UpdateLoadbalancerPoolRequest {
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool",(gogoproto.jsontag) = "loadbalancer-pool"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerPoolResponse {
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool",(gogoproto.jsontag) = "loadbalancer-pool"];
}

message DeleteLoadbalancerPoolRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerPoolResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerPoolRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerPoolResponse {
    repeated LoadbalancerPool loadbalancer_pools = 1 [(gogoproto.customname) = "LoadbalancerPools", (gogoproto.jsontag) = "loadbalancer-pools"];
}

message GetLoadbalancerPoolRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerPoolResponse {
    LoadbalancerPool loadbalancer_pool = 1 [(gogoproto.customname) = "LoadbalancerPool", (gogoproto.jsontag) = "loadbalancer-pool"];
}



message Loadbalancer {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    LoadbalancerType loadbalancer_properties = 9 [(gogoproto.customname) = "LoadbalancerProperties"]; // Loadbalancer configuration like  admin state, VIP, VIP subnet etc.
    string loadbalancer_provider = 10 [(gogoproto.customname) = "LoadbalancerProvider"]; // Provider field selects backend provider of the LBaaS, Cloudadmin could offer different levels of service like gold, silver, bronze. Provided by  HA-proxy or various HW or SW appliances in the backend. 

    repeated LoadbalancerServiceApplianceSetRef service_appliance_set_refs = 1011 [(gogoproto.customname) = "ServiceApplianceSetRefs"];//  
    repeated LoadbalancerVirtualMachineInterfaceRef virtual_machine_interface_refs = 1012 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to the virtual machine interface for VIP, created automatically by the system. 
    repeated LoadbalancerServiceInstanceRef service_instance_refs = 1013 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to the service instance, created automatically by the system. 

}


message LoadbalancerServiceApplianceSetRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LoadbalancerServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLoadbalancerRequest {
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer",(gogoproto.jsontag) = "loadbalancer"];
}

message CreateLoadbalancerResponse {
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer" ,(gogoproto.jsontag) = "loadbalancer"];
}

message UpdateLoadbalancerRequest {
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer",(gogoproto.jsontag) = "loadbalancer"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLoadbalancerResponse {
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer",(gogoproto.jsontag) = "loadbalancer"];
}

message DeleteLoadbalancerRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLoadbalancerResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLoadbalancerRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLoadbalancerResponse {
    repeated Loadbalancer loadbalancers = 1 [(gogoproto.customname) = "Loadbalancers", (gogoproto.jsontag) = "loadbalancers"];
}

message GetLoadbalancerRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLoadbalancerResponse {
    Loadbalancer loadbalancer = 1 [(gogoproto.customname) = "Loadbalancer", (gogoproto.jsontag) = "loadbalancer"];
}



message LogicalInterface {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    int64 logical_interface_vlan_tag = 9 [(gogoproto.customname) = "LogicalInterfaceVlanTag"]; // VLAN tag (.1Q) classifier for this logical interface.
    string logical_interface_type = 10 [(gogoproto.customname) = "LogicalInterfaceType"]; //  

    repeated LogicalInterfaceVirtualMachineInterfaceRef virtual_machine_interface_refs = 1011 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// References to virtual machine interfaces that represent end points that are reachable by this logical interface. 

}


message LogicalInterfaceVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLogicalInterfaceRequest {
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface",(gogoproto.jsontag) = "logical-interface"];
}

message CreateLogicalInterfaceResponse {
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface" ,(gogoproto.jsontag) = "logical-interface"];
}

message UpdateLogicalInterfaceRequest {
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface",(gogoproto.jsontag) = "logical-interface"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLogicalInterfaceResponse {
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface",(gogoproto.jsontag) = "logical-interface"];
}

message DeleteLogicalInterfaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLogicalInterfaceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLogicalInterfaceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLogicalInterfaceResponse {
    repeated LogicalInterface logical_interfaces = 1 [(gogoproto.customname) = "LogicalInterfaces", (gogoproto.jsontag) = "logical-interfaces"];
}

message GetLogicalInterfaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLogicalInterfaceResponse {
    LogicalInterface logical_interface = 1 [(gogoproto.customname) = "LogicalInterface", (gogoproto.jsontag) = "logical-interface"];
}



message LogicalRouter {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string vxlan_network_identifier = 9 [(gogoproto.customname) = "VxlanNetworkIdentifier"]; // The VNI that needs to be associated with the internal VN if vxlan_routing mode is enabled.
    RouteTargetList configured_route_target_list = 10 [(gogoproto.customname) = "ConfiguredRouteTargetList"]; // List of route targets that represent this logical router, all virtual networks connected to this logical router will have this as their route target list. 

    repeated LogicalRouterBGPVPNRef bgpvpn_refs = 1017 [(gogoproto.customname) = "BGPVPNRefs"];// Back reference to logical router associated to the BGP VPN resource 
    repeated LogicalRouterRouteTargetRef route_target_refs = 1011 [(gogoproto.customname) = "RouteTargetRefs"];// Route target that represent this logical router. 
    repeated LogicalRouterVirtualMachineInterfaceRef virtual_machine_interface_refs = 1012 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to the interface attached to this logical router. By attaching a interface to logical network all subnets in the virtual network of the interface has this router. 
    repeated LogicalRouterServiceInstanceRef service_instance_refs = 1013 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to service instance doing SNAT functionality for external gateway. 
    repeated LogicalRouterRouteTableRef route_table_refs = 1014 [(gogoproto.customname) = "RouteTableRefs"];// Reference to the route table attached to this logical router. By attaching route table, system will create static routes with the route target only of route targets linked to this logical router 
    repeated LogicalRouterVirtualNetworkRef virtual_network_refs = 1015 [(gogoproto.customname) = "VirtualNetworkRefs"];// Reference to virtual network used as external gateway for this logical network. This link will cause a SNAT being spawned between all networks connected to logical router and external network. 
    repeated LogicalRouterPhysicalRouterRef physical_router_refs = 1016 [(gogoproto.customname) = "PhysicalRouterRefs"];// Reference to physical router, when this link is present device manager configures logical router associated route targets/interfaces on the Physical Router. 

}


message LogicalRouterRouteTargetRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterRouteTableRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterVirtualNetworkRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterPhysicalRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message LogicalRouterBGPVPNRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateLogicalRouterRequest {
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter",(gogoproto.jsontag) = "logical-router"];
}

message CreateLogicalRouterResponse {
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter" ,(gogoproto.jsontag) = "logical-router"];
}

message UpdateLogicalRouterRequest {
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter",(gogoproto.jsontag) = "logical-router"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLogicalRouterResponse {
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter",(gogoproto.jsontag) = "logical-router"];
}

message DeleteLogicalRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLogicalRouterResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLogicalRouterRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLogicalRouterResponse {
    repeated LogicalRouter logical_routers = 1 [(gogoproto.customname) = "LogicalRouters", (gogoproto.jsontag) = "logical-routers"];
}

message GetLogicalRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLogicalRouterResponse {
    LogicalRouter logical_router = 1 [(gogoproto.customname) = "LogicalRouter", (gogoproto.jsontag) = "logical-router"];
}



message Namespace {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    SubnetType namespace_cidr = 9 [(gogoproto.customname) = "NamespaceCidr"]; // All networks in this namespace belong to this list of Prefixes. Not implemented. 


}



message CreateNamespaceRequest {
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace",(gogoproto.jsontag) = "namespace"];
}

message CreateNamespaceResponse {
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace" ,(gogoproto.jsontag) = "namespace"];
}

message UpdateNamespaceRequest {
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace",(gogoproto.jsontag) = "namespace"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNamespaceResponse {
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace",(gogoproto.jsontag) = "namespace"];
}

message DeleteNamespaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNamespaceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNamespaceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNamespaceResponse {
    repeated Namespace namespaces = 1 [(gogoproto.customname) = "Namespaces", (gogoproto.jsontag) = "namespaces"];
}

message GetNamespaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNamespaceResponse {
    Namespace namespace = 1 [(gogoproto.customname) = "Namespace", (gogoproto.jsontag) = "namespace"];
}



message NetworkDeviceConfig {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated NetworkDeviceConfigPhysicalRouterRef physical_router_refs = 1009 [(gogoproto.customname) = "PhysicalRouterRefs"];// Network device config of a physical router. 

}


message NetworkDeviceConfigPhysicalRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateNetworkDeviceConfigRequest {
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig",(gogoproto.jsontag) = "network-device-config"];
}

message CreateNetworkDeviceConfigResponse {
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig" ,(gogoproto.jsontag) = "network-device-config"];
}

message UpdateNetworkDeviceConfigRequest {
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig",(gogoproto.jsontag) = "network-device-config"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNetworkDeviceConfigResponse {
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig",(gogoproto.jsontag) = "network-device-config"];
}

message DeleteNetworkDeviceConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNetworkDeviceConfigResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNetworkDeviceConfigRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNetworkDeviceConfigResponse {
    repeated NetworkDeviceConfig network_device_configs = 1 [(gogoproto.customname) = "NetworkDeviceConfigs", (gogoproto.jsontag) = "network-device-configs"];
}

message GetNetworkDeviceConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNetworkDeviceConfigResponse {
    NetworkDeviceConfig network_device_config = 1 [(gogoproto.customname) = "NetworkDeviceConfig", (gogoproto.jsontag) = "network-device-config"];
}



message NetworkIpam {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    IpamType network_ipam_mgmt = 9 [(gogoproto.customname) = "NetworkIpamMGMT"]; // Network IP Address Management configuration.
    IpamSubnets ipam_subnets = 10 [(gogoproto.customname) = "IpamSubnets"]; // List of subnets for this ipam.
    string ipam_subnet_method = 11 [(gogoproto.customname) = "IpamSubnetMethod"]; // Subnet method configuration for ipam, user can configure user-defined, flat or auto. 

    repeated NetworkIpamVirtualDNSRef virtual_DNS_refs = 1012 [(gogoproto.customname) = "VirtualDNSRefs"];// Reference to virtual DNS used by this IPAM. 

}


message NetworkIpamVirtualDNSRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateNetworkIpamRequest {
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam",(gogoproto.jsontag) = "network-ipam"];
}

message CreateNetworkIpamResponse {
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam" ,(gogoproto.jsontag) = "network-ipam"];
}

message UpdateNetworkIpamRequest {
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam",(gogoproto.jsontag) = "network-ipam"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNetworkIpamResponse {
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam",(gogoproto.jsontag) = "network-ipam"];
}

message DeleteNetworkIpamRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNetworkIpamResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNetworkIpamRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNetworkIpamResponse {
    repeated NetworkIpam network_ipams = 1 [(gogoproto.customname) = "NetworkIpams", (gogoproto.jsontag) = "network-ipams"];
}

message GetNetworkIpamRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNetworkIpamResponse {
    NetworkIpam network_ipam = 1 [(gogoproto.customname) = "NetworkIpam", (gogoproto.jsontag) = "network-ipam"];
}



message NetworkPolicy {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    PolicyEntriesType network_policy_entries = 9 [(gogoproto.customname) = "NetworkPolicyEntries"]; // Network policy rule entries. 


}



message CreateNetworkPolicyRequest {
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy",(gogoproto.jsontag) = "network-policy"];
}

message CreateNetworkPolicyResponse {
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy" ,(gogoproto.jsontag) = "network-policy"];
}

message UpdateNetworkPolicyRequest {
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy",(gogoproto.jsontag) = "network-policy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNetworkPolicyResponse {
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy",(gogoproto.jsontag) = "network-policy"];
}

message DeleteNetworkPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNetworkPolicyResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNetworkPolicyRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNetworkPolicyResponse {
    repeated NetworkPolicy network_policys = 1 [(gogoproto.customname) = "NetworkPolicys", (gogoproto.jsontag) = "network-policys"];
}

message GetNetworkPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNetworkPolicyResponse {
    NetworkPolicy network_policy = 1 [(gogoproto.customname) = "NetworkPolicy", (gogoproto.jsontag) = "network-policy"];
}



message PeeringPolicy {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string peering_service = 9 [(gogoproto.customname) = "PeeringService"]; // Peering policy service type. 


}



message CreatePeeringPolicyRequest {
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy",(gogoproto.jsontag) = "peering-policy"];
}

message CreatePeeringPolicyResponse {
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy" ,(gogoproto.jsontag) = "peering-policy"];
}

message UpdatePeeringPolicyRequest {
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy",(gogoproto.jsontag) = "peering-policy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePeeringPolicyResponse {
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy",(gogoproto.jsontag) = "peering-policy"];
}

message DeletePeeringPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePeeringPolicyResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPeeringPolicyRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPeeringPolicyResponse {
    repeated PeeringPolicy peering_policys = 1 [(gogoproto.customname) = "PeeringPolicys", (gogoproto.jsontag) = "peering-policys"];
}

message GetPeeringPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPeeringPolicyResponse {
    PeeringPolicy peering_policy = 1 [(gogoproto.customname) = "PeeringPolicy", (gogoproto.jsontag) = "peering-policy"];
}



message PhysicalInterface {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string ethernet_segment_identifier = 9 [(gogoproto.customname) = "EthernetSegmentIdentifier"]; // Ethernet Segment Id configured for the Physical Interface. In a multihomed environment, user should configure the peer Physical interface with the same ESI. 

    repeated PhysicalInterfacePhysicalInterfaceRef physical_interface_refs = 1010 [(gogoproto.customname) = "PhysicalInterfaceRefs"];// Reference to the other physical interface that is connected to this  physical interface. 

    
    repeated LogicalInterface logical_interfaces = 3011 [(gogoproto.customname) = "LogicalInterfaces"]; // Logical interfaces on physical interface on physical routers. 
}


message PhysicalInterfacePhysicalInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreatePhysicalInterfaceRequest {
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface",(gogoproto.jsontag) = "physical-interface"];
}

message CreatePhysicalInterfaceResponse {
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface" ,(gogoproto.jsontag) = "physical-interface"];
}

message UpdatePhysicalInterfaceRequest {
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface",(gogoproto.jsontag) = "physical-interface"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePhysicalInterfaceResponse {
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface",(gogoproto.jsontag) = "physical-interface"];
}

message DeletePhysicalInterfaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePhysicalInterfaceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPhysicalInterfaceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPhysicalInterfaceResponse {
    repeated PhysicalInterface physical_interfaces = 1 [(gogoproto.customname) = "PhysicalInterfaces", (gogoproto.jsontag) = "physical-interfaces"];
}

message GetPhysicalInterfaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPhysicalInterfaceResponse {
    PhysicalInterface physical_interface = 1 [(gogoproto.customname) = "PhysicalInterface", (gogoproto.jsontag) = "physical-interface"];
}



message PhysicalRouter {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string physical_router_management_ip = 9 [(gogoproto.customname) = "PhysicalRouterManagementIP"]; // Management ip for this physical router. It is used by the device manager to perform netconf and by SNMP collector if enabled.
    SNMPCredentials physical_router_snmp_credentials = 10 [(gogoproto.customname) = "PhysicalRouterSNMPCredentials"]; // SNMP credentials for the physical router used by SNMP collector.
    string physical_router_role = 11 [(gogoproto.customname) = "PhysicalRouterRole"]; // Physical router role (e.g spine or leaf), used by the device manager to provision physical router, for e.g device manager may choose to configure physical router based on its role.
    UserCredentials physical_router_user_credentials = 12 [(gogoproto.customname) = "PhysicalRouterUserCredentials"]; // Username and password for netconf to the physical router by device manager.
    string physical_router_vendor_name = 13 [(gogoproto.customname) = "PhysicalRouterVendorName"]; // Vendor name of the physical router (e.g juniper). Used by the device manager to select driver.
    bool physical_router_vnc_managed = 14 [(gogoproto.customname) = "PhysicalRouterVNCManaged"]; // This physical router is enabled to be configured by device manager.
    string physical_router_product_name = 15 [(gogoproto.customname) = "PhysicalRouterProductName"]; // Model name of the physical router (e.g juniper). Used by the device manager to select driver.
    bool physical_router_lldp = 16 [(gogoproto.customname) = "PhysicalRouterLLDP"]; // LLDP support on this router
    string physical_router_loopback_ip = 17 [(gogoproto.customname) = "PhysicalRouterLoopbackIP"]; // This is ip address of loopback interface of physical router. Used by the device manager to configure physical router loopback interface.
    string physical_router_image_uri = 18 [(gogoproto.customname) = "PhysicalRouterImageURI"]; // Physical router OS image uri
    TelemetryStateInfo telemetry_info = 19 [(gogoproto.customname) = "TelemetryInfo"]; // Telemetry info of router. Check TelemetryStateInfo
    bool physical_router_snmp = 20 [(gogoproto.customname) = "PhysicalRouterSNMP"]; // SNMP support on this router
    string physical_router_dataplane_ip = 21 [(gogoproto.customname) = "PhysicalRouterDataplaneIP"]; // This is ip address in the ip-fabric(underlay) network that can be used in data plane by physical router. Usually it is the VTEP address in VxLAN for the TOR switch.
    JunosServicePorts physical_router_junos_service_ports = 22 [(gogoproto.customname) = "PhysicalRouterJunosServicePorts"]; // Juniper JUNOS specific service interfaces name  to perform services like NAT. 

    repeated PhysicalRouterVirtualNetworkRef virtual_network_refs = 1023 [(gogoproto.customname) = "VirtualNetworkRefs"];// Reference to virtual network, whose VRF is present on this physical router, Applicable when only VRF is present with no physical interfaces from this physical vrouter. Generally used when using device manager and option A+B for this virtual network in L3VPN use case. 
    repeated PhysicalRouterBGPRouterRef bgp_router_refs = 1024 [(gogoproto.customname) = "BGPRouterRefs"];// Reference to BGP peer representing this physical router. 
    repeated PhysicalRouterVirtualRouterRef virtual_router_refs = 1025 [(gogoproto.customname) = "VirtualRouterRefs"];// Reference to vrouter responsible for this physical router. Currently only applicable for vrouters that are TOR agents. 

    
    repeated LogicalInterface logical_interfaces = 3026 [(gogoproto.customname) = "LogicalInterfaces"]; // Logical interfaces on physical routers. 
    
    repeated PhysicalInterface physical_interfaces = 3027 [(gogoproto.customname) = "PhysicalInterfaces"]; // Physical interfaces on physical routers. 
}


message PhysicalRouterVirtualNetworkRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message PhysicalRouterBGPRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message PhysicalRouterVirtualRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreatePhysicalRouterRequest {
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter",(gogoproto.jsontag) = "physical-router"];
}

message CreatePhysicalRouterResponse {
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter" ,(gogoproto.jsontag) = "physical-router"];
}

message UpdatePhysicalRouterRequest {
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter",(gogoproto.jsontag) = "physical-router"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePhysicalRouterResponse {
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter",(gogoproto.jsontag) = "physical-router"];
}

message DeletePhysicalRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePhysicalRouterResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPhysicalRouterRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPhysicalRouterResponse {
    repeated PhysicalRouter physical_routers = 1 [(gogoproto.customname) = "PhysicalRouters", (gogoproto.jsontag) = "physical-routers"];
}

message GetPhysicalRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPhysicalRouterResponse {
    PhysicalRouter physical_router = 1 [(gogoproto.customname) = "PhysicalRouter", (gogoproto.jsontag) = "physical-router"];
}



message PolicyManagement {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


    
    repeated AddressGroup address_groups = 3009 [(gogoproto.customname) = "AddressGroups"]; // Address Group object 
    
    repeated ApplicationPolicySet application_policy_sets = 3010 [(gogoproto.customname) = "ApplicationPolicySets"]; // Application-policy object defining policies to apply for a given application tag 
    
    repeated FirewallPolicy firewall_policys = 3011 [(gogoproto.customname) = "FirewallPolicys"]; // firewall-policy object consisting of one or more firewall rules 
    
    repeated FirewallRule firewall_rules = 3012 [(gogoproto.customname) = "FirewallRules"]; // Firewall-rule object 
    
    repeated ServiceGroup service_groups = 3013 [(gogoproto.customname) = "ServiceGroups"]; // Service Group object 
}



message CreatePolicyManagementRequest {
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement",(gogoproto.jsontag) = "policy-management"];
}

message CreatePolicyManagementResponse {
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement" ,(gogoproto.jsontag) = "policy-management"];
}

message UpdatePolicyManagementRequest {
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement",(gogoproto.jsontag) = "policy-management"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePolicyManagementResponse {
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement",(gogoproto.jsontag) = "policy-management"];
}

message DeletePolicyManagementRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePolicyManagementResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPolicyManagementRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPolicyManagementResponse {
    repeated PolicyManagement policy_managements = 1 [(gogoproto.customname) = "PolicyManagements", (gogoproto.jsontag) = "policy-managements"];
}

message GetPolicyManagementRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPolicyManagementResponse {
    PolicyManagement policy_management = 1 [(gogoproto.customname) = "PolicyManagement", (gogoproto.jsontag) = "policy-management"];
}



message PortTuple {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


}



message CreatePortTupleRequest {
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple",(gogoproto.jsontag) = "port-tuple"];
}

message CreatePortTupleResponse {
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple" ,(gogoproto.jsontag) = "port-tuple"];
}

message UpdatePortTupleRequest {
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple",(gogoproto.jsontag) = "port-tuple"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdatePortTupleResponse {
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple",(gogoproto.jsontag) = "port-tuple"];
}

message DeletePortTupleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeletePortTupleResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListPortTupleRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListPortTupleResponse {
    repeated PortTuple port_tuples = 1 [(gogoproto.customname) = "PortTuples", (gogoproto.jsontag) = "port-tuples"];
}

message GetPortTupleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetPortTupleResponse {
    PortTuple port_tuple = 1 [(gogoproto.customname) = "PortTuple", (gogoproto.jsontag) = "port-tuple"];
}



message Project {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    bool vxlan_routing = 9 [(gogoproto.customname) = "VxlanRouting"]; // When this knob is enabled for a project, an internal system VN (VN-Int) is created for every logical router in the project.
    bool alarm_enable = 10 [(gogoproto.customname) = "AlarmEnable"]; // Flag to enable/disable alarms configured under global-system-config. True, if not set.
    QuotaType quota = 11 [(gogoproto.customname) = "Quota"]; // Max instances limits for various objects under project. 

    repeated ProjectNamespaceRef namespace_refs = 1013 [(gogoproto.customname) = "NamespaceRefs"];// Reference to network namespace of this project. 
    repeated ProjectApplicationPolicySetRef application_policy_set_refs = 1014 [(gogoproto.customname) = "ApplicationPolicySetRefs"];// Reference to default application-policy-set is automatically createdby system for default socped application policy sets. Needed by vrouter to identify default application-policy-set rules of a virtual machine interface 
    repeated ProjectFloatingIPPoolRef floating_ip_pool_refs = 1015 [(gogoproto.customname) = "FloatingIPPoolRefs"];// Reference to floating ip pool in this project. 
    repeated ProjectAliasIPPoolRef alias_ip_pool_refs = 1012 [(gogoproto.customname) = "AliasIPPoolRefs"];// Reference to alias ip pool in this project. 

    
    repeated AddressGroup address_groups = 3016 [(gogoproto.customname) = "AddressGroups"]; // Project level address Group object 
    
    repeated Alarm alarms = 3017 [(gogoproto.customname) = "Alarms"]; // List of alarms that are applicable to objects anchored under the project. 
    
    repeated APIAccessList api_access_lists = 3018 [(gogoproto.customname) = "APIAccessLists"]; // API access list is list of rules that define role based access to each API and its properties at project level. 
    
    repeated ApplicationPolicySet application_policy_sets = 3019 [(gogoproto.customname) = "ApplicationPolicySets"]; // Project level application-policy object defining policies to apply for a given application tag 
    
    repeated BGPAsAService bgp_as_a_services = 3020 [(gogoproto.customname) = "BGPAsAServices"]; // BGP as service object represents BGP peer in the virtual network that can participate in dynamic routing with implicit default gateway of the virtual network. 
    
    repeated BGPVPN bgpvpns = 3021 [(gogoproto.customname) = "BGPVPNs"]; // BGP VPN resource contains a set of parameters for a BGP-based VPN 
    
    repeated FirewallPolicy firewall_policys = 3022 [(gogoproto.customname) = "FirewallPolicys"]; // Project level firewall-policy object consisting of one or more firewall rules 
    
    repeated FirewallRule firewall_rules = 3023 [(gogoproto.customname) = "FirewallRules"]; // Project level firewall-rule object 
    
    repeated InterfaceRouteTable interface_route_tables = 3024 [(gogoproto.customname) = "InterfaceRouteTables"]; // Interface route table is mechanism to add static routes pointing to this interface. 
    
    repeated LoadbalancerHealthmonitor loadbalancer_healthmonitors = 3025 [(gogoproto.customname) = "LoadbalancerHealthmonitors"]; // Health monitor objects is configuration to monitor health of individual pool members. 
    
    repeated LoadbalancerListener loadbalancer_listeners = 3026 [(gogoproto.customname) = "LoadbalancerListeners"]; // Listener represents the application(protocol, port) to be load balanced. 
    
    repeated LoadbalancerPool loadbalancer_pools = 3027 [(gogoproto.customname) = "LoadbalancerPools"]; // Loadbalancer pool object represent set(pool) member servers which needs load balancing. 
    
    repeated Loadbalancer loadbalancers = 3028 [(gogoproto.customname) = "Loadbalancers"]; // Loadbalancer object represents a LBaaS instance. One single Virtual IP and multiple (listeners, pools). Applicable to LBaaS V2. 
    
    repeated LogicalRouter logical_routers = 3029 [(gogoproto.customname) = "LogicalRouters"]; // Logical router is a mechanism to connect multiple virtual network as they have been connected by a router. 
    
    repeated NetworkIpam network_ipams = 3030 [(gogoproto.customname) = "NetworkIpams"]; // IP Address Management object that controls, ip allocation, DNS and DHCP 
    
    repeated NetworkPolicy network_policys = 3031 [(gogoproto.customname) = "NetworkPolicys"]; // Network Policy is set access control rules that can be attached to virtual networks. Network ACL(s) and connectivity information is derived from Network policies that are attached to virtual networks. 
    
    repeated QosConfig qos_configs = 3032 [(gogoproto.customname) = "QosConfigs"]; //  
    
    repeated RouteAggregate route_aggregates = 3033 [(gogoproto.customname) = "RouteAggregates"]; // List of references of child routing route aggregate objects. automatically maintained by system. 
    
    repeated RouteTable route_tables = 3034 [(gogoproto.customname) = "RouteTables"]; // Network route table is mechanism of adding static routes in the virtual network 
    
    repeated RoutingPolicy routing_policys = 3035 [(gogoproto.customname) = "RoutingPolicys"]; // List of references of child routing policy objects. automatically maintained by system. 
    
    repeated SecurityGroup security_groups = 3036 [(gogoproto.customname) = "SecurityGroups"]; // Security Groups are set of state full access control rules attached to interfaces.It can be used to implement microsegmentation. 
    
    repeated SecurityLoggingObject security_logging_objects = 3037 [(gogoproto.customname) = "SecurityLoggingObjects"]; // Security logging object configuration for specifying session logging criteria 
    
    repeated ServiceGroup service_groups = 3038 [(gogoproto.customname) = "ServiceGroups"]; // Project level service Group object 
    
    repeated ServiceHealthCheck service_health_checks = 3039 [(gogoproto.customname) = "ServiceHealthChecks"]; // Service health check is a keepalive mechanism for the virtual machine interface. Liveliness of the interface is determined based on configuration in the service health check. It is mainly designed for service instance interfaces. However it will work with any interface which present on contrail vrouter. 
    
    repeated ServiceInstance service_instances = 3040 [(gogoproto.customname) = "ServiceInstances"]; // Service instance represents logical instance service used in the virtual world, e.g. firewall, load balancer etc. It can represent one or multiple virtual machines or physical devices. Many service instances can share a virtual machine or physical device. 
    
    repeated Tag tags = 3041 [(gogoproto.customname) = "Tags"]; // Attribute attached to objects - has a type and value 
    
    repeated User users = 3042 [(gogoproto.customname) = "Users"]; // Reference to a project of this user. 
    
    repeated VirtualIP virtual_ips = 3043 [(gogoproto.customname) = "VirtualIPs"]; // Virtual ip object application(protocol, port). Applicable only to LBaaS V1 
    
    repeated VirtualMachineInterface virtual_machine_interfaces = 3044 [(gogoproto.customname) = "VirtualMachineInterfaces"]; // Virtual machine interface represent a interface(port) into virtual network. It may or may not have corresponding virtual machine. A virtual machine interface has atleast a MAC address and Ip address. 
    
    repeated VirtualNetwork virtual_networks = 3045 [(gogoproto.customname) = "VirtualNetworks"]; // Virtual network is collection of end points (interface or ip(s) or MAC(s)) that can talk to each other by default. It is collection of subnets connected by implicit router which default gateway in each subnet. 
}


message ProjectAliasIPPoolRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ProjectNamespaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    SubnetType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message ProjectApplicationPolicySetRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ProjectFloatingIPPoolRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateProjectRequest {
    Project project = 1 [(gogoproto.customname) = "Project",(gogoproto.jsontag) = "project"];
}

message CreateProjectResponse {
    Project project = 1 [(gogoproto.customname) = "Project" ,(gogoproto.jsontag) = "project"];
}

message UpdateProjectRequest {
    Project project = 1 [(gogoproto.customname) = "Project",(gogoproto.jsontag) = "project"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateProjectResponse {
    Project project = 1 [(gogoproto.customname) = "Project",(gogoproto.jsontag) = "project"];
}

message DeleteProjectRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteProjectResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListProjectRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListProjectResponse {
    repeated Project projects = 1 [(gogoproto.customname) = "Projects", (gogoproto.jsontag) = "projects"];
}

message GetProjectRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetProjectResponse {
    Project project = 1 [(gogoproto.customname) = "Project", (gogoproto.jsontag) = "project"];
}



message ProviderAttachment {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ProviderAttachmentVirtualRouterRef virtual_router_refs = 1009 [(gogoproto.customname) = "VirtualRouterRefs"];// Not in Use. 

}


message ProviderAttachmentVirtualRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateProviderAttachmentRequest {
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment",(gogoproto.jsontag) = "provider-attachment"];
}

message CreateProviderAttachmentResponse {
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment" ,(gogoproto.jsontag) = "provider-attachment"];
}

message UpdateProviderAttachmentRequest {
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment",(gogoproto.jsontag) = "provider-attachment"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateProviderAttachmentResponse {
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment",(gogoproto.jsontag) = "provider-attachment"];
}

message DeleteProviderAttachmentRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteProviderAttachmentResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListProviderAttachmentRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListProviderAttachmentResponse {
    repeated ProviderAttachment provider_attachments = 1 [(gogoproto.customname) = "ProviderAttachments", (gogoproto.jsontag) = "provider-attachments"];
}

message GetProviderAttachmentRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetProviderAttachmentResponse {
    ProviderAttachment provider_attachment = 1 [(gogoproto.customname) = "ProviderAttachment", (gogoproto.jsontag) = "provider-attachment"];
}



message QosConfig {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string qos_config_type = 9 [(gogoproto.customname) = "QosConfigType"]; // Specifies if qos-config is for vhost, fabric or for project.
    QosIdForwardingClassPairs mpls_exp_entries = 10 [(gogoproto.customname) = "MPLSExpEntries"]; // Map of MPLS EXP values to applicable forwarding class for packet.
    QosIdForwardingClassPairs vlan_priority_entries = 11 [(gogoproto.customname) = "VlanPriorityEntries"]; // Map of .1p priority code to applicable forwarding class for packet.
    int64 default_forwarding_class_id = 12 [(gogoproto.customname) = "DefaultForwardingClassID"]; // Default forwarding class used for all non-specified QOS bits
    QosIdForwardingClassPairs dscp_entries = 13 [(gogoproto.customname) = "DSCPEntries"]; // Map of DSCP match condition and applicable forwarding class for packet. 

    repeated QosConfigGlobalSystemConfigRef global_system_config_refs = 1014 [(gogoproto.customname) = "GlobalSystemConfigRefs"];// This link is internally created and may be removed in future. End users should not set this link or assume it to be there 

}


message QosConfigGlobalSystemConfigRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateQosConfigRequest {
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig",(gogoproto.jsontag) = "qos-config"];
}

message CreateQosConfigResponse {
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig" ,(gogoproto.jsontag) = "qos-config"];
}

message UpdateQosConfigRequest {
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig",(gogoproto.jsontag) = "qos-config"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateQosConfigResponse {
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig",(gogoproto.jsontag) = "qos-config"];
}

message DeleteQosConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteQosConfigResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListQosConfigRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListQosConfigResponse {
    repeated QosConfig qos_configs = 1 [(gogoproto.customname) = "QosConfigs", (gogoproto.jsontag) = "qos-configs"];
}

message GetQosConfigRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetQosConfigResponse {
    QosConfig qos_config = 1 [(gogoproto.customname) = "QosConfig", (gogoproto.jsontag) = "qos-config"];
}



message QosQueue {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    int64 qos_queue_identifier = 9 [(gogoproto.customname) = "QosQueueIdentifier"]; // Unique id for this queue.
    int64 max_bandwidth = 10 [(gogoproto.customname) = "MaxBandwidth"]; // Maximum bandwidth for this queue.
    int64 min_bandwidth = 11 [(gogoproto.customname) = "MinBandwidth"]; // Minimum bandwidth for this queue. 


}



message CreateQosQueueRequest {
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue",(gogoproto.jsontag) = "qos-queue"];
}

message CreateQosQueueResponse {
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue" ,(gogoproto.jsontag) = "qos-queue"];
}

message UpdateQosQueueRequest {
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue",(gogoproto.jsontag) = "qos-queue"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateQosQueueResponse {
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue",(gogoproto.jsontag) = "qos-queue"];
}

message DeleteQosQueueRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteQosQueueResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListQosQueueRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListQosQueueResponse {
    repeated QosQueue qos_queues = 1 [(gogoproto.customname) = "QosQueues", (gogoproto.jsontag) = "qos-queues"];
}

message GetQosQueueRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetQosQueueResponse {
    QosQueue qos_queue = 1 [(gogoproto.customname) = "QosQueue", (gogoproto.jsontag) = "qos-queue"];
}



message RouteAggregate {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated RouteAggregateServiceInstanceRef service_instance_refs = 1009 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to route-aggregate policy attached to (service instance, interface). 

}


message RouteAggregateServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateRouteAggregateRequest {
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate",(gogoproto.jsontag) = "route-aggregate"];
}

message CreateRouteAggregateResponse {
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate" ,(gogoproto.jsontag) = "route-aggregate"];
}

message UpdateRouteAggregateRequest {
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate",(gogoproto.jsontag) = "route-aggregate"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRouteAggregateResponse {
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate",(gogoproto.jsontag) = "route-aggregate"];
}

message DeleteRouteAggregateRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRouteAggregateResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRouteAggregateRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRouteAggregateResponse {
    repeated RouteAggregate route_aggregates = 1 [(gogoproto.customname) = "RouteAggregates", (gogoproto.jsontag) = "route-aggregates"];
}

message GetRouteAggregateRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRouteAggregateResponse {
    RouteAggregate route_aggregate = 1 [(gogoproto.customname) = "RouteAggregate", (gogoproto.jsontag) = "route-aggregate"];
}



message RouteTable {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    RouteTableType routes = 9 [(gogoproto.customname) = "Routes"]; // Routes in the route table are configured in following way. 


}



message CreateRouteTableRequest {
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable",(gogoproto.jsontag) = "route-table"];
}

message CreateRouteTableResponse {
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable" ,(gogoproto.jsontag) = "route-table"];
}

message UpdateRouteTableRequest {
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable",(gogoproto.jsontag) = "route-table"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRouteTableResponse {
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable",(gogoproto.jsontag) = "route-table"];
}

message DeleteRouteTableRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRouteTableResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRouteTableRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRouteTableResponse {
    repeated RouteTable route_tables = 1 [(gogoproto.customname) = "RouteTables", (gogoproto.jsontag) = "route-tables"];
}

message GetRouteTableRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRouteTableResponse {
    RouteTable route_table = 1 [(gogoproto.customname) = "RouteTable", (gogoproto.jsontag) = "route-table"];
}



message RouteTarget {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


}



message CreateRouteTargetRequest {
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget",(gogoproto.jsontag) = "route-target"];
}

message CreateRouteTargetResponse {
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget" ,(gogoproto.jsontag) = "route-target"];
}

message UpdateRouteTargetRequest {
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget",(gogoproto.jsontag) = "route-target"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRouteTargetResponse {
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget",(gogoproto.jsontag) = "route-target"];
}

message DeleteRouteTargetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRouteTargetResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRouteTargetRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRouteTargetResponse {
    repeated RouteTarget route_targets = 1 [(gogoproto.customname) = "RouteTargets", (gogoproto.jsontag) = "route-targets"];
}

message GetRouteTargetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRouteTargetResponse {
    RouteTarget route_target = 1 [(gogoproto.customname) = "RouteTarget", (gogoproto.jsontag) = "route-target"];
}



message RoutingInstance {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


}



message CreateRoutingInstanceRequest {
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance",(gogoproto.jsontag) = "routing-instance"];
}

message CreateRoutingInstanceResponse {
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance" ,(gogoproto.jsontag) = "routing-instance"];
}

message UpdateRoutingInstanceRequest {
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance",(gogoproto.jsontag) = "routing-instance"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRoutingInstanceResponse {
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance",(gogoproto.jsontag) = "routing-instance"];
}

message DeleteRoutingInstanceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRoutingInstanceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRoutingInstanceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRoutingInstanceResponse {
    repeated RoutingInstance routing_instances = 1 [(gogoproto.customname) = "RoutingInstances", (gogoproto.jsontag) = "routing-instances"];
}

message GetRoutingInstanceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRoutingInstanceResponse {
    RoutingInstance routing_instance = 1 [(gogoproto.customname) = "RoutingInstance", (gogoproto.jsontag) = "routing-instance"];
}



message RoutingPolicy {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated RoutingPolicyServiceInstanceRef service_instance_refs = 1009 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to routing policy attached to (service instance, interface). 

}


message RoutingPolicyServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    RoutingPolicyServiceInstanceType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateRoutingPolicyRequest {
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy",(gogoproto.jsontag) = "routing-policy"];
}

message CreateRoutingPolicyResponse {
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy" ,(gogoproto.jsontag) = "routing-policy"];
}

message UpdateRoutingPolicyRequest {
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy",(gogoproto.jsontag) = "routing-policy"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateRoutingPolicyResponse {
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy",(gogoproto.jsontag) = "routing-policy"];
}

message DeleteRoutingPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteRoutingPolicyResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListRoutingPolicyRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListRoutingPolicyResponse {
    repeated RoutingPolicy routing_policys = 1 [(gogoproto.customname) = "RoutingPolicys", (gogoproto.jsontag) = "routing-policys"];
}

message GetRoutingPolicyRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetRoutingPolicyResponse {
    RoutingPolicy routing_policy = 1 [(gogoproto.customname) = "RoutingPolicy", (gogoproto.jsontag) = "routing-policy"];
}



message SecurityGroup {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    PolicyEntriesType security_group_entries = 9 [(gogoproto.customname) = "SecurityGroupEntries"]; // Security group rule entries.
    int64 configured_security_group_id = 10 [(gogoproto.customname) = "ConfiguredSecurityGroupID"]; // Unique 32 bit user defined ID assigned to this security group [1, 8M - 1].
    int64 security_group_id = 11 [(gogoproto.customname) = "SecurityGroupID"]; // Unique 32 bit ID automatically assigned to this security group [8M+1, 32G]. 


    
    repeated AccessControlList access_control_lists = 3012 [(gogoproto.customname) = "AccessControlLists"]; // port access control list is  automatically derived from all the security groups attached to port. 
}



message CreateSecurityGroupRequest {
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup",(gogoproto.jsontag) = "security-group"];
}

message CreateSecurityGroupResponse {
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup" ,(gogoproto.jsontag) = "security-group"];
}

message UpdateSecurityGroupRequest {
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup",(gogoproto.jsontag) = "security-group"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateSecurityGroupResponse {
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup",(gogoproto.jsontag) = "security-group"];
}

message DeleteSecurityGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteSecurityGroupResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListSecurityGroupRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListSecurityGroupResponse {
    repeated SecurityGroup security_groups = 1 [(gogoproto.customname) = "SecurityGroups", (gogoproto.jsontag) = "security-groups"];
}

message GetSecurityGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetSecurityGroupResponse {
    SecurityGroup security_group = 1 [(gogoproto.customname) = "SecurityGroup", (gogoproto.jsontag) = "security-group"];
}



message SecurityLoggingObject {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    SecurityLoggingObjectRuleListType security_logging_object_rules = 9 [(gogoproto.customname) = "SecurityLoggingObjectRules"]; // Security logging object rules derived internally.
    int64 security_logging_object_rate = 10 [(gogoproto.customname) = "SecurityLoggingObjectRate"]; // Security logging object rate defining rate of session logging 

    repeated SecurityLoggingObjectSecurityGroupRef security_group_refs = 1011 [(gogoproto.customname) = "SecurityGroupRefs"];// Reference to security-group attached to this security-logging-object 
    repeated SecurityLoggingObjectNetworkPolicyRef network_policy_refs = 1012 [(gogoproto.customname) = "NetworkPolicyRefs"];// Reference to network-policy attached to this security-logging-object 

}


message SecurityLoggingObjectSecurityGroupRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    SecurityLoggingObjectRuleListType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message SecurityLoggingObjectNetworkPolicyRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    SecurityLoggingObjectRuleListType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateSecurityLoggingObjectRequest {
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject",(gogoproto.jsontag) = "security-logging-object"];
}

message CreateSecurityLoggingObjectResponse {
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject" ,(gogoproto.jsontag) = "security-logging-object"];
}

message UpdateSecurityLoggingObjectRequest {
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject",(gogoproto.jsontag) = "security-logging-object"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateSecurityLoggingObjectResponse {
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject",(gogoproto.jsontag) = "security-logging-object"];
}

message DeleteSecurityLoggingObjectRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteSecurityLoggingObjectResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListSecurityLoggingObjectRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListSecurityLoggingObjectResponse {
    repeated SecurityLoggingObject security_logging_objects = 1 [(gogoproto.customname) = "SecurityLoggingObjects", (gogoproto.jsontag) = "security-logging-objects"];
}

message GetSecurityLoggingObjectRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetSecurityLoggingObjectResponse {
    SecurityLoggingObject security_logging_object = 1 [(gogoproto.customname) = "SecurityLoggingObject", (gogoproto.jsontag) = "security-logging-object"];
}



message ServiceAppliance {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    UserCredentials service_appliance_user_credentials = 9 [(gogoproto.customname) = "ServiceApplianceUserCredentials"]; // Authentication credentials for driver to access service appliance.
    string service_appliance_ip_address = 10 [(gogoproto.customname) = "ServiceApplianceIPAddress"]; // Management Ip address of the service-appliance.
    KeyValuePairs service_appliance_properties = 11 [(gogoproto.customname) = "ServiceApplianceProperties"]; // List of Key:Value pairs used by the provider driver of this service appliance. 

    repeated ServiceAppliancePhysicalInterfaceRef physical_interface_refs = 1012 [(gogoproto.customname) = "PhysicalInterfaceRefs"];// Reference to physical interface that can be used as (service interface type)left, right, management OR other. 

}


message ServiceAppliancePhysicalInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceApplianceInterfaceType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateServiceApplianceRequest {
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance",(gogoproto.jsontag) = "service-appliance"];
}

message CreateServiceApplianceResponse {
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance" ,(gogoproto.jsontag) = "service-appliance"];
}

message UpdateServiceApplianceRequest {
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance",(gogoproto.jsontag) = "service-appliance"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceApplianceResponse {
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance",(gogoproto.jsontag) = "service-appliance"];
}

message DeleteServiceApplianceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceApplianceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceApplianceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceApplianceResponse {
    repeated ServiceAppliance service_appliances = 1 [(gogoproto.customname) = "ServiceAppliances", (gogoproto.jsontag) = "service-appliances"];
}

message GetServiceApplianceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceApplianceResponse {
    ServiceAppliance service_appliance = 1 [(gogoproto.customname) = "ServiceAppliance", (gogoproto.jsontag) = "service-appliance"];
}



message ServiceApplianceSet {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    KeyValuePairs service_appliance_set_properties = 9 [(gogoproto.customname) = "ServiceApplianceSetProperties"]; // List of Key:Value pairs that are used by the provider driver and opaque to system.
    string service_appliance_ha_mode = 10 [(gogoproto.customname) = "ServiceApplianceHaMode"]; // High availability mode for the service appliance set, active-active or active-backup.
    string service_appliance_driver = 11 [(gogoproto.customname) = "ServiceApplianceDriver"]; // Name of the provider driver for this service appliance set. 


    
    repeated ServiceAppliance service_appliances = 3012 [(gogoproto.customname) = "ServiceAppliances"]; // Service appliance is a member in service appliance set (e.g. Loadbalancer, Firewall provider).By default system will create &quot;ha-proxy&quot; based service appliance. 
}



message CreateServiceApplianceSetRequest {
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet",(gogoproto.jsontag) = "service-appliance-set"];
}

message CreateServiceApplianceSetResponse {
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet" ,(gogoproto.jsontag) = "service-appliance-set"];
}

message UpdateServiceApplianceSetRequest {
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet",(gogoproto.jsontag) = "service-appliance-set"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceApplianceSetResponse {
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet",(gogoproto.jsontag) = "service-appliance-set"];
}

message DeleteServiceApplianceSetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceApplianceSetResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceApplianceSetRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceApplianceSetResponse {
    repeated ServiceApplianceSet service_appliance_sets = 1 [(gogoproto.customname) = "ServiceApplianceSets", (gogoproto.jsontag) = "service-appliance-sets"];
}

message GetServiceApplianceSetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceApplianceSetResponse {
    ServiceApplianceSet service_appliance_set = 1 [(gogoproto.customname) = "ServiceApplianceSet", (gogoproto.jsontag) = "service-appliance-set"];
}



message ServiceConnectionModule {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string service_type = 9 [(gogoproto.customname) = "ServiceType"]; // Type of service assigned for this object
    string e2_service = 10 [(gogoproto.customname) = "E2Service"]; // E2 service type. 

    repeated ServiceConnectionModuleServiceObjectRef service_object_refs = 1011 [(gogoproto.customname) = "ServiceObjectRefs"];// Links the service-connection-module to a service object. 

}


message ServiceConnectionModuleServiceObjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceConnectionModuleRequest {
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule",(gogoproto.jsontag) = "service-connection-module"];
}

message CreateServiceConnectionModuleResponse {
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule" ,(gogoproto.jsontag) = "service-connection-module"];
}

message UpdateServiceConnectionModuleRequest {
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule",(gogoproto.jsontag) = "service-connection-module"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceConnectionModuleResponse {
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule",(gogoproto.jsontag) = "service-connection-module"];
}

message DeleteServiceConnectionModuleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceConnectionModuleResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceConnectionModuleRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceConnectionModuleResponse {
    repeated ServiceConnectionModule service_connection_modules = 1 [(gogoproto.customname) = "ServiceConnectionModules", (gogoproto.jsontag) = "service-connection-modules"];
}

message GetServiceConnectionModuleRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceConnectionModuleResponse {
    ServiceConnectionModule service_connection_module = 1 [(gogoproto.customname) = "ServiceConnectionModule", (gogoproto.jsontag) = "service-connection-module"];
}



message ServiceEndpoint {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ServiceEndpointServiceConnectionModuleRef service_connection_module_refs = 1009 [(gogoproto.customname) = "ServiceConnectionModuleRefs"];// Link the service endpoint to service connection node 
    repeated ServiceEndpointPhysicalRouterRef physical_router_refs = 1010 [(gogoproto.customname) = "PhysicalRouterRefs"];// Reference to Router for a given service. 
    repeated ServiceEndpointServiceObjectRef service_object_refs = 1011 [(gogoproto.customname) = "ServiceObjectRefs"];// Links the service-endpoints to a service object. 

}


message ServiceEndpointServiceConnectionModuleRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ServiceEndpointPhysicalRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message ServiceEndpointServiceObjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceEndpointRequest {
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint",(gogoproto.jsontag) = "service-endpoint"];
}

message CreateServiceEndpointResponse {
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint" ,(gogoproto.jsontag) = "service-endpoint"];
}

message UpdateServiceEndpointRequest {
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint",(gogoproto.jsontag) = "service-endpoint"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceEndpointResponse {
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint",(gogoproto.jsontag) = "service-endpoint"];
}

message DeleteServiceEndpointRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceEndpointResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceEndpointRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceEndpointResponse {
    repeated ServiceEndpoint service_endpoints = 1 [(gogoproto.customname) = "ServiceEndpoints", (gogoproto.jsontag) = "service-endpoints"];
}

message GetServiceEndpointRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceEndpointResponse {
    ServiceEndpoint service_endpoint = 1 [(gogoproto.customname) = "ServiceEndpoint", (gogoproto.jsontag) = "service-endpoint"];
}



message ServiceGroup {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    FirewallServiceGroupType service_group_firewall_service_list = 9 [(gogoproto.customname) = "ServiceGroupFirewallServiceList"]; // list of service objects (protocol, source port and destination port 


}



message CreateServiceGroupRequest {
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup",(gogoproto.jsontag) = "service-group"];
}

message CreateServiceGroupResponse {
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup" ,(gogoproto.jsontag) = "service-group"];
}

message UpdateServiceGroupRequest {
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup",(gogoproto.jsontag) = "service-group"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceGroupResponse {
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup",(gogoproto.jsontag) = "service-group"];
}

message DeleteServiceGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceGroupResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceGroupRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceGroupResponse {
    repeated ServiceGroup service_groups = 1 [(gogoproto.customname) = "ServiceGroups", (gogoproto.jsontag) = "service-groups"];
}

message GetServiceGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceGroupResponse {
    ServiceGroup service_group = 1 [(gogoproto.customname) = "ServiceGroup", (gogoproto.jsontag) = "service-group"];
}



message ServiceHealthCheck {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    ServiceHealthCheckType service_health_check_properties = 9 [(gogoproto.customname) = "ServiceHealthCheckProperties"]; // Service health check has following fields. 

    repeated ServiceHealthCheckServiceInstanceRef service_instance_refs = 1010 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to service instance using this service health check. 

}


message ServiceHealthCheckServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateServiceHealthCheckRequest {
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck",(gogoproto.jsontag) = "service-health-check"];
}

message CreateServiceHealthCheckResponse {
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck" ,(gogoproto.jsontag) = "service-health-check"];
}

message UpdateServiceHealthCheckRequest {
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck",(gogoproto.jsontag) = "service-health-check"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceHealthCheckResponse {
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck",(gogoproto.jsontag) = "service-health-check"];
}

message DeleteServiceHealthCheckRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceHealthCheckResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceHealthCheckRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceHealthCheckResponse {
    repeated ServiceHealthCheck service_health_checks = 1 [(gogoproto.customname) = "ServiceHealthChecks", (gogoproto.jsontag) = "service-health-checks"];
}

message GetServiceHealthCheckRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceHealthCheckResponse {
    ServiceHealthCheck service_health_check = 1 [(gogoproto.customname) = "ServiceHealthCheck", (gogoproto.jsontag) = "service-health-check"];
}



message ServiceInstance {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    KeyValuePairs service_instance_bindings = 9 [(gogoproto.customname) = "ServiceInstanceBindings"]; // Opaque key value pair for generating config for the service instance.
    ServiceInstanceType service_instance_properties = 10 [(gogoproto.customname) = "ServiceInstanceProperties"]; // Service instance configuration parameters. 

    repeated ServiceInstanceServiceTemplateRef service_template_refs = 1011 [(gogoproto.customname) = "ServiceTemplateRefs"];// Reference to the service template of this service instance. 
    repeated ServiceInstanceInstanceIPRef instance_ip_refs = 1012 [(gogoproto.customname) = "InstanceIPRefs"];// Reference to ip address, which is used as nexthop pointing to (service instance, service interface). 

    
    repeated PortTuple port_tuples = 3013 [(gogoproto.customname) = "PortTuples"]; //  
}


message ServiceInstanceInstanceIPRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    ServiceInterfaceTag attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message ServiceInstanceServiceTemplateRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceInstanceRequest {
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance",(gogoproto.jsontag) = "service-instance"];
}

message CreateServiceInstanceResponse {
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance" ,(gogoproto.jsontag) = "service-instance"];
}

message UpdateServiceInstanceRequest {
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance",(gogoproto.jsontag) = "service-instance"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceInstanceResponse {
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance",(gogoproto.jsontag) = "service-instance"];
}

message DeleteServiceInstanceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceInstanceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceInstanceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceInstanceResponse {
    repeated ServiceInstance service_instances = 1 [(gogoproto.customname) = "ServiceInstances", (gogoproto.jsontag) = "service-instances"];
}

message GetServiceInstanceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceInstanceResponse {
    ServiceInstance service_instance = 1 [(gogoproto.customname) = "ServiceInstance", (gogoproto.jsontag) = "service-instance"];
}



message ServiceObject {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 


}



message CreateServiceObjectRequest {
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject",(gogoproto.jsontag) = "service-object"];
}

message CreateServiceObjectResponse {
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject" ,(gogoproto.jsontag) = "service-object"];
}

message UpdateServiceObjectRequest {
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject",(gogoproto.jsontag) = "service-object"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceObjectResponse {
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject",(gogoproto.jsontag) = "service-object"];
}

message DeleteServiceObjectRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceObjectResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceObjectRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceObjectResponse {
    repeated ServiceObject service_objects = 1 [(gogoproto.customname) = "ServiceObjects", (gogoproto.jsontag) = "service-objects"];
}

message GetServiceObjectRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceObjectResponse {
    ServiceObject service_object = 1 [(gogoproto.customname) = "ServiceObject", (gogoproto.jsontag) = "service-object"];
}



message ServiceTemplate {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    ServiceTemplateType service_template_properties = 9 [(gogoproto.customname) = "ServiceTemplateProperties"]; // Service template configuration parameters. 

    repeated ServiceTemplateServiceApplianceSetRef service_appliance_set_refs = 1010 [(gogoproto.customname) = "ServiceApplianceSetRefs"];// Reference to the service appliance set represented by this service template. 

}


message ServiceTemplateServiceApplianceSetRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateServiceTemplateRequest {
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate",(gogoproto.jsontag) = "service-template"];
}

message CreateServiceTemplateResponse {
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate" ,(gogoproto.jsontag) = "service-template"];
}

message UpdateServiceTemplateRequest {
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate",(gogoproto.jsontag) = "service-template"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServiceTemplateResponse {
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate",(gogoproto.jsontag) = "service-template"];
}

message DeleteServiceTemplateRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServiceTemplateResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServiceTemplateRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServiceTemplateResponse {
    repeated ServiceTemplate service_templates = 1 [(gogoproto.customname) = "ServiceTemplates", (gogoproto.jsontag) = "service-templates"];
}

message GetServiceTemplateRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServiceTemplateResponse {
    ServiceTemplate service_template = 1 [(gogoproto.customname) = "ServiceTemplate", (gogoproto.jsontag) = "service-template"];
}



message Subnet {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    SubnetType subnet_ip_prefix = 9 [(gogoproto.customname) = "SubnetIPPrefix"]; // Ip prefix/length of the subnet. 

    repeated SubnetVirtualMachineInterfaceRef virtual_machine_interface_refs = 1010 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Subnet belongs of the referenced virtual machine interface. This is used in CPE use case when a subnet is reachable via the interface. It also serves as dynamic DHCP pool for host on this LAN, where vrouter is DHCP server. 

}


message SubnetVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateSubnetRequest {
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet",(gogoproto.jsontag) = "subnet"];
}

message CreateSubnetResponse {
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet" ,(gogoproto.jsontag) = "subnet"];
}

message UpdateSubnetRequest {
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet",(gogoproto.jsontag) = "subnet"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateSubnetResponse {
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet",(gogoproto.jsontag) = "subnet"];
}

message DeleteSubnetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteSubnetResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListSubnetRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListSubnetResponse {
    repeated Subnet subnets = 1 [(gogoproto.customname) = "Subnets", (gogoproto.jsontag) = "subnets"];
}

message GetSubnetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetSubnetResponse {
    Subnet subnet = 1 [(gogoproto.customname) = "Subnet", (gogoproto.jsontag) = "subnet"];
}



message Tag {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string tag_type_name = 9 [(gogoproto.customname) = "TagTypeName"]; // Tag type string representation
    string tag_id = 10 [(gogoproto.customname) = "TagID"]; // Internal Tag ID encapsulating tag type and value in                  hexadecimal fomat: 0xTTTTVVVV (T: type, V: value)
    string tag_value = 11 [(gogoproto.customname) = "TagValue"]; // Tag value string representation 

    repeated TagTagTypeRef tag_type_refs = 1012 [(gogoproto.customname) = "TagTypeRefs"];// Tag type reference which is limited to one 

}


message TagTagTypeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateTagRequest {
    Tag tag = 1 [(gogoproto.customname) = "Tag",(gogoproto.jsontag) = "tag"];
}

message CreateTagResponse {
    Tag tag = 1 [(gogoproto.customname) = "Tag" ,(gogoproto.jsontag) = "tag"];
}

message UpdateTagRequest {
    Tag tag = 1 [(gogoproto.customname) = "Tag",(gogoproto.jsontag) = "tag"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateTagResponse {
    Tag tag = 1 [(gogoproto.customname) = "Tag",(gogoproto.jsontag) = "tag"];
}

message DeleteTagRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteTagResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListTagRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListTagResponse {
    repeated Tag tags = 1 [(gogoproto.customname) = "Tags", (gogoproto.jsontag) = "tags"];
}

message GetTagRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetTagResponse {
    Tag tag = 1 [(gogoproto.customname) = "Tag", (gogoproto.jsontag) = "tag"];
}



message TagType {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string tag_type_id = 9 [(gogoproto.customname) = "TagTypeID"]; // Internal Tag type ID                  coded on 16 bits where the first 255 IDs are reserved                  and pre-defined. Users (principally cloud admin) can define                  arbitrary types but its automatically shared to all project as                  it is a global resource. 


}



message CreateTagTypeRequest {
    TagType tag_type = 1 [(gogoproto.customname) = "TagType",(gogoproto.jsontag) = "tag-type"];
}

message CreateTagTypeResponse {
    TagType tag_type = 1 [(gogoproto.customname) = "TagType" ,(gogoproto.jsontag) = "tag-type"];
}

message UpdateTagTypeRequest {
    TagType tag_type = 1 [(gogoproto.customname) = "TagType",(gogoproto.jsontag) = "tag-type"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateTagTypeResponse {
    TagType tag_type = 1 [(gogoproto.customname) = "TagType",(gogoproto.jsontag) = "tag-type"];
}

message DeleteTagTypeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteTagTypeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListTagTypeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListTagTypeResponse {
    repeated TagType tag_types = 1 [(gogoproto.customname) = "TagTypes", (gogoproto.jsontag) = "tag-types"];
}

message GetTagTypeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetTagTypeResponse {
    TagType tag_type = 1 [(gogoproto.customname) = "TagType", (gogoproto.jsontag) = "tag-type"];
}



message User {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string password = 9 [(gogoproto.customname) = "Password"]; // Domain level quota, not currently implemented 


}



message CreateUserRequest {
    User user = 1 [(gogoproto.customname) = "User",(gogoproto.jsontag) = "user"];
}

message CreateUserResponse {
    User user = 1 [(gogoproto.customname) = "User" ,(gogoproto.jsontag) = "user"];
}

message UpdateUserRequest {
    User user = 1 [(gogoproto.customname) = "User",(gogoproto.jsontag) = "user"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateUserResponse {
    User user = 1 [(gogoproto.customname) = "User",(gogoproto.jsontag) = "user"];
}

message DeleteUserRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteUserResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListUserRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListUserResponse {
    repeated User users = 1 [(gogoproto.customname) = "Users", (gogoproto.jsontag) = "users"];
}

message GetUserRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetUserResponse {
    User user = 1 [(gogoproto.customname) = "User", (gogoproto.jsontag) = "user"];
}



message VirtualDNSRecord {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    VirtualDnsRecordType virtual_DNS_record_data = 9 [(gogoproto.customname) = "VirtualDNSRecordData"]; // DNS record data has configuration like type, name, ip address, loadbalancing etc. 


}



message CreateVirtualDNSRecordRequest {
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord",(gogoproto.jsontag) = "virtual-DNS-record"];
}

message CreateVirtualDNSRecordResponse {
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord" ,(gogoproto.jsontag) = "virtual-DNS-record"];
}

message UpdateVirtualDNSRecordRequest {
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord",(gogoproto.jsontag) = "virtual-DNS-record"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualDNSRecordResponse {
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord",(gogoproto.jsontag) = "virtual-DNS-record"];
}

message DeleteVirtualDNSRecordRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualDNSRecordResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualDNSRecordRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualDNSRecordResponse {
    repeated VirtualDNSRecord virtual_DNS_records = 1 [(gogoproto.customname) = "VirtualDNSRecords", (gogoproto.jsontag) = "virtual-DNS-records"];
}

message GetVirtualDNSRecordRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualDNSRecordResponse {
    VirtualDNSRecord virtual_DNS_record = 1 [(gogoproto.customname) = "VirtualDNSRecord", (gogoproto.jsontag) = "virtual-DNS-record"];
}



message VirtualDNS {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    VirtualDnsType virtual_DNS_data = 9 [(gogoproto.customname) = "VirtualDNSData"]; // Virtual DNS data has configuration for virtual DNS like domain, dynamic records etc. 


    
    repeated VirtualDNSRecord virtual_DNS_records = 3010 [(gogoproto.customname) = "VirtualDNSRecords"]; // Static DNS records in virtual DNS server. 
}



message CreateVirtualDNSRequest {
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS",(gogoproto.jsontag) = "virtual-DNS"];
}

message CreateVirtualDNSResponse {
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS" ,(gogoproto.jsontag) = "virtual-DNS"];
}

message UpdateVirtualDNSRequest {
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS",(gogoproto.jsontag) = "virtual-DNS"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualDNSResponse {
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS",(gogoproto.jsontag) = "virtual-DNS"];
}

message DeleteVirtualDNSRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualDNSResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualDNSRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualDNSResponse {
    repeated VirtualDNS virtual_DNSs = 1 [(gogoproto.customname) = "VirtualDNSs", (gogoproto.jsontag) = "virtual-DNSs"];
}

message GetVirtualDNSRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualDNSResponse {
    VirtualDNS virtual_DNS = 1 [(gogoproto.customname) = "VirtualDNS", (gogoproto.jsontag) = "virtual-DNS"];
}



message VirtualIP {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    VirtualIpType virtual_ip_properties = 9 [(gogoproto.customname) = "VirtualIPProperties"]; // Virtual ip configuration like port, protocol, subnet etc. 

    repeated VirtualIPLoadbalancerPoolRef loadbalancer_pool_refs = 1010 [(gogoproto.customname) = "LoadbalancerPoolRefs"];// Reference to the load balancer pool that this virtual ip represent. Applicable only to LBaaS V1 
    repeated VirtualIPVirtualMachineInterfaceRef virtual_machine_interface_refs = 1011 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// Reference to the virtual machine interface for virtual ip. Applicable only to LBaaS V1 

}


message VirtualIPLoadbalancerPoolRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualIPVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualIPRequest {
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP",(gogoproto.jsontag) = "virtual-ip"];
}

message CreateVirtualIPResponse {
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP" ,(gogoproto.jsontag) = "virtual-ip"];
}

message UpdateVirtualIPRequest {
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP",(gogoproto.jsontag) = "virtual-ip"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualIPResponse {
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP",(gogoproto.jsontag) = "virtual-ip"];
}

message DeleteVirtualIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualIPResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualIPRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualIPResponse {
    repeated VirtualIP virtual_ips = 1 [(gogoproto.customname) = "VirtualIPs", (gogoproto.jsontag) = "virtual-ips"];
}

message GetVirtualIPRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualIPResponse {
    VirtualIP virtual_ip = 1 [(gogoproto.customname) = "VirtualIP", (gogoproto.jsontag) = "virtual-ip"];
}



message VirtualMachineInterface {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 9 [(gogoproto.customname) = "EcmpHashingIncludeFields"]; // ECMP hashing config at global level.
    RouteTableType virtual_machine_interface_host_routes = 10 [(gogoproto.customname) = "VirtualMachineInterfaceHostRoutes"]; // List of host routes(prefixes, nexthop) that are passed to VM via DHCP.
    MacAddressesType virtual_machine_interface_mac_addresses = 11 [(gogoproto.customname) = "VirtualMachineInterfaceMacAddresses"]; // MAC address of the virtual machine interface, automatically assigned by system if not provided.
    DhcpOptionsListType virtual_machine_interface_dhcp_option_list = 12 [(gogoproto.customname) = "VirtualMachineInterfaceDHCPOptionList"]; // DHCP options configuration specific to this interface.
    KeyValuePairs virtual_machine_interface_bindings = 13 [(gogoproto.customname) = "VirtualMachineInterfaceBindings"]; // Dictionary of arbitrary (key, value) for this interface. Neutron port bindings use this.
    bool virtual_machine_interface_disable_policy = 14 [(gogoproto.customname) = "VirtualMachineInterfaceDisablePolicy"]; // When True all policy checks for ingress and egress traffic from this interface are disabled. Flow table entries are not created. Features that require policy will not work on this interface, these include security group, floating IP, service chain, linklocal services.
    AllowedAddressPairs virtual_machine_interface_allowed_address_pairs = 15 [(gogoproto.customname) = "VirtualMachineInterfaceAllowedAddressPairs"]; // List of (IP address, MAC) other than instance ip on this interface.
    FatFlowProtocols virtual_machine_interface_fat_flow_protocols = 16 [(gogoproto.customname) = "VirtualMachineInterfaceFatFlowProtocols"]; // List of (protocol, port number), for flows to interface with (protocol, destination port number), vrouter will ignore source port while setting up flow and ignore it as source port in reverse flow. Hence many flows will map to single flow.
    bool vlan_tag_based_bridge_domain = 17 [(gogoproto.customname) = "VlanTagBasedBridgeDomain"]; // Enable VLAN tag based bridge domain classification on the port
    string virtual_machine_interface_device_owner = 18 [(gogoproto.customname) = "VirtualMachineInterfaceDeviceOwner"]; // For openstack compatibility, not used by system.
    VrfAssignTableType vrf_assign_table = 19 [(gogoproto.customname) = "VRFAssignTable"]; // VRF assignment policy for this interface, automatically generated by system.
    bool port_security_enabled = 20 [(gogoproto.customname) = "PortSecurityEnabled"]; // Port security status on the network
    VirtualMachineInterfacePropertiesType virtual_machine_interface_properties = 21 [(gogoproto.customname) = "VirtualMachineInterfaceProperties"]; // Virtual Machine Interface miscellaneous configurations. 

    repeated VirtualMachineInterfaceBGPRouterRef bgp_router_refs = 1024 [(gogoproto.customname) = "BGPRouterRefs"];// Reference to bgp-router from the virtual machine interface. 
    repeated VirtualMachineInterfaceRoutingInstanceRef routing_instance_refs = 1027 [(gogoproto.customname) = "RoutingInstanceRefs"];// Automatically generated Forwarding policy. This will be deprecated in future in favour of VRF assign rules. 
    repeated VirtualMachineInterfaceQosConfigRef qos_config_refs = 1028 [(gogoproto.customname) = "QosConfigRefs"];// Reference to QoS config for this virtual machine interface. 
    repeated VirtualMachineInterfaceVirtualMachineInterfaceRef virtual_machine_interface_refs = 1022 [(gogoproto.customname) = "VirtualMachineInterfaceRefs"];// List of references to the sub interfaces of this interface. 
    repeated VirtualMachineInterfaceVirtualMachineRef virtual_machine_refs = 1023 [(gogoproto.customname) = "VirtualMachineRefs"];// This interface belongs to the referenced virtual machine. 
    repeated VirtualMachineInterfacePhysicalInterfaceRef physical_interface_refs = 1030 [(gogoproto.customname) = "PhysicalInterfaceRefs"];// Reference to the physical interface of service appliance this service interface represents. 
    repeated VirtualMachineInterfaceServiceHealthCheckRef service_health_check_refs = 1031 [(gogoproto.customname) = "ServiceHealthCheckRefs"];// Reference to health check object attached to this interface. 
    repeated VirtualMachineInterfaceSecurityGroupRef security_group_refs = 1032 [(gogoproto.customname) = "SecurityGroupRefs"];// Interface ACL, Automatically generated by system based on security groups attached to this interface. 
    repeated VirtualMachineInterfaceVirtualNetworkRef virtual_network_refs = 1033 [(gogoproto.customname) = "VirtualNetworkRefs"];// This interface is member of the referenced virtual network. 
    repeated VirtualMachineInterfaceSecurityLoggingObjectRef security_logging_object_refs = 1025 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];// Reference to security logging object for this virtual machine interface 
    repeated VirtualMachineInterfaceInterfaceRouteTableRef interface_route_table_refs = 1026 [(gogoproto.customname) = "InterfaceRouteTableRefs"];// Reference to the interface route table attached to this interface. 
    repeated VirtualMachineInterfacePortTupleRef port_tuple_refs = 1029 [(gogoproto.customname) = "PortTupleRefs"];//  
    repeated VirtualMachineInterfaceServiceEndpointRef service_endpoint_refs = 1035 [(gogoproto.customname) = "ServiceEndpointRefs"];// Links the access endpoint i.e virtual-machine-interface to service endpoint. 
    repeated VirtualMachineInterfaceBridgeDomainRef bridge_domain_refs = 1034 [(gogoproto.customname) = "BridgeDomainRefs"];// Virtual Machine interface maps to a bridge-domain by defaultor based on in coming 802.1Q vlan tag 

}


message VirtualMachineInterfaceBGPRouterRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceRoutingInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    PolicyBasedForwardingRuleType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualMachineInterfaceQosConfigRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceSecurityGroupRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceVirtualNetworkRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceVirtualMachineInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceVirtualMachineRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfacePhysicalInterfaceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceServiceHealthCheckRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceSecurityLoggingObjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceInterfaceRouteTableRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfacePortTupleRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceServiceEndpointRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualMachineInterfaceBridgeDomainRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    BridgeDomainMembershipType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateVirtualMachineInterfaceRequest {
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface",(gogoproto.jsontag) = "virtual-machine-interface"];
}

message CreateVirtualMachineInterfaceResponse {
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface" ,(gogoproto.jsontag) = "virtual-machine-interface"];
}

message UpdateVirtualMachineInterfaceRequest {
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface",(gogoproto.jsontag) = "virtual-machine-interface"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualMachineInterfaceResponse {
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface",(gogoproto.jsontag) = "virtual-machine-interface"];
}

message DeleteVirtualMachineInterfaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualMachineInterfaceResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualMachineInterfaceRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualMachineInterfaceResponse {
    repeated VirtualMachineInterface virtual_machine_interfaces = 1 [(gogoproto.customname) = "VirtualMachineInterfaces", (gogoproto.jsontag) = "virtual-machine-interfaces"];
}

message GetVirtualMachineInterfaceRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualMachineInterfaceResponse {
    VirtualMachineInterface virtual_machine_interface = 1 [(gogoproto.customname) = "VirtualMachineInterface", (gogoproto.jsontag) = "virtual-machine-interface"];
}



message VirtualMachine {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated VirtualMachineServiceInstanceRef service_instance_refs = 1009 [(gogoproto.customname) = "ServiceInstanceRefs"];// Reference to the service instance of this virtual machine. 

    
    repeated VirtualMachineInterface virtual_machine_interfaces = 3010 [(gogoproto.customname) = "VirtualMachineInterfaces"]; // References to child interfaces this virtual machine has, this is DEPRECATED. 
}


message VirtualMachineServiceInstanceRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualMachineRequest {
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine",(gogoproto.jsontag) = "virtual-machine"];
}

message CreateVirtualMachineResponse {
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine" ,(gogoproto.jsontag) = "virtual-machine"];
}

message UpdateVirtualMachineRequest {
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine",(gogoproto.jsontag) = "virtual-machine"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualMachineResponse {
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine",(gogoproto.jsontag) = "virtual-machine"];
}

message DeleteVirtualMachineRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualMachineResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualMachineRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualMachineResponse {
    repeated VirtualMachine virtual_machines = 1 [(gogoproto.customname) = "VirtualMachines", (gogoproto.jsontag) = "virtual-machines"];
}

message GetVirtualMachineRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualMachineResponse {
    VirtualMachine virtual_machine = 1 [(gogoproto.customname) = "VirtualMachine", (gogoproto.jsontag) = "virtual-machine"];
}



message VirtualNetwork {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    VirtualNetworkType virtual_network_properties = 9 [(gogoproto.customname) = "VirtualNetworkProperties"]; // Virtual network miscellaneous configurations.
    EcmpHashingIncludeFields ecmp_hashing_include_fields = 10 [(gogoproto.customname) = "EcmpHashingIncludeFields"]; // ECMP hashing config at global level.
    int64 virtual_network_network_id = 11 [(gogoproto.customname) = "VirtualNetworkNetworkID"]; // System assigned unique 32 bit ID for every virtual network.
    string address_allocation_mode = 12 [(gogoproto.customname) = "AddressAllocationMode"]; // Address allocation mode for virtual network.
    bool pbb_evpn_enable = 13 [(gogoproto.customname) = "PBBEvpnEnable"]; // Enable/Disable PBB EVPN tunneling on the network
    bool router_external = 14 [(gogoproto.customname) = "RouterExternal"]; // When true, this virtual network is openstack router external network.
    RouteTargetList import_route_target_list = 15 [(gogoproto.customname) = "ImportRouteTargetList"]; // List of route targets that are used as import for this virtual network.
    int64 mac_aging_time = 16 [(gogoproto.customname) = "MacAgingTime"]; // MAC aging time on the network
    ProviderDetails provider_properties = 17 [(gogoproto.customname) = "ProviderProperties"]; // Virtual network is provider network. Specifies VLAN tag and physical network name.
    RouteTargetList route_target_list = 18 [(gogoproto.customname) = "RouteTargetList"]; // List of route targets that are used as both import and export for this virtual network.
    bool mac_learning_enabled = 19 [(gogoproto.customname) = "MacLearningEnabled"]; // Enable MAC learning on the network
    RouteTargetList export_route_target_list = 20 [(gogoproto.customname) = "ExportRouteTargetList"]; // List of route targets that are used as export for this virtual network.
    bool flood_unknown_unicast = 21 [(gogoproto.customname) = "FloodUnknownUnicast"]; // When true, packets with unknown unicast MAC address are flooded within the network. Default they are dropped.
    bool pbb_etree_enable = 22 [(gogoproto.customname) = "PBBEtreeEnable"]; // Enable/Disable PBB ETREE mode on the network
    bool layer2_control_word = 23 [(gogoproto.customname) = "Layer2ControlWord"]; // Enable/Disable adding control word to the Layer 2 encapsulation
    bool external_ipam = 24 [(gogoproto.customname) = "ExternalIpam"]; // IP address assignment to VM is done statically, outside of (external to) Contrail Ipam. vCenter only feature.
    bool port_security_enabled = 25 [(gogoproto.customname) = "PortSecurityEnabled"]; // Port security status on the network
    MACMoveLimitControlType mac_move_control = 26 [(gogoproto.customname) = "MacMoveControl"]; // MAC move control on the network
    bool multi_policy_service_chains_enabled = 27 [(gogoproto.customname) = "MultiPolicyServiceChainsEnabled"]; // 
    MACLimitControlType mac_limit_control = 28 [(gogoproto.customname) = "MacLimitControl"]; // MAC limit control on the network
    bool is_shared = 29 [(gogoproto.customname) = "IsShared"]; // When true, this virtual network is shared with all tenants. 

    repeated VirtualNetworkSecurityLoggingObjectRef security_logging_object_refs = 1031 [(gogoproto.customname) = "SecurityLoggingObjectRefs"];// Reference to security logging object for this virtual network. 
    repeated VirtualNetworkNetworkPolicyRef network_policy_refs = 1032 [(gogoproto.customname) = "NetworkPolicyRefs"];// Reference to network-policy attached to this network. It has sequence number to specify attachment order. 
    repeated VirtualNetworkQosConfigRef qos_config_refs = 1033 [(gogoproto.customname) = "QosConfigRefs"];// Reference to QoS configuration for this virtual network. 
    repeated VirtualNetworkRouteTableRef route_table_refs = 1034 [(gogoproto.customname) = "RouteTableRefs"];// Reference to route table attached to this virtual network. 
    repeated VirtualNetworkVirtualNetworkRef virtual_network_refs = 1035 [(gogoproto.customname) = "VirtualNetworkRefs"];// Reference to a virtual network which is the provider network for the given virtual network. Traffic forwarding happens in the routing instance of the provider network. 
    repeated VirtualNetworkBGPVPNRef bgpvpn_refs = 1036 [(gogoproto.customname) = "BGPVPNRefs"];// Back reference to virtual network associated to the BGP VPN resource 
    repeated VirtualNetworkNetworkIpamRef network_ipam_refs = 1030 [(gogoproto.customname) = "NetworkIpamRefs"];// Reference to network-ipam this network is using. It has list of subnets that are being used as property of the reference. 

    
    repeated AccessControlList access_control_lists = 3037 [(gogoproto.customname) = "AccessControlLists"]; // Virtual network access control list are automatically derived from all the network policies attached to virtual network. 
    
    repeated AliasIPPool alias_ip_pools = 3038 [(gogoproto.customname) = "AliasIPPools"]; // Alias ip pool is set of addresses that are carved out of a given network. Ip(s) from this set can be assigned to virtual-machine-interface so that they become members of this network 
    
    repeated BridgeDomain bridge_domains = 3039 [(gogoproto.customname) = "BridgeDomains"]; // bridge-domains configured in a virtual network 
    
    repeated FloatingIPPool floating_ip_pools = 3040 [(gogoproto.customname) = "FloatingIPPools"]; // Floating ip pool is set of ip address that are carved out of a given network. Ip(s) from this set can be assigned to (virtual machine interface, ip) so that they become members of this network using one:one NAT. 
    
    repeated RoutingInstance routing_instances = 3041 [(gogoproto.customname) = "RoutingInstances"]; // List of references of routing instances for this virtual network, routing instances are internal to the system. 
}


message VirtualNetworkQosConfigRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkRouteTableRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkVirtualNetworkRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkBGPVPNRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkNetworkIpamRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    VnSubnetsType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualNetworkSecurityLoggingObjectRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}

message VirtualNetworkNetworkPolicyRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    VirtualNetworkPolicyType attr = 3 [(gogoproto.customname) = "Attr"];
    
}


message CreateVirtualNetworkRequest {
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork",(gogoproto.jsontag) = "virtual-network"];
}

message CreateVirtualNetworkResponse {
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork" ,(gogoproto.jsontag) = "virtual-network"];
}

message UpdateVirtualNetworkRequest {
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork",(gogoproto.jsontag) = "virtual-network"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualNetworkResponse {
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork",(gogoproto.jsontag) = "virtual-network"];
}

message DeleteVirtualNetworkRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualNetworkResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualNetworkRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualNetworkResponse {
    repeated VirtualNetwork virtual_networks = 1 [(gogoproto.customname) = "VirtualNetworks", (gogoproto.jsontag) = "virtual-networks"];
}

message GetVirtualNetworkRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualNetworkResponse {
    VirtualNetwork virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork", (gogoproto.jsontag) = "virtual-network"];
}



message VirtualRouter {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    bool virtual_router_dpdk_enabled = 9 [(gogoproto.customname) = "VirtualRouterDPDKEnabled"]; // This vrouter&#39;s data path is using DPDK library, Virtual machines interfaces scheduled on this compute node will be tagged with additional flags so that they are spawned with user space virtio driver. It is only applicable for embedded vrouter.
    string virtual_router_type = 10 [(gogoproto.customname) = "VirtualRouterType"]; // Different types of the vrouters in the system.
    string virtual_router_ip_address = 11 [(gogoproto.customname) = "VirtualRouterIPAddress"]; // Ip address of the virtual router. 

    repeated VirtualRouterNetworkIpamRef network_ipam_refs = 1012 [(gogoproto.customname) = "NetworkIpamRefs"];// Reference to network-ipam this virtual-router is using. It has list of virtual-router specific allocation-pools and cidrs that are being used as property of the reference. 
    repeated VirtualRouterVirtualMachineRef virtual_machine_refs = 1013 [(gogoproto.customname) = "VirtualMachineRefs"];// References to all virtual machines on this vrouter. This link is not present for dynamically scheduled VMs by Nova. 

    
    repeated VirtualMachineInterface virtual_machine_interfaces = 3014 [(gogoproto.customname) = "VirtualMachineInterfaces"]; // An interface on a virtual-router, e.g. vhost0 
}


message VirtualRouterNetworkIpamRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
    VirtualRouterNetworkIpamType attr = 3 [(gogoproto.customname) = "Attr"];
    
}

message VirtualRouterVirtualMachineRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVirtualRouterRequest {
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter",(gogoproto.jsontag) = "virtual-router"];
}

message CreateVirtualRouterResponse {
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter" ,(gogoproto.jsontag) = "virtual-router"];
}

message UpdateVirtualRouterRequest {
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter",(gogoproto.jsontag) = "virtual-router"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVirtualRouterResponse {
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter",(gogoproto.jsontag) = "virtual-router"];
}

message DeleteVirtualRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVirtualRouterResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVirtualRouterRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVirtualRouterResponse {
    repeated VirtualRouter virtual_routers = 1 [(gogoproto.customname) = "VirtualRouters", (gogoproto.jsontag) = "virtual-routers"];
}

message GetVirtualRouterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVirtualRouterResponse {
    VirtualRouter virtual_router = 1 [(gogoproto.customname) = "VirtualRouter", (gogoproto.jsontag) = "virtual-router"];
}



message AppformixNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated AppformixNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this appformix node. 

}


message AppformixNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateAppformixNodeRequest {
    AppformixNode appformix_node = 1 [(gogoproto.customname) = "AppformixNode",(gogoproto.jsontag) = "appformix-node"];
}

message CreateAppformixNodeResponse {
    AppformixNode appformix_node = 1 [(gogoproto.customname) = "AppformixNode" ,(gogoproto.jsontag) = "appformix-node"];
}

message UpdateAppformixNodeRequest {
    AppformixNode appformix_node = 1 [(gogoproto.customname) = "AppformixNode",(gogoproto.jsontag) = "appformix-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateAppformixNodeResponse {
    AppformixNode appformix_node = 1 [(gogoproto.customname) = "AppformixNode",(gogoproto.jsontag) = "appformix-node"];
}

message DeleteAppformixNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteAppformixNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListAppformixNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListAppformixNodeResponse {
    repeated AppformixNode appformix_nodes = 1 [(gogoproto.customname) = "AppformixNodes", (gogoproto.jsontag) = "appformix-nodes"];
}

message GetAppformixNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetAppformixNodeResponse {
    AppformixNode appformix_node = 1 [(gogoproto.customname) = "AppformixNode", (gogoproto.jsontag) = "appformix-node"];
}



message BaremetalNode {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string name = 9 [(gogoproto.customname) = "Name"]; // Name of the nodename to easily identify Baremetal
    DriverInfo driver_info = 10 [(gogoproto.customname) = "DriverInfo"]; // Details of the driver for power management
    BaremetalProperties bm_properties = 11 [(gogoproto.customname) = "BMProperties"]; // Details of baremetal hardware for scheduler
    string instance_uuid = 12 [(gogoproto.customname) = "InstanceUUID"]; // UUID of the Nova instance associated with this Node
    InstanceInfo instance_info = 13 [(gogoproto.customname) = "InstanceInfo"]; // Details of Instance launched on the baremetal
    bool maintenance = 14 [(gogoproto.customname) = "Maintenance"]; // Whether or not this Node is currently in maintenance mode
    string maintenance_reason = 15 [(gogoproto.customname) = "MaintenanceReason"]; // Reason why this Node was placed into maintenance mode
    string power_state = 16 [(gogoproto.customname) = "PowerState"]; // The current power state of this Node
    string target_power_state = 17 [(gogoproto.customname) = "TargetPowerState"]; // If a power state transition has been requested, this field represents the requested state
    string provision_state = 18 [(gogoproto.customname) = "ProvisionState"]; // The current provisioning state of this Node
    string target_provision_state = 19 [(gogoproto.customname) = "TargetProvisionState"]; // If a provisioning action has been requested, this field represents the requested state
    bool console_enabled = 20 [(gogoproto.customname) = "ConsoleEnabled"]; // Indicates whether console access is enabled or disabled on this node
    string created_at = 21 [(gogoproto.customname) = "CreatedAt"]; // The UTC date and time when the resource was created, ISO 8601 format
    string updated_at = 22 [(gogoproto.customname) = "UpdatedAt"]; // The UTC date and time when the resource was created, ISO 8601 format
    string last_error = 23 [(gogoproto.customname) = "LastError"]; // Any error from the most recent (last) transaction that started but failed to finish. 


}



message CreateBaremetalNodeRequest {
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode",(gogoproto.jsontag) = "baremetal-node"];
}

message CreateBaremetalNodeResponse {
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode" ,(gogoproto.jsontag) = "baremetal-node"];
}

message UpdateBaremetalNodeRequest {
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode",(gogoproto.jsontag) = "baremetal-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBaremetalNodeResponse {
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode",(gogoproto.jsontag) = "baremetal-node"];
}

message DeleteBaremetalNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBaremetalNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBaremetalNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBaremetalNodeResponse {
    repeated BaremetalNode baremetal_nodes = 1 [(gogoproto.customname) = "BaremetalNodes", (gogoproto.jsontag) = "baremetal-nodes"];
}

message GetBaremetalNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBaremetalNodeResponse {
    BaremetalNode baremetal_node = 1 [(gogoproto.customname) = "BaremetalNode", (gogoproto.jsontag) = "baremetal-node"];
}



message BaremetalPort {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string mac_address = 9 [(gogoproto.customname) = "MacAddress"]; // Mac Address of the NIC of Baremetal
    string created_at = 10 [(gogoproto.customname) = "CreatedAt"]; // The UTC date and time when the resource was created, ISO 8601 format
    string updated_at = 11 [(gogoproto.customname) = "UpdatedAt"]; // The UTC date and time when the resource was created, ISO 8601 format
    string node = 12 [(gogoproto.customname) = "Node"]; // UUID of the node where this port is connected
    bool pxe_enabled = 13 [(gogoproto.customname) = "PxeEnabled"]; // Indicates whether PXE is enabled or disabled on the Port.
    LocalLinkConnection local_link_connection = 14 [(gogoproto.customname) = "LocalLinkConnection"]; // The Port binding profile 


}



message CreateBaremetalPortRequest {
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort",(gogoproto.jsontag) = "baremetal-port"];
}

message CreateBaremetalPortResponse {
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort" ,(gogoproto.jsontag) = "baremetal-port"];
}

message UpdateBaremetalPortRequest {
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort",(gogoproto.jsontag) = "baremetal-port"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateBaremetalPortResponse {
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort",(gogoproto.jsontag) = "baremetal-port"];
}

message DeleteBaremetalPortRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteBaremetalPortResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListBaremetalPortRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListBaremetalPortResponse {
    repeated BaremetalPort baremetal_ports = 1 [(gogoproto.customname) = "BaremetalPorts", (gogoproto.jsontag) = "baremetal-ports"];
}

message GetBaremetalPortRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetBaremetalPortResponse {
    BaremetalPort baremetal_port = 1 [(gogoproto.customname) = "BaremetalPort", (gogoproto.jsontag) = "baremetal-port"];
}



message ContrailAnalyticsDatabaseNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ContrailAnalyticsDatabaseNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this analyticsdb node. 

}


message ContrailAnalyticsDatabaseNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailAnalyticsDatabaseNodeRequest {
    ContrailAnalyticsDatabaseNode contrail_analytics_database_node = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNode",(gogoproto.jsontag) = "contrail-analytics-database-node"];
}

message CreateContrailAnalyticsDatabaseNodeResponse {
    ContrailAnalyticsDatabaseNode contrail_analytics_database_node = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNode" ,(gogoproto.jsontag) = "contrail-analytics-database-node"];
}

message UpdateContrailAnalyticsDatabaseNodeRequest {
    ContrailAnalyticsDatabaseNode contrail_analytics_database_node = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNode",(gogoproto.jsontag) = "contrail-analytics-database-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailAnalyticsDatabaseNodeResponse {
    ContrailAnalyticsDatabaseNode contrail_analytics_database_node = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNode",(gogoproto.jsontag) = "contrail-analytics-database-node"];
}

message DeleteContrailAnalyticsDatabaseNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailAnalyticsDatabaseNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailAnalyticsDatabaseNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailAnalyticsDatabaseNodeResponse {
    repeated ContrailAnalyticsDatabaseNode contrail_analytics_database_nodes = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodes", (gogoproto.jsontag) = "contrail-analytics-database-nodes"];
}

message GetContrailAnalyticsDatabaseNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailAnalyticsDatabaseNodeResponse {
    ContrailAnalyticsDatabaseNode contrail_analytics_database_node = 1 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNode", (gogoproto.jsontag) = "contrail-analytics-database-node"];
}



message ContrailAnalyticsNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ContrailAnalyticsNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this analytics node. 

}


message ContrailAnalyticsNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailAnalyticsNodeRequest {
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode",(gogoproto.jsontag) = "contrail-analytics-node"];
}

message CreateContrailAnalyticsNodeResponse {
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode" ,(gogoproto.jsontag) = "contrail-analytics-node"];
}

message UpdateContrailAnalyticsNodeRequest {
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode",(gogoproto.jsontag) = "contrail-analytics-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailAnalyticsNodeResponse {
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode",(gogoproto.jsontag) = "contrail-analytics-node"];
}

message DeleteContrailAnalyticsNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailAnalyticsNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailAnalyticsNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailAnalyticsNodeResponse {
    repeated ContrailAnalyticsNode contrail_analytics_nodes = 1 [(gogoproto.customname) = "ContrailAnalyticsNodes", (gogoproto.jsontag) = "contrail-analytics-nodes"];
}

message GetContrailAnalyticsNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailAnalyticsNodeResponse {
    ContrailAnalyticsNode contrail_analytics_node = 1 [(gogoproto.customname) = "ContrailAnalyticsNode", (gogoproto.jsontag) = "contrail-analytics-node"];
}



message ContrailCluster {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string provisioner_type = 14 [(gogoproto.customname) = "ProvisionerType"]; // Tool to be used to provision the cluster
    string orchestrator = 15 [(gogoproto.customname) = "Orchestrator"]; // Orchestrator to use with contrrail
    string kubernetes = 16 [(gogoproto.customname) = "Kubernetes"]; // 
    string kubernetes_master = 17 [(gogoproto.customname) = "KubernetesMaster"]; // 
    string openstack = 18 [(gogoproto.customname) = "Openstack"]; // 
    string config_audit_ttl = 19 [(gogoproto.customname) = "ConfigAuditTTL"]; // Configuration Audit Retention Time in hours
    string contrail_config = 20 [(gogoproto.customname) = "ContrailConfig"]; // 
    string contrail_configdb = 21 [(gogoproto.customname) = "ContrailConfigdb"]; // 
    string contrail_control = 22 [(gogoproto.customname) = "ContrailControl"]; // 
    string contrail_webui = 23 [(gogoproto.customname) = "ContrailWebui"]; // 
    string contrail_analytics = 24 [(gogoproto.customname) = "ContrailAnalytics"]; // 
    string contrail_analyticsdb = 25 [(gogoproto.customname) = "ContrailAnalyticsdb"]; // 
    string contrail_vrouter = 26 [(gogoproto.customname) = "ContrailVrouter"]; // 
    string data_ttl = 27 [(gogoproto.customname) = "DataTTL"]; // Data Retention Time in hours
    string default_gateway = 28 [(gogoproto.customname) = "DefaultGateway"]; // Default Gateway
    string default_vrouter_bond_interface = 29 [(gogoproto.customname) = "DefaultVrouterBondInterface"]; // vRouter Bond Interface
    string default_vrouter_bond_interface_members = 30 [(gogoproto.customname) = "DefaultVrouterBondInterfaceMembers"]; // vRouter Bond Interface Members
    string flow_ttl = 31 [(gogoproto.customname) = "FlowTTL"]; // Flow Data Retention Time in hours
    string statistics_ttl = 32 [(gogoproto.customname) = "StatisticsTTL"]; // Statistics Data Retention Time in hours 


    
    repeated AppformixNode appformix_nodes = 3033 [(gogoproto.customname) = "AppformixNodes"]; // Parent of this appformix node. 
    
    repeated ContrailAnalyticsDatabaseNode contrail_analytics_database_nodes = 3034 [(gogoproto.customname) = "ContrailAnalyticsDatabaseNodes"]; // Parent of this analyticsdb node. 
    
    repeated ContrailAnalyticsNode contrail_analytics_nodes = 3035 [(gogoproto.customname) = "ContrailAnalyticsNodes"]; // Parent of this analytics node. 
    
    repeated ContrailConfigDatabaseNode contrail_config_database_nodes = 3036 [(gogoproto.customname) = "ContrailConfigDatabaseNodes"]; // Parent of this configdb node. 
    
    repeated ContrailConfigNode contrail_config_nodes = 3037 [(gogoproto.customname) = "ContrailConfigNodes"]; // Parent of this config node. 
    
    repeated ContrailControlNode contrail_control_nodes = 3038 [(gogoproto.customname) = "ContrailControlNodes"]; // Parent of this control node. 
    
    repeated ContrailStorageNode contrail_storage_nodes = 3039 [(gogoproto.customname) = "ContrailStorageNodes"]; // Parent of this storage node. 
    
    repeated ContrailVrouterNode contrail_vrouter_nodes = 3040 [(gogoproto.customname) = "ContrailVrouterNodes"]; // Parent of this vrouter node. 
    
    repeated ContrailControllerNode contrail_controller_nodes = 3041 [(gogoproto.customname) = "ContrailControllerNodes"]; // Parent of this webui node. 
    
    repeated KubernetesMasterNode kubernetes_master_nodes = 3042 [(gogoproto.customname) = "KubernetesMasterNodes"]; // Parent of this kubernetes master node. 
    
    repeated KubernetesNode kubernetes_nodes = 3043 [(gogoproto.customname) = "KubernetesNodes"]; // Parent of this kubernetes node. 
}



message CreateContrailClusterRequest {
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster",(gogoproto.jsontag) = "contrail-cluster"];
}

message CreateContrailClusterResponse {
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster" ,(gogoproto.jsontag) = "contrail-cluster"];
}

message UpdateContrailClusterRequest {
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster",(gogoproto.jsontag) = "contrail-cluster"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailClusterResponse {
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster",(gogoproto.jsontag) = "contrail-cluster"];
}

message DeleteContrailClusterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailClusterResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailClusterRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailClusterResponse {
    repeated ContrailCluster contrail_clusters = 1 [(gogoproto.customname) = "ContrailClusters", (gogoproto.jsontag) = "contrail-clusters"];
}

message GetContrailClusterRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailClusterResponse {
    ContrailCluster contrail_cluster = 1 [(gogoproto.customname) = "ContrailCluster", (gogoproto.jsontag) = "contrail-cluster"];
}



message ContrailConfigDatabaseNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ContrailConfigDatabaseNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this configdb node. 

}


message ContrailConfigDatabaseNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailConfigDatabaseNodeRequest {
    ContrailConfigDatabaseNode contrail_config_database_node = 1 [(gogoproto.customname) = "ContrailConfigDatabaseNode",(gogoproto.jsontag) = "contrail-config-database-node"];
}

message CreateContrailConfigDatabaseNodeResponse {
    ContrailConfigDatabaseNode contrail_config_database_node = 1 [(gogoproto.customname) = "ContrailConfigDatabaseNode" ,(gogoproto.jsontag) = "contrail-config-database-node"];
}

message UpdateContrailConfigDatabaseNodeRequest {
    ContrailConfigDatabaseNode contrail_config_database_node = 1 [(gogoproto.customname) = "ContrailConfigDatabaseNode",(gogoproto.jsontag) = "contrail-config-database-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailConfigDatabaseNodeResponse {
    ContrailConfigDatabaseNode contrail_config_database_node = 1 [(gogoproto.customname) = "ContrailConfigDatabaseNode",(gogoproto.jsontag) = "contrail-config-database-node"];
}

message DeleteContrailConfigDatabaseNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailConfigDatabaseNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailConfigDatabaseNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailConfigDatabaseNodeResponse {
    repeated ContrailConfigDatabaseNode contrail_config_database_nodes = 1 [(gogoproto.customname) = "ContrailConfigDatabaseNodes", (gogoproto.jsontag) = "contrail-config-database-nodes"];
}

message GetContrailConfigDatabaseNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailConfigDatabaseNodeResponse {
    ContrailConfigDatabaseNode contrail_config_database_node = 1 [(gogoproto.customname) = "ContrailConfigDatabaseNode", (gogoproto.jsontag) = "contrail-config-database-node"];
}



message ContrailConfigNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ContrailConfigNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this config node. 

}


message ContrailConfigNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailConfigNodeRequest {
    ContrailConfigNode contrail_config_node = 1 [(gogoproto.customname) = "ContrailConfigNode",(gogoproto.jsontag) = "contrail-config-node"];
}

message CreateContrailConfigNodeResponse {
    ContrailConfigNode contrail_config_node = 1 [(gogoproto.customname) = "ContrailConfigNode" ,(gogoproto.jsontag) = "contrail-config-node"];
}

message UpdateContrailConfigNodeRequest {
    ContrailConfigNode contrail_config_node = 1 [(gogoproto.customname) = "ContrailConfigNode",(gogoproto.jsontag) = "contrail-config-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailConfigNodeResponse {
    ContrailConfigNode contrail_config_node = 1 [(gogoproto.customname) = "ContrailConfigNode",(gogoproto.jsontag) = "contrail-config-node"];
}

message DeleteContrailConfigNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailConfigNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailConfigNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailConfigNodeResponse {
    repeated ContrailConfigNode contrail_config_nodes = 1 [(gogoproto.customname) = "ContrailConfigNodes", (gogoproto.jsontag) = "contrail-config-nodes"];
}

message GetContrailConfigNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailConfigNodeResponse {
    ContrailConfigNode contrail_config_node = 1 [(gogoproto.customname) = "ContrailConfigNode", (gogoproto.jsontag) = "contrail-config-node"];
}



message ContrailControlNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ContrailControlNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this control node. 

}


message ContrailControlNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailControlNodeRequest {
    ContrailControlNode contrail_control_node = 1 [(gogoproto.customname) = "ContrailControlNode",(gogoproto.jsontag) = "contrail-control-node"];
}

message CreateContrailControlNodeResponse {
    ContrailControlNode contrail_control_node = 1 [(gogoproto.customname) = "ContrailControlNode" ,(gogoproto.jsontag) = "contrail-control-node"];
}

message UpdateContrailControlNodeRequest {
    ContrailControlNode contrail_control_node = 1 [(gogoproto.customname) = "ContrailControlNode",(gogoproto.jsontag) = "contrail-control-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailControlNodeResponse {
    ContrailControlNode contrail_control_node = 1 [(gogoproto.customname) = "ContrailControlNode",(gogoproto.jsontag) = "contrail-control-node"];
}

message DeleteContrailControlNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailControlNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailControlNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailControlNodeResponse {
    repeated ContrailControlNode contrail_control_nodes = 1 [(gogoproto.customname) = "ContrailControlNodes", (gogoproto.jsontag) = "contrail-control-nodes"];
}

message GetContrailControlNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailControlNodeResponse {
    ContrailControlNode contrail_control_node = 1 [(gogoproto.customname) = "ContrailControlNode", (gogoproto.jsontag) = "contrail-control-node"];
}



message ContrailStorageNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string journal_drives = 14 [(gogoproto.customname) = "JournalDrives"]; // SSD Drives to use for journals
    string osd_drives = 15 [(gogoproto.customname) = "OsdDrives"]; // Drives to use for cloud storage
    string storage_access_bond_interface_members = 16 [(gogoproto.customname) = "StorageAccessBondInterfaceMembers"]; // Storage Management  Bond Interface Members
    string storage_backend_bond_interface_members = 17 [(gogoproto.customname) = "StorageBackendBondInterfaceMembers"]; // Storage Backend Bond Interface Members 

    repeated ContrailStorageNodeNodeRef node_refs = 1018 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this storage node. 

}


message ContrailStorageNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailStorageNodeRequest {
    ContrailStorageNode contrail_storage_node = 1 [(gogoproto.customname) = "ContrailStorageNode",(gogoproto.jsontag) = "contrail-storage-node"];
}

message CreateContrailStorageNodeResponse {
    ContrailStorageNode contrail_storage_node = 1 [(gogoproto.customname) = "ContrailStorageNode" ,(gogoproto.jsontag) = "contrail-storage-node"];
}

message UpdateContrailStorageNodeRequest {
    ContrailStorageNode contrail_storage_node = 1 [(gogoproto.customname) = "ContrailStorageNode",(gogoproto.jsontag) = "contrail-storage-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailStorageNodeResponse {
    ContrailStorageNode contrail_storage_node = 1 [(gogoproto.customname) = "ContrailStorageNode",(gogoproto.jsontag) = "contrail-storage-node"];
}

message DeleteContrailStorageNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailStorageNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailStorageNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailStorageNodeResponse {
    repeated ContrailStorageNode contrail_storage_nodes = 1 [(gogoproto.customname) = "ContrailStorageNodes", (gogoproto.jsontag) = "contrail-storage-nodes"];
}

message GetContrailStorageNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailStorageNodeResponse {
    ContrailStorageNode contrail_storage_node = 1 [(gogoproto.customname) = "ContrailStorageNode", (gogoproto.jsontag) = "contrail-storage-node"];
}



message ContrailVrouterNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string default_gateway = 14 [(gogoproto.customname) = "DefaultGateway"]; // Default Gateway
    string vrouter_bond_interface = 15 [(gogoproto.customname) = "VrouterBondInterface"]; // vRouter Bond Interface
    string vrouter_bond_interface_members = 16 [(gogoproto.customname) = "VrouterBondInterfaceMembers"]; // vRouter Bond Interface Members
    string vrouter_type = 17 [(gogoproto.customname) = "VrouterType"]; //  

    repeated ContrailVrouterNodeNodeRef node_refs = 1018 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this vrouter node. 

}


message ContrailVrouterNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailVrouterNodeRequest {
    ContrailVrouterNode contrail_vrouter_node = 1 [(gogoproto.customname) = "ContrailVrouterNode",(gogoproto.jsontag) = "contrail-vrouter-node"];
}

message CreateContrailVrouterNodeResponse {
    ContrailVrouterNode contrail_vrouter_node = 1 [(gogoproto.customname) = "ContrailVrouterNode" ,(gogoproto.jsontag) = "contrail-vrouter-node"];
}

message UpdateContrailVrouterNodeRequest {
    ContrailVrouterNode contrail_vrouter_node = 1 [(gogoproto.customname) = "ContrailVrouterNode",(gogoproto.jsontag) = "contrail-vrouter-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailVrouterNodeResponse {
    ContrailVrouterNode contrail_vrouter_node = 1 [(gogoproto.customname) = "ContrailVrouterNode",(gogoproto.jsontag) = "contrail-vrouter-node"];
}

message DeleteContrailVrouterNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailVrouterNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailVrouterNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailVrouterNodeResponse {
    repeated ContrailVrouterNode contrail_vrouter_nodes = 1 [(gogoproto.customname) = "ContrailVrouterNodes", (gogoproto.jsontag) = "contrail-vrouter-nodes"];
}

message GetContrailVrouterNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailVrouterNodeResponse {
    ContrailVrouterNode contrail_vrouter_node = 1 [(gogoproto.customname) = "ContrailVrouterNode", (gogoproto.jsontag) = "contrail-vrouter-node"];
}



message ContrailControllerNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated ContrailControllerNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this webui node. 

}


message ContrailControllerNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateContrailControllerNodeRequest {
    ContrailControllerNode contrail_controller_node = 1 [(gogoproto.customname) = "ContrailControllerNode",(gogoproto.jsontag) = "contrail-controller-node"];
}

message CreateContrailControllerNodeResponse {
    ContrailControllerNode contrail_controller_node = 1 [(gogoproto.customname) = "ContrailControllerNode" ,(gogoproto.jsontag) = "contrail-controller-node"];
}

message UpdateContrailControllerNodeRequest {
    ContrailControllerNode contrail_controller_node = 1 [(gogoproto.customname) = "ContrailControllerNode",(gogoproto.jsontag) = "contrail-controller-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateContrailControllerNodeResponse {
    ContrailControllerNode contrail_controller_node = 1 [(gogoproto.customname) = "ContrailControllerNode",(gogoproto.jsontag) = "contrail-controller-node"];
}

message DeleteContrailControllerNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteContrailControllerNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListContrailControllerNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListContrailControllerNodeResponse {
    repeated ContrailControllerNode contrail_controller_nodes = 1 [(gogoproto.customname) = "ContrailControllerNodes", (gogoproto.jsontag) = "contrail-controller-nodes"];
}

message GetContrailControllerNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetContrailControllerNodeResponse {
    ContrailControllerNode contrail_controller_node = 1 [(gogoproto.customname) = "ContrailControllerNode", (gogoproto.jsontag) = "contrail-controller-node"];
}



message Dashboard {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string container_config = 9 [(gogoproto.customname) = "ContainerConfig"]; //  


}



message CreateDashboardRequest {
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard",(gogoproto.jsontag) = "dashboard"];
}

message CreateDashboardResponse {
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard" ,(gogoproto.jsontag) = "dashboard"];
}

message UpdateDashboardRequest {
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard",(gogoproto.jsontag) = "dashboard"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateDashboardResponse {
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard",(gogoproto.jsontag) = "dashboard"];
}

message DeleteDashboardRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteDashboardResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListDashboardRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListDashboardResponse {
    repeated Dashboard dashboards = 1 [(gogoproto.customname) = "Dashboards", (gogoproto.jsontag) = "dashboards"];
}

message GetDashboardRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetDashboardResponse {
    Dashboard dashboard = 1 [(gogoproto.customname) = "Dashboard", (gogoproto.jsontag) = "dashboard"];
}



message Flavor {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string name = 9 [(gogoproto.customname) = "Name"]; // The display name of a flavor
    int64 disk = 10 [(gogoproto.customname) = "Disk"]; // The size of the root disk that will be created in GiB
    int64 vcpus = 11 [(gogoproto.customname) = "Vcpus"]; // The number of virtual CPUs that will be allocated to the server
    int64 ram = 12 [(gogoproto.customname) = "RAM"]; // The amount of RAM a flavor has, in MiB
    string id = 13 [(gogoproto.customname) = "ID"]; // The ID of the flavor, if not provided UUID will be auto-generated
    string property = 14 [(gogoproto.customname) = "Property"]; // Extra specs needed to boot the image
    int64 rxtx_factor = 15 [(gogoproto.customname) = "RXTXFactor"]; // The receive / transmit factor (as a float) that will be set on ports if the network backend supports the QOS extension. Otherwise it will be ignored. It defaults to 1.0.
    int64 swap = 16 [(gogoproto.customname) = "Swap"]; // The size of a dedicated swap disk that will be allocated, in MiB. If 0 (the default), no dedicated swap disk will be created.
    bool is_public = 17 [(gogoproto.customname) = "IsPublic"]; // Whether the flavor is public
    int64 ephemeral = 18 [(gogoproto.customname) = "Ephemeral"]; // The size of the ephemeral disk that will be created, in GiB
    OpenStackLink links = 19 [(gogoproto.customname) = "Links"]; // links for the image for server instance 


}



message CreateFlavorRequest {
    Flavor flavor = 1 [(gogoproto.customname) = "Flavor",(gogoproto.jsontag) = "flavor"];
}

message CreateFlavorResponse {
    Flavor flavor = 1 [(gogoproto.customname) = "Flavor" ,(gogoproto.jsontag) = "flavor"];
}

message UpdateFlavorRequest {
    Flavor flavor = 1 [(gogoproto.customname) = "Flavor",(gogoproto.jsontag) = "flavor"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateFlavorResponse {
    Flavor flavor = 1 [(gogoproto.customname) = "Flavor",(gogoproto.jsontag) = "flavor"];
}

message DeleteFlavorRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteFlavorResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListFlavorRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListFlavorResponse {
    repeated Flavor flavors = 1 [(gogoproto.customname) = "Flavors", (gogoproto.jsontag) = "flavors"];
}

message GetFlavorRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetFlavorResponse {
    Flavor flavor = 1 [(gogoproto.customname) = "Flavor", (gogoproto.jsontag) = "flavor"];
}



message OsImage {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string name = 9 [(gogoproto.customname) = "Name"]; // Name of the image to be created/updated
    string owner = 10 [(gogoproto.customname) = "Owner"]; // An identifier for the owner of the image
    string id = 11 [(gogoproto.customname) = "ID"]; // A unique, user-defined image UUID, in the format &quot;nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn&quot;, Where n is a hexadecimal digit from 0 to f, or F.
    int64 size = 12 [(gogoproto.customname) = "Size_"]; // The size of the image data, in bytes
    string status = 13 [(gogoproto.customname) = "Status"]; // The image status
    string location = 14 [(gogoproto.customname) = "Location"]; // The URL to access the image file from the external store
    string file = 15 [(gogoproto.customname) = "File"]; // Abosolute path of file to be used for creating image
    string checksum = 16 [(gogoproto.customname) = "Checksum"]; // Hash that is used over the image data
    string created_at = 17 [(gogoproto.customname) = "CreatedAt"]; // The UTC date and time when the resource was created, ISO 8601 format
    string updated_at = 18 [(gogoproto.customname) = "UpdatedAt"]; // The UTC date and time when the resource was created, ISO 8601 format
    string container_format = 19 [(gogoproto.customname) = "ContainerFormat"]; // 
    string disk_format = 20 [(gogoproto.customname) = "DiskFormat"]; // 
    bool protected = 21 [(gogoproto.customname) = "Protected"]; // 
    string visibility = 22 [(gogoproto.customname) = "Visibility"]; // Visibility for this image
    string property = 23 [(gogoproto.customname) = "Property"]; // Additional properties of the image (name=value pair)
    int64 min_disk = 24 [(gogoproto.customname) = "MinDisk"]; // Amount of disk space in GB that is required to boot the image
    int64 min_ram = 25 [(gogoproto.customname) = "MinRAM"]; // Amount of RAM in MB that is required to boot the image
    string tags = 26 [(gogoproto.customname) = "Tags"]; // List of tags for this image 


}



message CreateOsImageRequest {
    OsImage os_image = 1 [(gogoproto.customname) = "OsImage",(gogoproto.jsontag) = "os-image"];
}

message CreateOsImageResponse {
    OsImage os_image = 1 [(gogoproto.customname) = "OsImage" ,(gogoproto.jsontag) = "os-image"];
}

message UpdateOsImageRequest {
    OsImage os_image = 1 [(gogoproto.customname) = "OsImage",(gogoproto.jsontag) = "os-image"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateOsImageResponse {
    OsImage os_image = 1 [(gogoproto.customname) = "OsImage",(gogoproto.jsontag) = "os-image"];
}

message DeleteOsImageRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteOsImageResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListOsImageRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListOsImageResponse {
    repeated OsImage os_images = 1 [(gogoproto.customname) = "OsImages", (gogoproto.jsontag) = "os-images"];
}

message GetOsImageRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetOsImageResponse {
    OsImage os_image = 1 [(gogoproto.customname) = "OsImage", (gogoproto.jsontag) = "os-image"];
}



message Keypair {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string name = 9 [(gogoproto.customname) = "Name"]; // A name for the keypair which will be used to reference it later
    string public_key = 10 [(gogoproto.customname) = "PublicKey"]; // The public ssh key to import 


}



message CreateKeypairRequest {
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair",(gogoproto.jsontag) = "keypair"];
}

message CreateKeypairResponse {
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair" ,(gogoproto.jsontag) = "keypair"];
}

message UpdateKeypairRequest {
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair",(gogoproto.jsontag) = "keypair"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateKeypairResponse {
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair",(gogoproto.jsontag) = "keypair"];
}

message DeleteKeypairRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteKeypairResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListKeypairRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListKeypairResponse {
    repeated Keypair keypairs = 1 [(gogoproto.customname) = "Keypairs", (gogoproto.jsontag) = "keypairs"];
}

message GetKeypairRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetKeypairResponse {
    Keypair keypair = 1 [(gogoproto.customname) = "Keypair", (gogoproto.jsontag) = "keypair"];
}



message KubernetesMasterNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated KubernetesMasterNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this kubernetes master node. 

}


message KubernetesMasterNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateKubernetesMasterNodeRequest {
    KubernetesMasterNode kubernetes_master_node = 1 [(gogoproto.customname) = "KubernetesMasterNode",(gogoproto.jsontag) = "kubernetes-master-node"];
}

message CreateKubernetesMasterNodeResponse {
    KubernetesMasterNode kubernetes_master_node = 1 [(gogoproto.customname) = "KubernetesMasterNode" ,(gogoproto.jsontag) = "kubernetes-master-node"];
}

message UpdateKubernetesMasterNodeRequest {
    KubernetesMasterNode kubernetes_master_node = 1 [(gogoproto.customname) = "KubernetesMasterNode",(gogoproto.jsontag) = "kubernetes-master-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateKubernetesMasterNodeResponse {
    KubernetesMasterNode kubernetes_master_node = 1 [(gogoproto.customname) = "KubernetesMasterNode",(gogoproto.jsontag) = "kubernetes-master-node"];
}

message DeleteKubernetesMasterNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteKubernetesMasterNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListKubernetesMasterNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListKubernetesMasterNodeResponse {
    repeated KubernetesMasterNode kubernetes_master_nodes = 1 [(gogoproto.customname) = "KubernetesMasterNodes", (gogoproto.jsontag) = "kubernetes-master-nodes"];
}

message GetKubernetesMasterNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetKubernetesMasterNodeResponse {
    KubernetesMasterNode kubernetes_master_node = 1 [(gogoproto.customname) = "KubernetesMasterNode", (gogoproto.jsontag) = "kubernetes-master-node"];
}



message KubernetesNode {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access. 

    repeated KubernetesNodeNodeRef node_refs = 1014 [(gogoproto.customname) = "NodeRefs"];// Reference to node object for this kubernetes node. 

}


message KubernetesNodeNodeRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateKubernetesNodeRequest {
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode",(gogoproto.jsontag) = "kubernetes-node"];
}

message CreateKubernetesNodeResponse {
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode" ,(gogoproto.jsontag) = "kubernetes-node"];
}

message UpdateKubernetesNodeRequest {
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode",(gogoproto.jsontag) = "kubernetes-node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateKubernetesNodeResponse {
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode",(gogoproto.jsontag) = "kubernetes-node"];
}

message DeleteKubernetesNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteKubernetesNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListKubernetesNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListKubernetesNodeResponse {
    repeated KubernetesNode kubernetes_nodes = 1 [(gogoproto.customname) = "KubernetesNodes", (gogoproto.jsontag) = "kubernetes-nodes"];
}

message GetKubernetesNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetKubernetesNodeResponse {
    KubernetesNode kubernetes_node = 1 [(gogoproto.customname) = "KubernetesNode", (gogoproto.jsontag) = "kubernetes-node"];
}



message Location {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string type = 14 [(gogoproto.customname) = "Type"]; // Type of location
    string private_dns_servers = 15 [(gogoproto.customname) = "PrivateDNSServers"]; // List of DNS servers
    string private_ntp_hosts = 16 [(gogoproto.customname) = "PrivateNTPHosts"]; // List of NTP sources
    string private_ospd_package_url = 17 [(gogoproto.customname) = "PrivateOspdPackageURL"]; // Location of Contrail Networking Packages
    string private_ospd_user_name = 18 [(gogoproto.customname) = "PrivateOspdUserName"]; // OSPD Non-Root User Account
    string private_ospd_user_password = 19 [(gogoproto.customname) = "PrivateOspdUserPassword"]; // OSPD Passowrd for account
    string private_ospd_vm_disk_gb = 20 [(gogoproto.customname) = "PrivateOspdVMDiskGB"]; // disk spae to assign to RH OSPD vm
    string private_ospd_vm_name = 21 [(gogoproto.customname) = "PrivateOspdVMName"]; // Name of RH OSPD VM
    string private_ospd_vm_ram_mb = 22 [(gogoproto.customname) = "PrivateOspdVMRAMMB"]; // ram to assign to RH OSPD vm
    string private_ospd_vm_vcpus = 23 [(gogoproto.customname) = "PrivateOspdVMVcpus"]; // vcpus to assign to RH OSPD vm
    string private_redhat_pool_id = 24 [(gogoproto.customname) = "PrivateRedhatPoolID"]; // Repo Pool ID
    string private_redhat_subscription_key = 25 [(gogoproto.customname) = "PrivateRedhatSubscriptionKey"]; // Subscription Activation Key
    string private_redhat_subscription_pasword = 26 [(gogoproto.customname) = "PrivateRedhatSubscriptionPasword"]; // Password for subscription account
    string private_redhat_subscription_user = 27 [(gogoproto.customname) = "PrivateRedhatSubscriptionUser"]; // User name for RedHat subscription account
    string gcp_account_info = 28 [(gogoproto.customname) = "GCPAccountInfo"]; // copy and paste contents of account.json
    int64 gcp_asn = 29 [(gogoproto.customname) = "GCPAsn"]; // 
    string gcp_region = 30 [(gogoproto.customname) = "GCPRegion"]; // 
    string gcp_subnet = 31 [(gogoproto.customname) = "GCPSubnet"]; // 
    string aws_access_key = 32 [(gogoproto.customname) = "AwsAccessKey"]; // 
    string aws_region = 33 [(gogoproto.customname) = "AwsRegion"]; // 
    string aws_secret_key = 34 [(gogoproto.customname) = "AwsSecretKey"]; // 
    string aws_subnet = 35 [(gogoproto.customname) = "AwsSubnet"]; //  


    
    repeated PhysicalRouter physical_routers = 3036 [(gogoproto.customname) = "PhysicalRouters"]; // Physical router location. 
}



message CreateLocationRequest {
    Location location = 1 [(gogoproto.customname) = "Location",(gogoproto.jsontag) = "location"];
}

message CreateLocationResponse {
    Location location = 1 [(gogoproto.customname) = "Location" ,(gogoproto.jsontag) = "location"];
}

message UpdateLocationRequest {
    Location location = 1 [(gogoproto.customname) = "Location",(gogoproto.jsontag) = "location"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateLocationResponse {
    Location location = 1 [(gogoproto.customname) = "Location",(gogoproto.jsontag) = "location"];
}

message DeleteLocationRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteLocationResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListLocationRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListLocationResponse {
    repeated Location locations = 1 [(gogoproto.customname) = "Locations", (gogoproto.jsontag) = "locations"];
}

message GetLocationRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetLocationResponse {
    Location location = 1 [(gogoproto.customname) = "Location", (gogoproto.jsontag) = "location"];
}



message Node {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string hostname = 9 [(gogoproto.customname) = "Hostname"]; // Fully qualified host name
    string ip_address = 10 [(gogoproto.customname) = "IPAddress"]; // IP Address
    string mac_address = 11 [(gogoproto.customname) = "MacAddress"]; // Provisioning Interface MAC Address
    string type = 12 [(gogoproto.customname) = "Type"]; // Type of machine resource
    string password = 13 [(gogoproto.customname) = "Password"]; // UserPassword
    string ssh_key = 14 [(gogoproto.customname) = "SSHKey"]; // SSH Public Key
    string username = 15 [(gogoproto.customname) = "Username"]; // User Name
    string aws_ami = 16 [(gogoproto.customname) = "AwsAmi"]; // 
    string aws_instance_type = 17 [(gogoproto.customname) = "AwsInstanceType"]; // 
    string gcp_image = 18 [(gogoproto.customname) = "GCPImage"]; // 
    string gcp_machine_type = 19 [(gogoproto.customname) = "GCPMachineType"]; // 
    string private_machine_properties = 20 [(gogoproto.customname) = "PrivateMachineProperties"]; // Machine Properties from ironic
    string private_machine_state = 21 [(gogoproto.customname) = "PrivateMachineState"]; // Machine State
    string ipmi_address = 22 [(gogoproto.customname) = "IpmiAddress"]; // IP address used for power management (IPMI)
    string ipmi_password = 23 [(gogoproto.customname) = "IpmiPassword"]; // UserPassword for PowerManagement
    string ipmi_username = 24 [(gogoproto.customname) = "IpmiUsername"]; // User Name for PowerManagement 


}



message CreateNodeRequest {
    Node node = 1 [(gogoproto.customname) = "Node",(gogoproto.jsontag) = "node"];
}

message CreateNodeResponse {
    Node node = 1 [(gogoproto.customname) = "Node" ,(gogoproto.jsontag) = "node"];
}

message UpdateNodeRequest {
    Node node = 1 [(gogoproto.customname) = "Node",(gogoproto.jsontag) = "node"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateNodeResponse {
    Node node = 1 [(gogoproto.customname) = "Node",(gogoproto.jsontag) = "node"];
}

message DeleteNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteNodeResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListNodeRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListNodeResponse {
    repeated Node nodes = 1 [(gogoproto.customname) = "Nodes", (gogoproto.jsontag) = "nodes"];
}

message GetNodeRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetNodeResponse {
    Node node = 1 [(gogoproto.customname) = "Node", (gogoproto.jsontag) = "node"];
}



message Server {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string created = 9 [(gogoproto.customname) = "Created"]; // The date and time when the resource was created. The date and time stamp format is ISO 8601
    string hostId = 10 [(gogoproto.customname) = "HostId"]; // An ID string representing the host
    string id = 11 [(gogoproto.customname) = "ID"]; // The UUID of the server
    string name = 12 [(gogoproto.customname) = "Name"]; // The UUID of the server
    OpenStackImageProperty image = 13 [(gogoproto.customname) = "Image"]; // The UUID and links for the image for your server instance
    OpenStackFlavorProperty flavor = 14 [(gogoproto.customname) = "Flavor"]; // The UUID and links for the flavor for your server instance
    OpenStackAddress addresses = 15 [(gogoproto.customname) = "Addresses"]; // The addresses for the server
    string accessIPv4 = 16 [(gogoproto.customname) = "AccessIPv4"]; // IPv4 address that should be used to access this server
    string accessIPv6 = 17 [(gogoproto.customname) = "AccessIPv6"]; // IPv6 address that should be used to access this server
    bool config_drive = 18 [(gogoproto.customname) = "ConfigDrive"]; // Indicates whether or not a config drive was used for this server
    int64 progress = 19 [(gogoproto.customname) = "Progress"]; // A percentage value of the build progress
    string status = 20 [(gogoproto.customname) = "Status"]; // The server status
    string host_status = 21 [(gogoproto.customname) = "HostStatus"]; // The host status
    string tenant_id = 22 [(gogoproto.customname) = "TenantID"]; // The UUID of the tenant in a multi-tenancy cloud
    string updated = 23 [(gogoproto.customname) = "Updated"]; // The date and time when the resource was updated. The date and time stamp format is ISO 8601
    int64 user_id = 24 [(gogoproto.customname) = "UserID"]; // The user ID of the user who owns the server
    bool locked = 25 [(gogoproto.customname) = "Locked"]; // True if the instance is locked otherwise False 


}



message CreateServerRequest {
    Server server = 1 [(gogoproto.customname) = "Server",(gogoproto.jsontag) = "server"];
}

message CreateServerResponse {
    Server server = 1 [(gogoproto.customname) = "Server" ,(gogoproto.jsontag) = "server"];
}

message UpdateServerRequest {
    Server server = 1 [(gogoproto.customname) = "Server",(gogoproto.jsontag) = "server"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateServerResponse {
    Server server = 1 [(gogoproto.customname) = "Server",(gogoproto.jsontag) = "server"];
}

message DeleteServerRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteServerResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListServerRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListServerResponse {
    repeated Server servers = 1 [(gogoproto.customname) = "Servers", (gogoproto.jsontag) = "servers"];
}

message GetServerRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetServerResponse {
    Server server = 1 [(gogoproto.customname) = "Server", (gogoproto.jsontag) = "server"];
}



message VPNGroup {

    string provisioning_log = 1 [(gogoproto.customname) = "ProvisioningLog"]; // Provisioning Log
    int64 provisioning_progress = 2 [(gogoproto.customname) = "ProvisioningProgress"]; // Provisioning progress 0 - 100%
    string provisioning_progress_stage = 3 [(gogoproto.customname) = "ProvisioningProgressStage"]; // Provisioning Progress Stage
    string provisioning_start_time = 4 [(gogoproto.customname) = "ProvisioningStartTime"]; // Time provisioning started
    string provisioning_state = 5 [(gogoproto.customname) = "ProvisioningState"]; // Provisioning Status
    string uuid = 6 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 7 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 8 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 9 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 10 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 11 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 12 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 13 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string type = 14 [(gogoproto.customname) = "Type"]; // Type of VPN 

    repeated VPNGroupLocationRef location_refs = 1015 [(gogoproto.customname) = "LocationRefs"];// Reference to the locations 

}


message VPNGroupLocationRef {
    string uuid = 1 [(gogoproto.customname) = "UUID"];
    repeated string to = 2 [(gogoproto.customname) = "To"];
    
}


message CreateVPNGroupRequest {
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup",(gogoproto.jsontag) = "vpn-group"];
}

message CreateVPNGroupResponse {
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup" ,(gogoproto.jsontag) = "vpn-group"];
}

message UpdateVPNGroupRequest {
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup",(gogoproto.jsontag) = "vpn-group"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateVPNGroupResponse {
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup",(gogoproto.jsontag) = "vpn-group"];
}

message DeleteVPNGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteVPNGroupResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListVPNGroupRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListVPNGroupResponse {
    repeated VPNGroup vpn_groups = 1 [(gogoproto.customname) = "VPNGroups", (gogoproto.jsontag) = "vpn-groups"];
}

message GetVPNGroupRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVPNGroupResponse {
    VPNGroup vpn_group = 1 [(gogoproto.customname) = "VPNGroup", (gogoproto.jsontag) = "vpn-group"];
}



message Widget {

    string uuid = 1 [(gogoproto.customname) = "UUID"]; // UUID of the object, system automatically allocates one if not provided
    string parent_uuid = 2 [(gogoproto.customname) = "ParentUUID"]; // UUID of the parent object
    string parent_type = 3 [(gogoproto.customname) = "ParentType"]; // Parent resource type
    repeated string fq_name = 4 [(gogoproto.customname) = "FQName"]; // FQ Name of the object
    IdPermsType id_perms = 5 [(gogoproto.customname) = "IDPerms"]; // System maintained identity, time  and permissions data.
    string display_name = 6 [(gogoproto.customname) = "DisplayName"]; // Display name user configured string(name) that can be updated any time. Used as openstack name.
    KeyValuePairs annotations = 7 [(gogoproto.customname) = "Annotations"]; // Dictionary of arbitrary (key, value) on a resource.
    PermType2 perms2 = 8 [(gogoproto.customname) = "Perms2"]; // Permissions data for role based access.
    string container_config = 9 [(gogoproto.customname) = "ContainerConfig"]; // 
    string content_config = 10 [(gogoproto.customname) = "ContentConfig"]; // 
    string layout_config = 11 [(gogoproto.customname) = "LayoutConfig"]; //  


}



message CreateWidgetRequest {
    Widget widget = 1 [(gogoproto.customname) = "Widget",(gogoproto.jsontag) = "widget"];
}

message CreateWidgetResponse {
    Widget widget = 1 [(gogoproto.customname) = "Widget" ,(gogoproto.jsontag) = "widget"];
}

message UpdateWidgetRequest {
    Widget widget = 1 [(gogoproto.customname) = "Widget",(gogoproto.jsontag) = "widget"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message UpdateWidgetResponse {
    Widget widget = 1 [(gogoproto.customname) = "Widget",(gogoproto.jsontag) = "widget"];
}

message DeleteWidgetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message DeleteWidgetResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message ListWidgetRequest {
    ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message ListWidgetResponse {
    repeated Widget widgets = 1 [(gogoproto.customname) = "Widgets", (gogoproto.jsontag) = "widgets"];
}

message GetWidgetRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message GetWidgetResponse {
    Widget widget = 1 [(gogoproto.customname) = "Widget", (gogoproto.jsontag) = "widget"];
}









message PortType {

    int64 end_port = 1 [(gogoproto.customname) = "EndPort"]; // 
    int64 start_port = 2 [(gogoproto.customname) = "StartPort"]; //  
}



message FirewallRuleEndpointType {

    string address_group = 1 [(gogoproto.customname) = "AddressGroup"]; // Any workload with interface in this address-group
    SubnetType subnet = 2 [(gogoproto.customname) = "Subnet"]; // Any workload that belongs to this subnet
    repeated string tags = 3 [(gogoproto.customname) = "Tags"]; // Any workload with tags matching tags in this list
    repeated int64 tag_ids = 4 [(gogoproto.customname) = "TagIds"]; // Any workload with tags ids matching all the tags ids in this list
    string virtual_network = 5 [(gogoproto.customname) = "VirtualNetwork"]; // Any workload that belongs to this virtual network 
    bool any = 6 [(gogoproto.customname) = "Any"]; // Match any workload 
}



message AlarmExpression {

    string operations = 1 [(gogoproto.customname) = "Operations"]; // operation to compare operand1 and operand2
    string operand1 = 2 [(gogoproto.customname) = "Operand1"]; // UVE attribute specified in the dotted format. Example: NodeStatus.process_info.process_state
    repeated string variables = 3 [(gogoproto.customname) = "Variables"]; // List of UVE attributes that would be useful when the alarm is raised. For example, user may want to raise an alarm if the NodeStatus.process_info.process_state != PROCESS_STATE_RUNNING. But, it would be useful to know the process_name whose state != PROCESS_STATE_RUNNING. This UVE attribute which is neither part of operand1 nor operand2 may be specified in variables
    AlarmOperand2 operand2 = 4 [(gogoproto.customname) = "Operand2"]; // UVE attribute or a json value to compare with the UVE attribute in operand1 
}



message RbacRuleEntriesType {

    repeated RbacRuleType rbac_rule = 1 [(gogoproto.customname) = "RbacRule"]; //  
}



message DomainLimitsType {

    int64 project_limit = 1 [(gogoproto.customname) = "ProjectLimit"]; // Maximum number of projects allowed in this domain
    int64 virtual_network_limit = 2 [(gogoproto.customname) = "VirtualNetworkLimit"]; // Maximum number of virtual networks allowed in this domain
    int64 security_group_limit = 3 [(gogoproto.customname) = "SecurityGroupLimit"]; // Maximum number of security groups allowed in this domain 
}



message TelemetryResourceInfo {

    string path = 1 [(gogoproto.customname) = "Path"]; // 
    string rate = 2 [(gogoproto.customname) = "Rate"]; // 
    string name = 3 [(gogoproto.customname) = "Name"]; //  
}





message LocalLinkConnection {

    string switch_id = 1 [(gogoproto.customname) = "SwitchID"]; // Switch hostname
    string port_id = 2 [(gogoproto.customname) = "PortID"]; // Port ID of switch where Baremetal is connected
    string switch_info = 3 [(gogoproto.customname) = "SwitchInfo"]; // UUID of the Physical-Port with contrail database 
}



message SubnetType {

    string ip_prefix = 1 [(gogoproto.customname) = "IPPrefix"]; // 
    int64 ip_prefix_len = 2 [(gogoproto.customname) = "IPPrefixLen"]; //  
}



message UveKeysType {

    repeated string uve_key = 1 [(gogoproto.customname) = "UveKey"]; // List of UVE tables where this alarm config should be applied 
}



message IpamDnsAddressType {

    IpAddressesType tenant_dns_server_address = 1 [(gogoproto.customname) = "TenantDNSServerAddress"]; // In case of tenant DNS server method, Ip address of DNS server. This will be given in DHCP
    string virtual_dns_server_name = 2 [(gogoproto.customname) = "VirtualDNSServerName"]; // In case of virtual DNS server, name of virtual DNS server 
}



message UserCredentials {

    string username = 1 [(gogoproto.customname) = "Username"]; // 
    string password = 2 [(gogoproto.customname) = "Password"]; //  
}





message MACLimitControlType {

    int64 mac_limit = 1 [(gogoproto.customname) = "MacLimit"]; // Number of MACs that can be learnt
    string mac_limit_action = 2 [(gogoproto.customname) = "MacLimitAction"]; // Action to be taken when MAC limit exceeds 
}



message FirewallRuleMatchTagsTypeIdList {

    repeated int64 tag_type = 1 [(gogoproto.customname) = "TagType"]; //  
}







message GracefulRestartParametersType {

    bool enable = 1 [(gogoproto.customname) = "Enable"]; // Enable/Disable knob for all GR parameters to take effect
    int64 end_of_rib_timeout = 2 [(gogoproto.customname) = "EndOfRibTimeout"]; // Maximum time (in seconds) to wait for EndOfRib reception/transmission
    bool bgp_helper_enable = 3 [(gogoproto.customname) = "BGPHelperEnable"]; // Enable GR Helper mode for BGP peers in contrail-control
    bool xmpp_helper_enable = 4 [(gogoproto.customname) = "XMPPHelperEnable"]; // Enable GR Helper mode for XMPP peers (agents) in contrail-control
    int64 restart_time = 5 [(gogoproto.customname) = "RestartTime"]; // Time (in seconds) taken by the restarting speaker to get back to stable state
    int64 long_lived_restart_time = 6 [(gogoproto.customname) = "LongLivedRestartTime"]; // Extended Time (in seconds) taken by the restarting speaker after restart-time to get back to stable state 
}



message FlowAgingTimeout {

    int64 timeout_in_seconds = 1 [(gogoproto.customname) = "TimeoutInSeconds"]; // 
    string protocol = 2 [(gogoproto.customname) = "Protocol"]; // 
    int64 port = 3 [(gogoproto.customname) = "Port"]; //  
}





message PermType {

    string owner = 1 [(gogoproto.customname) = "Owner"]; // 
    int64 owner_access = 2 [(gogoproto.customname) = "OwnerAccess"]; // 
    int64 other_access = 3 [(gogoproto.customname) = "OtherAccess"]; // 
    string group = 4 [(gogoproto.customname) = "Group"]; // 
    int64 group_access = 5 [(gogoproto.customname) = "GroupAccess"]; //  
}



message PermType2 {

    string owner = 1 [(gogoproto.customname) = "Owner"]; // Owner tenant of the object
    int64 owner_access = 2 [(gogoproto.customname) = "OwnerAccess"]; // Owner permissions of the object
    int64 global_access = 3 [(gogoproto.customname) = "GlobalAccess"]; // Globally(others) shared object and permissions for others of the object
    repeated ShareType share = 4 [(gogoproto.customname) = "Share"]; // Selectively shared object, List of (tenant, permissions) 
}





message BGPaaServiceParametersType {

    int64 port_start = 1 [(gogoproto.customname) = "PortStart"]; // 
    int64 port_end = 2 [(gogoproto.customname) = "PortEnd"]; //  
}





message ShareType {

    int64 tenant_access = 1 [(gogoproto.customname) = "TenantAccess"]; // Allowed permissions in sharing
    string tenant = 2 [(gogoproto.customname) = "Tenant"]; // Name of tenant with whom the object is shared 
}



message MatchConditionType {

    PortType src_port = 1 [(gogoproto.customname) = "SRCPort"]; // Range of source port for layer 4 protocol
    AddressType src_address = 2 [(gogoproto.customname) = "SRCAddress"]; // Source ip matching criteria
    string ethertype = 3 [(gogoproto.customname) = "Ethertype"]; // 
    AddressType dst_address = 4 [(gogoproto.customname) = "DSTAddress"]; // Destination ip matching criteria
    PortType dst_port = 5 [(gogoproto.customname) = "DSTPort"]; // Range of destination  port for layer 4 protocol
    string protocol = 6 [(gogoproto.customname) = "Protocol"]; // Layer 4 protocol in ip packet 
}



message SecurityLoggingObjectRuleEntryType {

    string rule_uuid = 1 [(gogoproto.customname) = "RuleUUID"]; // Rule UUID of network policy or security-group. When this is absent it implies all rules of security-group or network-policy
    int64 rate = 2 [(gogoproto.customname) = "Rate"]; // Rate at which sessions are logged. When rates are specified at multiple levels, the rate which specifies highest frequency is selected 
}



message InterfaceMirrorType {

    string traffic_direction = 1 [(gogoproto.customname) = "TrafficDirection"]; // Specifies direction of traffic to mirror, Ingress, Egress or both
    MirrorActionType mirror_to = 2 [(gogoproto.customname) = "MirrorTo"]; // Mirror destination configuration 
}



message ProviderDetails {

    int64 segmentation_id = 1 [(gogoproto.customname) = "SegmentationID"]; // 
    string physical_network = 2 [(gogoproto.customname) = "PhysicalNetwork"]; //  
}





message DhcpOptionType {

    string dhcp_option_value = 1 [(gogoproto.customname) = "DHCPOptionValue"]; // Encoded DHCP option value (decimal)
    string dhcp_option_value_bytes = 2 [(gogoproto.customname) = "DHCPOptionValueBytes"]; // Value of the DHCP option to be copied byte by byte
    string dhcp_option_name = 3 [(gogoproto.customname) = "DHCPOptionName"]; // Name of the DHCP option 
}







message VirtualDnsType {

    string floating_ip_record = 1 [(gogoproto.customname) = "FloatingIPRecord"]; // Decides how floating ip records are added
    string domain_name = 2 [(gogoproto.customname) = "DomainName"]; // Default domain name for this virtual DNS server
    bool external_visible = 3 [(gogoproto.customname) = "ExternalVisible"]; // Currently this option is not supported
    string next_virtual_DNS = 4 [(gogoproto.customname) = "NextVirtualDNS"]; // Next virtual DNS server to lookup if record is not found. Default is proxy to infrastructure DNS
    bool dynamic_records_from_client = 5 [(gogoproto.customname) = "DynamicRecordsFromClient"]; // Allow automatic addition of records on VM launch, default is True
    bool reverse_resolution = 6 [(gogoproto.customname) = "ReverseResolution"]; // Allow reverse DNS resolution, ip to name mapping
    int64 default_ttl_seconds = 7 [(gogoproto.customname) = "DefaultTTLSeconds"]; // Default Time To Live for DNS records
    string record_order = 8 [(gogoproto.customname) = "RecordOrder"]; // Order of DNS load balancing, fixed, random, round-robin. Default is random 
}



message ProtocolType {

    string protocol = 1 [(gogoproto.customname) = "Protocol"]; // 
    int64 port = 2 [(gogoproto.customname) = "Port"]; //  
}



message DriverInfo {

    string ipmi_address = 1 [(gogoproto.customname) = "IpmiAddress"]; // IPMI address of the server to manage boot device and power management
    string ipmi_username = 2 [(gogoproto.customname) = "IpmiUsername"]; // Username to access IPMI
    string ipmi_password = 3 [(gogoproto.customname) = "IpmiPassword"]; // Password to access IPMI
    string deploy_kernel = 4 [(gogoproto.customname) = "DeployKernel"]; // UUID of the deploy kernel
    string deploy_ramdisk = 5 [(gogoproto.customname) = "DeployRamdisk"]; // UUID of the deploy initrd/ramdisk 
}



message VirtualNetworkPolicyType {

    TimerType timer = 1 [(gogoproto.customname) = "Timer"]; // Timer to specify when the policy can be active
    SequenceType sequence = 2 [(gogoproto.customname) = "Sequence"]; // Sequence number to specify order of policy attachment to network 
}





message MACMoveLimitControlType {

    int64 mac_move_time_window = 1 [(gogoproto.customname) = "MacMoveTimeWindow"]; // MAC move time window
    int64 mac_move_limit = 2 [(gogoproto.customname) = "MacMoveLimit"]; // Number of MAC moves permitted in mac move time window
    string mac_move_limit_action = 3 [(gogoproto.customname) = "MacMoveLimitAction"]; // Action to be taken when MAC move limit exceeds 
}





message LinklocalServicesTypes {

    repeated LinklocalServiceEntryType linklocal_service_entry = 1 [(gogoproto.customname) = "LinklocalServiceEntry"]; // List of link local services 
}



message ServiceInstanceType {

    string right_virtual_network = 1 [(gogoproto.customname) = "RightVirtualNetwork"]; // Deprecated
    string right_ip_address = 2 [(gogoproto.customname) = "RightIPAddress"]; // Deprecated
    string availability_zone = 3 [(gogoproto.customname) = "AvailabilityZone"]; // Availability zone used to spawn VM(s) for this service instance, used in version 1 (V1) only
    string management_virtual_network = 4 [(gogoproto.customname) = "ManagementVirtualNetwork"]; // Deprecated
    ServiceScaleOutType scale_out = 5 [(gogoproto.customname) = "ScaleOut"]; // Number of virtual machines in this service instance, used in version 1 (V1) only
    string ha_mode = 6 [(gogoproto.customname) = "HaMode"]; // When scale-out is greater than one, decides if active-active or active-backup, used in version 1 (V1) only
    string virtual_router_id = 7 [(gogoproto.customname) = "VirtualRouterID"]; // UUID of a virtual-router on which this service instance need to spawn. Used to spawn services on CPE device when Nova is not present
    repeated ServiceInstanceInterfaceType interface_list = 8 [(gogoproto.customname) = "InterfaceList"]; // List of service instance interface properties. Ordered list as per service template
    string left_ip_address = 9 [(gogoproto.customname) = "LeftIPAddress"]; // Deprecated
    string left_virtual_network = 10 [(gogoproto.customname) = "LeftVirtualNetwork"]; // Deprecated
    bool auto_policy = 11 [(gogoproto.customname) = "AutoPolicy"]; // Set when system creates internal service chains, example SNAT with router external flag in logical router 
}



message VrfAssignRuleType {

    string routing_instance = 1 [(gogoproto.customname) = "RoutingInstance"]; // 
    MatchConditionType match_condition = 2 [(gogoproto.customname) = "MatchCondition"]; // 
    int64 vlan_tag = 3 [(gogoproto.customname) = "VlanTag"]; // 
    bool ignore_acl = 4 [(gogoproto.customname) = "IgnoreACL"]; //  
}



message RoutingPolicyServiceInstanceType {

    string right_sequence = 1 [(gogoproto.customname) = "RightSequence"]; // 
    string left_sequence = 2 [(gogoproto.customname) = "LeftSequence"]; //  
}







message PluginProperties {

    repeated PluginProperty plugin_property = 1 [(gogoproto.customname) = "PluginProperty"]; // List of plugin specific properties (property, value) 
}



message StaticMirrorNhType {

    string vtep_dst_ip_address = 1 [(gogoproto.customname) = "VtepDSTIPAddress"]; // ip address of destination vtep
    string vtep_dst_mac_address = 2 [(gogoproto.customname) = "VtepDSTMacAddress"]; // mac address of destination vtep
    int64 vni = 3 [(gogoproto.customname) = "Vni"]; // Vni of vtep 
}



message RbacRuleType {

    string rule_object = 1 [(gogoproto.customname) = "RuleObject"]; // Name of the REST API (object) for this rule, * represent all objects
    repeated RbacPermType rule_perms = 2 [(gogoproto.customname) = "RulePerms"]; // List of [(role, permissions),...]
    string rule_field = 3 [(gogoproto.customname) = "RuleField"]; // Name of the level one field (property) for this object, * represent all properties 
}





message PortMappings {

    repeated PortMap port_mappings = 1 [(gogoproto.customname) = "PortMappings"]; //  
}



message IpamSubnetType {

    SubnetType subnet = 1 [(gogoproto.customname) = "Subnet"]; // ip prefix and length for the subnet
    bool addr_from_start = 2 [(gogoproto.customname) = "AddrFromStart"]; // Start address allocation from start or from end of address range.
    bool enable_dhcp = 3 [(gogoproto.customname) = "EnableDHCP"]; // Enable DHCP for the VM(s) in this subnet
    string default_gateway = 4 [(gogoproto.customname) = "DefaultGateway"]; // default-gateway ip address in the subnet, if not provided one is auto generated by the system.
    int64 alloc_unit = 5 [(gogoproto.customname) = "AllocUnit"]; // allocation unit for this subnet to allocate bulk ip addresses
    string created = 6 [(gogoproto.customname) = "Created"]; // timestamp when subnet object gets created
    repeated string dns_nameservers = 7 [(gogoproto.customname) = "DNSNameservers"]; // Tenant DNS servers ip address in tenant DNS method
    DhcpOptionsListType dhcp_option_list = 8 [(gogoproto.customname) = "DHCPOptionList"]; // DHCP options list to be sent via DHCP for  VM(s) in this subnet
    string subnet_uuid = 9 [(gogoproto.customname) = "SubnetUUID"]; // Subnet UUID is auto generated by the system
    repeated AllocationPoolType allocation_pools = 10 [(gogoproto.customname) = "AllocationPools"]; // List of ranges of ip address within the subnet from which to allocate ip address. default is entire prefix
    string last_modified = 11 [(gogoproto.customname) = "LastModified"]; // timestamp when subnet object gets updated
    RouteTableType host_routes = 12 [(gogoproto.customname) = "HostRoutes"]; // Host routes to be sent via DHCP for VM(s) in this subnet, Next hop for these routes is always default gateway
    string dns_server_address = 13 [(gogoproto.customname) = "DNSServerAddress"]; // DNS server ip address in the subnet, if not provided one is auto generated by the system.
    string subnet_name = 14 [(gogoproto.customname) = "SubnetName"]; // User provided name for this subnet 
}



message ServiceTemplateType {

    bool availability_zone_enable = 1 [(gogoproto.customname) = "AvailabilityZoneEnable"]; // Enable availability zone for version 1 service instances
    string instance_data = 2 [(gogoproto.customname) = "InstanceData"]; // Opaque string (typically in json format) used to spawn a vrouter-instance.
    bool ordered_interfaces = 3 [(gogoproto.customname) = "OrderedInterfaces"]; // Deprecated
    string service_virtualization_type = 4 [(gogoproto.customname) = "ServiceVirtualizationType"]; // Service virtualization type decides how individual service instances are instantiated
    repeated ServiceTemplateInterfaceType interface_type = 5 [(gogoproto.customname) = "InterfaceType"]; // List of interfaces which decided number of interfaces and type
    string image_name = 6 [(gogoproto.customname) = "ImageName"]; // Glance image name for the service virtual machine, Version 1 only
    string service_mode = 7 [(gogoproto.customname) = "ServiceMode"]; // Service instance mode decides how packets are forwarded across the service
    int64 version = 8 [(gogoproto.customname) = "Version"]; // 
    string service_type = 9 [(gogoproto.customname) = "ServiceType"]; // Service instance mode decides how routing happens across the service
    string flavor = 10 [(gogoproto.customname) = "Flavor"]; // Nova flavor used for service virtual machines, Version 1 only
    bool service_scaling = 11 [(gogoproto.customname) = "ServiceScaling"]; // Enable scaling of service virtual machines, Version 1 only
    string vrouter_instance_type = 12 [(gogoproto.customname) = "VrouterInstanceType"]; // Mechanism used to spawn service instance, when vrouter is spawning instances.Allowed values libvirt-qemu, docker or netns 
}





message FirewallSequence {

    string sequence = 1 [(gogoproto.customname) = "Sequence"]; //  
}



message KeyValuePair {

    string value = 1 [(gogoproto.customname) = "Value"]; // 
    string key = 2 [(gogoproto.customname) = "Key"]; //  
}





message LoadbalancerType {

    string status = 1 [(gogoproto.customname) = "Status"]; // Operational status of the load balancer updated by system.
    string provisioning_status = 2 [(gogoproto.customname) = "ProvisioningStatus"]; // Provisioning  status of the load balancer updated by system.
    bool admin_state = 3 [(gogoproto.customname) = "AdminState"]; // Administrative up or down
    string vip_address = 4 [(gogoproto.customname) = "VipAddress"]; // Virtual ip for this LBaaS
    string vip_subnet_id = 5 [(gogoproto.customname) = "VipSubnetID"]; // Subnet UUID of the subnet of VIP, representing virtual network.
    string operating_status = 6 [(gogoproto.customname) = "OperatingStatus"]; // Operational status of the load balancer updated by system. 
}



message JunosServicePorts {

    repeated string service_port = 1 [(gogoproto.customname) = "ServicePort"]; //  
}



message ServiceTemplateInterfaceType {

    bool static_route_enable = 1 [(gogoproto.customname) = "StaticRouteEnable"]; // Static routes configured required on this interface of service instance (Only V1)
    bool shared_ip = 2 [(gogoproto.customname) = "SharedIP"]; // Shared ip is required on this interface when service instance is scaled out (Only V1)
    string service_interface_type = 3 [(gogoproto.customname) = "ServiceInterfaceType"]; // Type of service interface supported by this template left, right or other. 
}







message PluginProperty {

    string property = 1 [(gogoproto.customname) = "Property"]; // 
    string value = 2 [(gogoproto.customname) = "Value"]; //  
}



message AllowedAddressPairs {

    repeated AllowedAddressPair allowed_address_pair = 1 [(gogoproto.customname) = "AllowedAddressPair"]; //  
}



message AllocationPoolType {

    bool vrouter_specific_pool = 1 [(gogoproto.customname) = "VrouterSpecificPool"]; // 
    string start = 2 [(gogoproto.customname) = "Start"]; // 
    string end = 3 [(gogoproto.customname) = "End"]; //  
}



message SequenceType {

    int64 major = 1 [(gogoproto.customname) = "Major"]; // 
    int64 minor = 2 [(gogoproto.customname) = "Minor"]; //  
}



message FloatingIpPoolSubnetType {

    repeated string subnet_uuid = 1 [(gogoproto.customname) = "SubnetUUID"]; // List of subnets associated with this floating ip pool. 
}



message ControlTrafficDscpType {

    int64 control = 1 [(gogoproto.customname) = "Control"]; // DSCP value for control protocols traffic
    int64 analytics = 2 [(gogoproto.customname) = "Analytics"]; // DSCP value for traffic towards analytics
    int64 dns = 3 [(gogoproto.customname) = "DNS"]; // DSCP value for DNS traffic 
}



message IpAddressesType {

    string ip_address = 1 [(gogoproto.customname) = "IPAddress"]; //  
}



message ServiceHealthCheckType {

    int64 delayUsecs = 1 [(gogoproto.customname) = "DelayUsecs"]; // Time in micro seconds at which health check is repeated
    int64 timeoutUsecs = 2 [(gogoproto.customname) = "TimeoutUsecs"]; // Time in micro seconds to wait for response
    bool enabled = 3 [(gogoproto.customname) = "Enabled"]; // Administratively enable or disable this health check.
    int64 delay = 4 [(gogoproto.customname) = "Delay"]; // Time in seconds at which health check is repeated
    string expected_codes = 5 [(gogoproto.customname) = "ExpectedCodes"]; // In case monitor protocol is HTTP, expected return code for HTTP operations like 200 ok.
    int64 max_retries = 6 [(gogoproto.customname) = "MaxRetries"]; // Number of failures before declaring health bad
    string health_check_type = 7 [(gogoproto.customname) = "HealthCheckType"]; // Health check type, currently only link-local, end-to-end and segment are supported
    string http_method = 8 [(gogoproto.customname) = "HTTPMethod"]; // In case monitor protocol is HTTP, type of http method used like GET, PUT, POST etc
    int64 timeout = 9 [(gogoproto.customname) = "Timeout"]; // Time in seconds to wait for response
    string url_path = 10 [(gogoproto.customname) = "URLPath"]; // In case monitor protocol is HTTP, URL to be used. In case of ICMP, ip address
    string monitor_type = 11 [(gogoproto.customname) = "MonitorType"]; // Protocol used to monitor health, currently only HTTP, ICMP(ping), and BFD are supported 
}







message AclRuleType {

    string rule_uuid = 1 [(gogoproto.customname) = "RuleUUID"]; // Rule UUID is identifier used in flow records to identify rule
    MatchConditionType match_condition = 2 [(gogoproto.customname) = "MatchCondition"]; // Match condition for packets
    string direction = 3 [(gogoproto.customname) = "Direction"]; // Direction in the rule
    ActionListType action_list = 4 [(gogoproto.customname) = "ActionList"]; // Actions to be performed if packets match condition 
}



message RbacPermType {

    string role_crud = 1 [(gogoproto.customname) = "RoleCrud"]; // String CRUD representing permissions for C=create, R=read, U=update, D=delete.
    string role_name = 2 [(gogoproto.customname) = "RoleName"]; // Name of the role 
}



message MacAddressesType {

    repeated string mac_address = 1 [(gogoproto.customname) = "MacAddress"]; //  
}





message FlowAgingTimeoutList {

    repeated FlowAgingTimeout flow_aging_timeout = 1 [(gogoproto.customname) = "FlowAgingTimeout"]; // List of (ip protocol, port number, timeout in seconds) 
}



message LoadbalancerMemberType {

    string status = 1 [(gogoproto.customname) = "Status"]; // Operational status of the member.
    string status_description = 2 [(gogoproto.customname) = "StatusDescription"]; // Operational status description of the member.
    int64 weight = 3 [(gogoproto.customname) = "Weight"]; // Weight for load balancing
    bool admin_state = 4 [(gogoproto.customname) = "AdminState"]; // Administrative up or down.
    string address = 5 [(gogoproto.customname) = "Address"]; // Ip address of the member
    int64 protocol_port = 6 [(gogoproto.customname) = "ProtocolPort"]; // Destination port for the application on the member. 
}





message BridgeDomainMembershipType {

    int64 vlan_tag = 1 [(gogoproto.customname) = "VlanTag"]; // VLAN tag of the incoming packet that maps the                      virtual-machine-interface to bridge domain 
}



message VnSubnetsType {

    repeated IpamSubnetType ipam_subnets = 1 [(gogoproto.customname) = "IpamSubnets"]; // 
    RouteTableType host_routes = 2 [(gogoproto.customname) = "HostRoutes"]; // Common host routes to be sent via DHCP for VM(s) in all the subnets, Next hop for these routes is always default gateway 
}











message SNMPCredentials {

    string v3_privacy_protocol = 1 [(gogoproto.customname) = "V3PrivacyProtocol"]; // 
    int64 retries = 2 [(gogoproto.customname) = "Retries"]; // 
    string v3_authentication_password = 3 [(gogoproto.customname) = "V3AuthenticationPassword"]; // 
    int64 v3_engine_time = 4 [(gogoproto.customname) = "V3EngineTime"]; // 
    string v3_engine_id = 5 [(gogoproto.customname) = "V3EngineID"]; // 
    int64 local_port = 6 [(gogoproto.customname) = "LocalPort"]; // 
    string v3_security_level = 7 [(gogoproto.customname) = "V3SecurityLevel"]; // 
    string v3_context = 8 [(gogoproto.customname) = "V3Context"]; // 
    string v3_security_name = 9 [(gogoproto.customname) = "V3SecurityName"]; // 
    string v3_authentication_protocol = 10 [(gogoproto.customname) = "V3AuthenticationProtocol"]; // 
    string v2_community = 11 [(gogoproto.customname) = "V2Community"]; // 
    string v3_security_engine_id = 12 [(gogoproto.customname) = "V3SecurityEngineID"]; // 
    string v3_context_engine_id = 13 [(gogoproto.customname) = "V3ContextEngineID"]; // 
    int64 version = 14 [(gogoproto.customname) = "Version"]; // 
    int64 timeout = 15 [(gogoproto.customname) = "Timeout"]; // 
    string v3_privacy_password = 16 [(gogoproto.customname) = "V3PrivacyPassword"]; // 
    int64 v3_engine_boots = 17 [(gogoproto.customname) = "V3EngineBoots"]; //  
}









message LinklocalServiceEntryType {

    repeated string ip_fabric_service_ip = 1 [(gogoproto.customname) = "IPFabricServiceIP"]; // Destination ip address to which link local traffic will forwarded
    string linklocal_service_name = 2 [(gogoproto.customname) = "LinklocalServiceName"]; // Name of the link local service. VM name resolution of this name will result in link local ip address
    string linklocal_service_ip = 3 [(gogoproto.customname) = "LinklocalServiceIP"]; // ip address of the link local service.
    int64 ip_fabric_service_port = 4 [(gogoproto.customname) = "IPFabricServicePort"]; // Destination TCP port number to which link local traffic will forwarded
    string ip_fabric_DNS_service_name = 5 [(gogoproto.customname) = "IPFabricDNSServiceName"]; // DNS name to which link local service will be proxied
    int64 linklocal_service_port = 6 [(gogoproto.customname) = "LinklocalServicePort"]; // Destination TCP port number of link local service 
}



message RouteTableType {

    repeated RouteType route = 1 [(gogoproto.customname) = "Route"]; // List of ip routes with following fields. 
}



message FirewallServiceGroupType {

    repeated FirewallServiceType firewall_service = 1 [(gogoproto.customname) = "FirewallService"]; //  
}





message VirtualRouterNetworkIpamType {

    repeated SubnetType subnet = 1 [(gogoproto.customname) = "Subnet"]; // List of ip prefix and length for vrouter specific subnets
    repeated AllocationPoolType allocation_pools = 2 [(gogoproto.customname) = "AllocationPools"]; // List of ranges of ip address for vrouter specific allocation 
}



message MirrorActionType {

    int64 nic_assisted_mirroring_vlan = 1 [(gogoproto.customname) = "NicAssistedMirroringVlan"]; // The VLAN to be tagged on the traffic for NIC to Mirror
    string analyzer_name = 2 [(gogoproto.customname) = "AnalyzerName"]; // Name of service instance used as analyzer
    string nh_mode = 3 [(gogoproto.customname) = "NHMode"]; // This mode used to determine static or dynamic nh 
    bool juniper_header = 4 [(gogoproto.customname) = "JuniperHeader"]; // This flag is used to determine with/without juniper-header
    int64 udp_port = 5 [(gogoproto.customname) = "UDPPort"]; // ip udp port used in contrail default encapsulation for mirroring
    string routing_instance = 6 [(gogoproto.customname) = "RoutingInstance"]; // Internal use only, should be set to -1
    StaticMirrorNhType static_nh_header = 7 [(gogoproto.customname) = "StaticNHHeader"]; // vtep details required if static nh enabled
    string analyzer_ip_address = 8 [(gogoproto.customname) = "AnalyzerIPAddress"]; // ip address of interface to which mirrored packets are sent
    string encapsulation = 9 [(gogoproto.customname) = "Encapsulation"]; // Encapsulation for Mirrored packet, not used currently
    string analyzer_mac_address = 10 [(gogoproto.customname) = "AnalyzerMacAddress"]; // mac address of interface to which mirrored packets are sent 
    bool nic_assisted_mirroring = 11 [(gogoproto.customname) = "NicAssistedMirroring"]; // This flag is used to select nic assisted mirroring 
}



message PortMap {

    int64 src_port = 1 [(gogoproto.customname) = "SRCPort"]; // 
    string protocol = 2 [(gogoproto.customname) = "Protocol"]; // 
    int64 dst_port = 3 [(gogoproto.customname) = "DSTPort"]; //  
}



message CommunityAttributes {

    repeated string community_attribute = 1 [(gogoproto.customname) = "CommunityAttribute"]; //  
}



message IpamSubnets {

    repeated IpamSubnetType subnets = 1 [(gogoproto.customname) = "Subnets"]; //  
}



message QosIdForwardingClassPair {

    int64 key = 1 [(gogoproto.customname) = "Key"]; // QoS bit value (DSCP or Vlan priority or EXP bit value
    int64 forwarding_class_id = 2 [(gogoproto.customname) = "ForwardingClassID"]; //  
}







message VirtualNetworkType {

    string forwarding_mode = 1 [(gogoproto.customname) = "ForwardingMode"]; // Packet forwarding mode for this virtual network
    bool allow_transit = 2 [(gogoproto.customname) = "AllowTransit"]; // 
    int64 network_id = 3 [(gogoproto.customname) = "NetworkID"]; // Not currently in used
    bool mirror_destination = 4 [(gogoproto.customname) = "MirrorDestination"]; // Flag to mark the virtual network as mirror destination network
    int64 vxlan_network_identifier = 5 [(gogoproto.customname) = "VxlanNetworkIdentifier"]; // VxLAN VNI value for this network
    string rpf = 6 [(gogoproto.customname) = "RPF"]; // Flag used to disable Reverse Path Forwarding(RPF) check for this network 
}



message IdPermsType {

    bool enable = 1 [(gogoproto.customname) = "Enable"]; // Administratively Enable/Disable this object
    string description = 2 [(gogoproto.customname) = "Description"]; // User provided text
    string created = 3 [(gogoproto.customname) = "Created"]; // Time when this object was created
    string creator = 4 [(gogoproto.customname) = "Creator"]; // Id of tenant who created this object
    bool user_visible = 5 [(gogoproto.customname) = "UserVisible"]; // System created internal objects will have this flag set and will not be visible
    string last_modified = 6 [(gogoproto.customname) = "LastModified"]; // Time when this object was created
    PermType permissions = 7 [(gogoproto.customname) = "Permissions"]; // No longer used, will be removed 
}





message MemberType {

    string role = 1 [(gogoproto.customname) = "Role"]; // User role for the project 
}



message ServiceInstanceInterfaceType {

    string virtual_network = 1 [(gogoproto.customname) = "VirtualNetwork"]; // Interface belongs to this virtual network.
    string ip_address = 2 [(gogoproto.customname) = "IPAddress"]; // Shared ip for this interface (Only V1)
    AllowedAddressPairs allowed_address_pairs = 3 [(gogoproto.customname) = "AllowedAddressPairs"]; // Allowed address pairs, list of (IP address, MAC) for this interface
    RouteTableType static_routes = 4 [(gogoproto.customname) = "StaticRoutes"]; // Static routes for this interface (Only V1) 
}







message FirewallRuleMatchTagsType {

    repeated string tag_list = 1 [(gogoproto.customname) = "TagList"]; //  
}



message VirtualDnsRecordType {

    string record_name = 1 [(gogoproto.customname) = "RecordName"]; // DNS name to be resolved
    string record_class = 2 [(gogoproto.customname) = "RecordClass"]; // DNS record class supported is IN
    string record_data = 3 [(gogoproto.customname) = "RecordData"]; // DNS record data is either ip address or string depending on type
    string record_type = 4 [(gogoproto.customname) = "RecordType"]; // DNS record type can be A, AAAA, CNAME, PTR, NS and MX
    int64 record_ttl_seconds = 5 [(gogoproto.customname) = "RecordTTLSeconds"]; // Time To Live for this DNS record
    int64 record_mx_preference = 6 [(gogoproto.customname) = "RecordMXPreference"]; //  
}



message AlarmOperand2 {

    string uve_attribute = 1 [(gogoproto.customname) = "UveAttribute"]; // UVE attribute specified in the dotted format. Example: NodeStatus.process_info.process_state
    string json_value = 2 [(gogoproto.customname) = "JSONValue"]; // json value as string 
}



message DiscoveryServiceAssignmentType {

    repeated DiscoveryPubSubEndPointType subscriber = 1 [(gogoproto.customname) = "Subscriber"]; // subscriber set
    DiscoveryPubSubEndPointType publisher = 2 [(gogoproto.customname) = "Publisher"]; // Publisher set 
}



message RouteType {

    string prefix = 1 [(gogoproto.customname) = "Prefix"]; // Ip prefix/len format prefix
    string next_hop = 2 [(gogoproto.customname) = "NextHop"]; // Ip address or service instance name.
    CommunityAttributes community_attributes = 3 [(gogoproto.customname) = "CommunityAttributes"]; // 
    string next_hop_type = 4 [(gogoproto.customname) = "NextHopType"]; //  
}







message VirtualIpType {

    string status = 1 [(gogoproto.customname) = "Status"]; // Operating status for this virtual ip.
    string status_description = 2 [(gogoproto.customname) = "StatusDescription"]; // Operating status description this virtual ip.
    string protocol = 3 [(gogoproto.customname) = "Protocol"]; // IP protocol string like http, https or tcp.
    string subnet_id = 4 [(gogoproto.customname) = "SubnetID"]; // UUID of subnet in which to allocate the Virtual IP.
    string persistence_cookie_name = 5 [(gogoproto.customname) = "PersistenceCookieName"]; // Set this string if the relation of client and server(pool member) need to persist.
    int64 connection_limit = 6 [(gogoproto.customname) = "ConnectionLimit"]; // Maximum number of concurrent connections
    string persistence_type = 7 [(gogoproto.customname) = "PersistenceType"]; // Method for persistence. HTTP_COOKIE, SOURCE_IP or APP_COOKIE.
    bool admin_state = 8 [(gogoproto.customname) = "AdminState"]; // Administrative up or down.
    string address = 9 [(gogoproto.customname) = "Address"]; // IP address automatically allocated by system.
    int64 protocol_port = 10 [(gogoproto.customname) = "ProtocolPort"]; // Layer 4 protocol destination port. 
}









message EcmpHashingIncludeFields {

    bool destination_ip = 1 [(gogoproto.customname) = "DestinationIP"]; // When false, do not use destination ip in the ECMP hash calculation
    bool ip_protocol = 2 [(gogoproto.customname) = "IPProtocol"]; // When false, do not use ip protocol in the ECMP hash calculation
    bool source_ip = 3 [(gogoproto.customname) = "SourceIP"]; // When false, do not use source ip in the ECMP hash calculation
    bool hashing_configured = 4 [(gogoproto.customname) = "HashingConfigured"]; // When True, Packet header fields used in calculating ECMP hash is decided by following flags
    bool source_port = 5 [(gogoproto.customname) = "SourcePort"]; // When false, do not use source port in the ECMP hash calculation
    bool destination_port = 6 [(gogoproto.customname) = "DestinationPort"]; // When false, do not use destination port in the ECMP hash calculation 
}



message SubnetListType {

    repeated SubnetType subnet = 1 [(gogoproto.customname) = "Subnet"]; //  
}



message AlarmAndList {

    repeated AlarmExpression and_list = 1 [(gogoproto.customname) = "AndList"]; //  
}



message LoadbalancerHealthmonitorType {

    int64 delay = 1 [(gogoproto.customname) = "Delay"]; // Time in seconds  at which health check is repeated
    string expected_codes = 2 [(gogoproto.customname) = "ExpectedCodes"]; // In case monitor protocol is HTTP, expected return code for HTTP operations like 200 ok.
    int64 max_retries = 3 [(gogoproto.customname) = "MaxRetries"]; // Number of failures before declaring health bad
    string http_method = 4 [(gogoproto.customname) = "HTTPMethod"]; // In case monitor protocol is HTTP, type of http method used like GET, PUT, POST etc
    bool admin_state = 5 [(gogoproto.customname) = "AdminState"]; // Administratively up or dowm.
    int64 timeout = 6 [(gogoproto.customname) = "Timeout"]; // Time in seconds to wait for response
    string url_path = 7 [(gogoproto.customname) = "URLPath"]; // In case monitor protocol is HTTP, URL to be used. In case of ICMP, ip address
    string monitor_type = 8 [(gogoproto.customname) = "MonitorType"]; // Protocol used to monitor health, PING, HTTP, HTTPS or TCP 
}





message QosIdForwardingClassPairs {

    repeated QosIdForwardingClassPair qos_id_forwarding_class_pair = 1 [(gogoproto.customname) = "QosIDForwardingClassPair"]; //  
}









message AlarmOrList {

    repeated AlarmAndList or_list = 1 [(gogoproto.customname) = "OrList"]; //  
}



message RouteTargetList {

    repeated string route_target = 1 [(gogoproto.customname) = "RouteTarget"]; //  
}



message TimerType {

    string start_time = 1 [(gogoproto.customname) = "StartTime"]; // 
    string off_interval = 2 [(gogoproto.customname) = "OffInterval"]; // 
    string on_interval = 3 [(gogoproto.customname) = "OnInterval"]; // 
    string end_time = 4 [(gogoproto.customname) = "EndTime"]; //  
}





message ServiceApplianceInterfaceType {

    string interface_type = 1 [(gogoproto.customname) = "InterfaceType"]; //  
}



message SecurityLoggingObjectRuleListType {

    repeated SecurityLoggingObjectRuleEntryType rule = 1 [(gogoproto.customname) = "Rule"]; // List of rules along with logging rate for each rule. Both rule-uuid and rate are optional. When rule-uuid is absent then it means all rules of associated SG or network-policy 
}



message ServiceScaleOutType {

    bool auto_scale = 1 [(gogoproto.customname) = "AutoScale"]; // Automatically change the number of virtual machines. Not implemented
    int64 max_instances = 2 [(gogoproto.customname) = "MaxInstances"]; // Maximum number of scale out factor(virtual machines). can be changed dynamically 
}



message OpenStackAddress {

    string addr = 1 [(gogoproto.customname) = "Addr"]; // IP Address given to the instance 
}



message ActionListType {

    string gateway_name = 1 [(gogoproto.customname) = "GatewayName"]; // For internal use only
    bool log = 2 [(gogoproto.customname) = "Log"]; // Flow records for traffic matching this rule are sent at higher priority
    bool alert = 3 [(gogoproto.customname) = "Alert"]; // For internal use only
    string qos_action = 4 [(gogoproto.customname) = "QosAction"]; // FQN of Qos configuration object for QoS marking
    string assign_routing_instance = 5 [(gogoproto.customname) = "AssignRoutingInstance"]; // For internal use only
    MirrorActionType mirror_to = 6 [(gogoproto.customname) = "MirrorTo"]; // Mirror traffic matching this rule
    string simple_action = 7 [(gogoproto.customname) = "SimpleAction"]; // Simple allow(pass) or deny action for traffic matching this rule
    repeated string apply_service = 8 [(gogoproto.customname) = "ApplyService"]; // Ordered list of service instances in service chain applied to traffic matching the rule 
}



message EncapsulationPrioritiesType {

    repeated string encapsulation = 1 [(gogoproto.customname) = "Encapsulation"]; // Ordered list of encapsulation types to be used in priority 
}





message PolicyRuleType {

    string direction = 1 [(gogoproto.customname) = "Direction"]; // 
    string protocol = 2 [(gogoproto.customname) = "Protocol"]; // Layer 4 protocol in ip packet
    repeated AddressType dst_addresses = 3 [(gogoproto.customname) = "DSTAddresses"]; // Destination ip matching criteria
    ActionListType action_list = 4 [(gogoproto.customname) = "ActionList"]; // Actions to be performed if packets match condition
    string created = 5 [(gogoproto.customname) = "Created"]; // timestamp when security group rule object gets created
    string rule_uuid = 6 [(gogoproto.customname) = "RuleUUID"]; // Rule UUID is identifier used in flow records to identify rule
    repeated PortType dst_ports = 7 [(gogoproto.customname) = "DSTPorts"]; // Range of destination  port for layer 4 protocol
    repeated string application = 8 [(gogoproto.customname) = "Application"]; // Optionally application can be specified instead of protocol and port. not currently implemented
    string last_modified = 9 [(gogoproto.customname) = "LastModified"]; // timestamp when security group rule object gets updated
    string ethertype = 10 [(gogoproto.customname) = "Ethertype"]; // 
    repeated AddressType src_addresses = 11 [(gogoproto.customname) = "SRCAddresses"]; // Source ip matching criteria
    SequenceType rule_sequence = 12 [(gogoproto.customname) = "RuleSequence"]; // Deprecated, Will be removed because rules themselves are already an ordered list
    repeated PortType src_ports = 13 [(gogoproto.customname) = "SRCPorts"]; // Range of source port for layer 4 protocol 
}



message OpenStackLink {

    string href = 1 [(gogoproto.customname) = "Href"]; // Link of the resource
    string rel = 2 [(gogoproto.customname) = "Rel"]; // Type of the link
    string type = 3 [(gogoproto.customname) = "Type"]; // provides a hint as to the type of representation to expect when following the link 
}



message DiscoveryPubSubEndPointType {

    string ep_version = 1 [(gogoproto.customname) = "EpVersion"]; // All  servers or clients whose version match this version
    string ep_id = 2 [(gogoproto.customname) = "EpID"]; // Specific service or client which is set of one.
    string ep_type = 3 [(gogoproto.customname) = "EpType"]; // Type of service or client
    SubnetType ep_prefix = 4 [(gogoproto.customname) = "EpPrefix"]; // All  servers or clients whose ip match this prefix 
}



message UserDefinedLogStat {

    string pattern = 1 [(gogoproto.customname) = "Pattern"]; // Perl type regular expression pattern to match
    string name = 2 [(gogoproto.customname) = "Name"]; // Name of the stat 
}



message TelemetryStateInfo {

    repeated TelemetryResourceInfo resource = 1 [(gogoproto.customname) = "Resource"]; // 
    int64 server_port = 2 [(gogoproto.customname) = "ServerPort"]; // 
    string server_ip = 3 [(gogoproto.customname) = "ServerIP"]; //  
}







message ServiceInterfaceTag {

    string interface_type = 1 [(gogoproto.customname) = "InterfaceType"]; //  
}





message AclEntriesType {

    bool dynamic = 1 [(gogoproto.customname) = "Dynamic"]; // For Internal use only
    repeated AclRuleType acl_rule = 2 [(gogoproto.customname) = "ACLRule"]; // For Internal use only 
}



message LoadbalancerListenerType {

    string default_tls_container = 1 [(gogoproto.customname) = "DefaultTLSContainer"]; // 
    string protocol = 2 [(gogoproto.customname) = "Protocol"]; // 
    int64 connection_limit = 3 [(gogoproto.customname) = "ConnectionLimit"]; // 
    bool admin_state = 4 [(gogoproto.customname) = "AdminState"]; // 
    repeated string sni_containers = 5 [(gogoproto.customname) = "SniContainers"]; // 
    int64 protocol_port = 6 [(gogoproto.customname) = "ProtocolPort"]; //  
}



message DhcpOptionsListType {

    repeated DhcpOptionType dhcp_option = 1 [(gogoproto.customname) = "DHCPOption"]; // List of DHCP options 
}







message FatFlowProtocols {

    repeated ProtocolType fat_flow_protocol = 1 [(gogoproto.customname) = "FatFlowProtocol"]; //  
}



message VirtualMachineInterfacePropertiesType {

    int64 sub_interface_vlan_tag = 1 [(gogoproto.customname) = "SubInterfaceVlanTag"]; // 802.1Q VLAN tag to be used if this interface is sub-interface for some other interface.
    int64 local_preference = 2 [(gogoproto.customname) = "LocalPreference"]; // BGP route local preference for routes representing this interface, higher value is higher preference
    InterfaceMirrorType interface_mirror = 3 [(gogoproto.customname) = "InterfaceMirror"]; // Interface Mirror configuration
    string service_interface_type = 4 [(gogoproto.customname) = "ServiceInterfaceType"]; // This interface belongs to Service Instance and is tagged as left, right or other 
}



message AddressType {

    string security_group = 1 [(gogoproto.customname) = "SecurityGroup"]; // Any address that belongs to interface with this security-group
    SubnetType subnet = 2 [(gogoproto.customname) = "Subnet"]; // Any address that belongs to this subnet
    string network_policy = 3 [(gogoproto.customname) = "NetworkPolicy"]; // Any address that belongs to virtual network which has this policy attached
    repeated SubnetType subnet_list = 4 [(gogoproto.customname) = "SubnetList"]; // Any address that belongs to any one of subnet in this list
    string virtual_network = 5 [(gogoproto.customname) = "VirtualNetwork"]; // Any address that belongs to this virtual network  
}





message FirewallServiceType {

    string protocol = 1 [(gogoproto.customname) = "Protocol"]; // Layer 4 protocol in ip packet
    PortType dst_ports = 2 [(gogoproto.customname) = "DSTPorts"]; // Range of destination port for layer 4 protocol
    PortType src_ports = 3 [(gogoproto.customname) = "SRCPorts"]; // Range of source port for layer 4 protocol
    int64 protocol_id = 4 [(gogoproto.customname) = "ProtocolID"]; // Layer 4 protocol id in ip packet 
}











message LoadbalancerPoolType {

    string status = 1 [(gogoproto.customname) = "Status"]; // Operating status for this loadbalancer pool.
    string protocol = 2 [(gogoproto.customname) = "Protocol"]; // IP protocol string like http, https or tcp.
    string subnet_id = 3 [(gogoproto.customname) = "SubnetID"]; // UUID of the subnet from where the members of the pool are reachable.
    string session_persistence = 4 [(gogoproto.customname) = "SessionPersistence"]; // Method for persistence. HTTP_COOKIE, SOURCE_IP or APP_COOKIE.
    bool admin_state = 5 [(gogoproto.customname) = "AdminState"]; // Administrative up or down
    string persistence_cookie_name = 6 [(gogoproto.customname) = "PersistenceCookieName"]; // To Be Added
    string status_description = 7 [(gogoproto.customname) = "StatusDescription"]; // Operating status description for this loadbalancer pool.
    string loadbalancer_method = 8 [(gogoproto.customname) = "LoadbalancerMethod"]; // Load balancing method ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP 
}







message PolicyBasedForwardingRuleType {

    string dst_mac = 1 [(gogoproto.customname) = "DSTMac"]; // 
    string protocol = 2 [(gogoproto.customname) = "Protocol"]; // 
    string ipv6_service_chain_address = 3 [(gogoproto.customname) = "Ipv6ServiceChainAddress"]; // 
    string direction = 4 [(gogoproto.customname) = "Direction"]; // 
    int64 mpls_label = 5 [(gogoproto.customname) = "MPLSLabel"]; // 
    int64 vlan_tag = 6 [(gogoproto.customname) = "VlanTag"]; // 
    string src_mac = 7 [(gogoproto.customname) = "SRCMac"]; // 
    string service_chain_address = 8 [(gogoproto.customname) = "ServiceChainAddress"]; //  
}



message PolicyEntriesType {

    repeated PolicyRuleType policy_rule = 1 [(gogoproto.customname) = "PolicyRule"]; // List of policy rules 
}



message BaremetalProperties {

    int64 cpu_count = 1 [(gogoproto.customname) = "CPUCount"]; // Number of CPU cores on the baremetal
    string cpu_arch = 2 [(gogoproto.customname) = "CPUArch"]; // Architecture of the baremetal server
    int64 disk_gb = 3 [(gogoproto.customname) = "DiskGB"]; // Disk size of root device (in GB)
    int64 memory_mb = 4 [(gogoproto.customname) = "MemoryMB"]; // RAM of the Baremetal server (in MB) 
}





message AllowedAddressPair {

    SubnetType ip = 1 [(gogoproto.customname) = "IP"]; // 
    string mac = 2 [(gogoproto.customname) = "Mac"]; // 
    string address_mode = 3 [(gogoproto.customname) = "AddressMode"]; // Address-mode active-backup is used for VRRP address.                           Address-mode active-active is used for ECMP. 
}



message InstanceInfo {

    string display_name = 1 [(gogoproto.customname) = "DisplayName"]; // Name of the nova instance
    string image_source = 2 [(gogoproto.customname) = "ImageSource"]; // UUID of the image for instance
    string local_gb = 3 [(gogoproto.customname) = "LocalGB"]; // 
    string memory_mb = 4 [(gogoproto.customname) = "MemoryMB"]; // 
    string nova_host_id = 5 [(gogoproto.customname) = "NovaHostID"]; // 
    string root_gb = 6 [(gogoproto.customname) = "RootGB"]; // 
    string swap_mb = 7 [(gogoproto.customname) = "SwapMB"]; // 
    string vcpus = 8 [(gogoproto.customname) = "Vcpus"]; // 
    string capabilities = 9 [(gogoproto.customname) = "Capabilities"]; //  
}



message OpenStackFlavorProperty {

    string id = 1 [(gogoproto.customname) = "ID"]; // UUID of the flavor used to boot server instance or empty
    OpenStackLink links = 2 [(gogoproto.customname) = "Links"]; // links for the flavor used to boot server instance 
}



message OpenStackImageProperty {

    string id = 1 [(gogoproto.customname) = "ID"]; // UUID of the image for server instance
    OpenStackLink links = 2 [(gogoproto.customname) = "Links"]; // links for the image for server instance 
}



message KeyValuePairs {

    repeated KeyValuePair key_value_pair = 1 [(gogoproto.customname) = "KeyValuePair"]; //  
}





message UserDefinedLogStatList {

    repeated UserDefinedLogStat statlist = 1 [(gogoproto.customname) = "Statlist"]; //  
}





message IpamType {

    string ipam_method = 1 [(gogoproto.customname) = "IpamMethod"]; // 
    string ipam_dns_method = 2 [(gogoproto.customname) = "IpamDNSMethod"]; // 
    IpamDnsAddressType ipam_dns_server = 3 [(gogoproto.customname) = "IpamDNSServer"]; // 
    DhcpOptionsListType dhcp_option_list = 4 [(gogoproto.customname) = "DHCPOptionList"]; // 
    RouteTableType host_routes = 5 [(gogoproto.customname) = "HostRoutes"]; // 
    SubnetType cidr_block = 6 [(gogoproto.customname) = "CidrBlock"]; //  
}



message QuotaType {

    int64 virtual_router = 1 [(gogoproto.customname) = "VirtualRouter"]; // Maximum number of logical routers
    int64 network_policy = 2 [(gogoproto.customname) = "NetworkPolicy"]; // Maximum number of network policies
    int64 loadbalancer_pool = 3 [(gogoproto.customname) = "LoadbalancerPool"]; // Maximum number of loadbalancer pools
    int64 route_table = 4 [(gogoproto.customname) = "RouteTable"]; // Maximum number of route tables
    int64 subnet = 5 [(gogoproto.customname) = "Subnet"]; // Maximum number of subnets
    int64 network_ipam = 6 [(gogoproto.customname) = "NetworkIpam"]; // Maximum number of network IPAMs
    int64 virtual_DNS_record = 7 [(gogoproto.customname) = "VirtualDNSRecord"]; // Maximum number of virtual DNS records
    int64 logical_router = 8 [(gogoproto.customname) = "LogicalRouter"]; // Maximum number of logical routers
    int64 security_group_rule = 9 [(gogoproto.customname) = "SecurityGroupRule"]; // Maximum number of security group rules
    int64 virtual_DNS = 10 [(gogoproto.customname) = "VirtualDNS"]; // Maximum number of virtual DNS servers
    int64 service_instance = 11 [(gogoproto.customname) = "ServiceInstance"]; // Maximum number of service instances
    int64 service_template = 12 [(gogoproto.customname) = "ServiceTemplate"]; // Maximum number of service templates
    int64 bgp_router = 13 [(gogoproto.customname) = "BGPRouter"]; // Maximum number of bgp routers
    int64 floating_ip = 14 [(gogoproto.customname) = "FloatingIP"]; // Maximum number of floating ips
    int64 floating_ip_pool = 15 [(gogoproto.customname) = "FloatingIPPool"]; // Maximum number of floating ip pools
    int64 loadbalancer_member = 16 [(gogoproto.customname) = "LoadbalancerMember"]; // Maximum number of loadbalancer member
    int64 access_control_list = 17 [(gogoproto.customname) = "AccessControlList"]; // Maximum number of access control lists
    int64 virtual_machine_interface = 18 [(gogoproto.customname) = "VirtualMachineInterface"]; // Maximum number of virtual machine interfaces
    int64 instance_ip = 19 [(gogoproto.customname) = "InstanceIP"]; // Maximum number of instance ips
    int64 global_vrouter_config = 20 [(gogoproto.customname) = "GlobalVrouterConfig"]; // Maximum number of global vrouter configs
    int64 security_logging_object = 21 [(gogoproto.customname) = "SecurityLoggingObject"]; // Maximum number of security logging objects
    int64 loadbalancer_healthmonitor = 22 [(gogoproto.customname) = "LoadbalancerHealthmonitor"]; // Maximum number of loadbalancer health monitors
    int64 virtual_ip = 23 [(gogoproto.customname) = "VirtualIP"]; // Maximum number of virtual ips
    int64 defaults = 24 [(gogoproto.customname) = "Defaults"]; // Need to clarify
    int64 security_group = 25 [(gogoproto.customname) = "SecurityGroup"]; // Maximum number of security groups
    int64 virtual_network = 26 [(gogoproto.customname) = "VirtualNetwork"]; // Maximum number of virtual networks 
}





message VrfAssignTableType {

    repeated VrfAssignRuleType vrf_assign_rule = 1 [(gogoproto.customname) = "VRFAssignRule"]; //  
}





