package vncapi

import (
	"encoding/json"

	"github.com/Juniper/contrail/pkg/common"
)

//VncProjectListResponse represents a project list response.
type VncProjectListResponse struct {
	Projects []*VncProject `json:"projects"`
}

//VncProject represents a vnc config project object.
type VncProject struct {
	Project *ConfigProject `json:"project"`
}

//Project represents project object.
type ConfigProject struct {
	UUID string `json:"uuid,omitempty"`
	Name string `json:"name,omitempty"`
}

// VncApiClient represents a client.
type VncApiClient struct {
	common.HTTP
}

// NewVncApiClient makes vncapi client.
func NewVncApiClient() *VncApiClient {
	c := &VncApiClient{
		httpClient: &common.HTTP{},
	}
	return c
}

// Initialize is used to initialize a vncapi client.
func (v *VncApiClient) Initialize(configURL) {
	v.Endpoint = ConfigURL
	v.Init()
}

// ListProjects reads all the projects from vnc config
func (v *VncApiClient) ListProjects() (string, *VncProjectListResponse) {
	projectURI := fmt.Sprintf("%s/projects?detail=True", v.configURL)
	resp, err := v.Read(context.Background(), projectURI, nil)
	if err != nil {
		fmt.Printf("Error : %s", err)
	}
	defer resp.Body.Close() // nolint: errcheck
	vncProjectsResponse := &VncProjectListResponse{}
	_ = json.NewDecoder(resp.Body).Decode(vncProjectsResponse)

	return resp.StatusCode, vncProjectsResponse
}

// FQNameToID gets the FQName for given UUID from vnc config
func (v *VncApiClient) FQNameToID(resourceType string, FQName []string) (status, ID string) {
	FQNameToIDURI := fmt.Sprintf("%s/fqname-to-id", v.configURL)
	data := map[string]interface{}{
		"type":    resourceType,
		"fq_name": FQName}
	output := map[string]string{}
	resp, err := v.do(context.Background(), FQNameToIDURI, &data, &output)
	defer resp.Body.Close() // nolint: errcheck
	if err != nil {
		fmt.Printf("Error : %s", err)
	}
	return resp.StatusCode, output["uuid"]
}

// IDToFQName gets the UUID for given FQName from vnc config
func (v *VncApiClient) FQNameToID(resourceType, ID string) (status, FQName string) {
	IDToFQNameURI := fmt.Sprintf("%s/id-to-fqname", v.configURL)
	data := map[string]interface{}{
		"type": resourceType,
		"uuid": ID}
	output := map[string][]string{}
	resp, err := v.do(context.Background(), IDToFQNameURI, &data, &output)
	defer resp.Body.Close() // nolint: errcheck
	if err != nil {
		fmt.Printf("Error : %s", err)
	}
	return resp.StatusCode, output["fq_name"]
}
