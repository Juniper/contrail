name: Base poperties tests for objects which contain Config Root as parent
cleanup:
- path: /domain/domain-test
- path: /policy-management/policy-management-test
- path: /policy-management/policy-management-test2
- path: /policy-management/policy-management-test4
- path: /policy-management/policy-management-test5
- path: /project/project-test

# Objects that may have Config Root as parent are allowed to be created
# without passing parentUUID or parentType while other objects are not.

clients:
  default:
    id: alice
    password: alice_password
    domain: default
    insecure: true
    scope:
      project:
        name: admin

workflow:
# Test for object with multiple parents including ConfigRoot
- name: create policy_management without passing parentType or UUID.
  request:
    path: /policy-managements
    method: POST
    expected: [200]
    data:
      policy-management:
        uuid: policy-management-test
        name: pol-man-test
  expect:
    policy-management:
        uuid: policy-management-test
        name: pol-man-test
        fq_name:
          - pol-man-test

- name: create policy_management without passing parentType or UUID but with fqname.
  request:
    path: /policy-managements
    method: POST
    expected: [200]
    data:
      policy-management:
        uuid: policy-management-test2
        name: pol-man-test
        fq_name:
          - test-test
  expect:
    policy-management:
        uuid: policy-management-test2
        name: pol-man-test
        fq_name:
          - test-test

- name: delete policy management
  request:
    path: /policy-management/policy-management-test
    method: DELETE
    expected: [200]
  expect: null

- name: delete policy management
  request:
    path: /policy-management/policy-management-test2
    method: DELETE
    expected: [200]
  expect: null

# Test for object with ConfigRoot as the only parent
- name: create domain without passing parentType or UUID
  request:
    path: /domains
    method: POST
    expected: [200]
    data:
      domain:
        uuid: domain-test
        name: dom-test
  expect:
    domain:
      uuid: domain-test
      name: dom-test

- name: delete domain
  request:
    path: /domain/domain-test
    method: DELETE
    expected: [200]
  expect: null

# Test for object with multiple parents without ConfigRoot
- name: create access_control_list without passing parentType or UUID
  request:
    path: /access-control-lists
    method: POST
    expected: [400]
    data:
      access_control_list:
        uuid: access-control-list-test
        name: acl-test
  expect: null

# Test for object with multiple parents including ConfigRoot but with diff parent
- name: create policy_management with parentType Project
  request:
    path: /policy-managements
    method: POST
    expected: [400]
    data:
      policy-management:
        uuid: policy-management-test3
        parent_type: project
        name: pol-man-test
  expect: null

# Test for object with multiple parents including ConfigRoot with specified ConfigRoot as parent
- name: create policy_management with parentType ConfigRoot
  request:
    path: /policy-managements
    method: POST
    expected: [200]
    data:
      policy-management:
        uuid: policy-management-test4
        parent_type: config-root
        name: pol-man-test
  expect:
    policy-management:
      uuid: policy-management-test4
      name: pol-man-test
      fq_name:
        - pol-man-test

- name: delete policy management
  request:
    path: /policy-management/policy-management-test4
    method: DELETE
    expected: [200]
  expect: null

# Test if fq name is not just a name when parent is Project
- name: create project
  request:
    path: /projects
    method: POST
    expected: [200]
    data:
      project:
        uuid: project-test
        name: project-test-name
        parent_uuid: beefbeef-beef-beef-beef-beefbeef0002
        parent_type: domain
        quota: {}
  expect:
    project:
        uuid: project-test
        name: project-test-name
        parent_uuid: beefbeef-beef-beef-beef-beefbeef0002
        parent_type: domain

- name: create policy_management with parentType Project (existing and with uuid)
  request:
    path: /policy-managements
    method: POST
    expected: [200]
    data:
      policy-management:
        uuid: policy-management-test5
        parent_uuid: project-test
        name: pol-man-test
  expect:
    policy-management:
      uuid: policy-management-test5
      parent_uuid: project-test
      name: pol-man-test
      fq_name:
        - default-domain
        - project-test-name
        - pol-man-test

- name: delete policy management
  request:
    path: /policy-management/policy-management-test5
    method: DELETE
    expected: [200]
  expect: null

- name: delete project
  request:
    path: /project/project-test
    method: DELETE
    expected: [200]
  expect: null
