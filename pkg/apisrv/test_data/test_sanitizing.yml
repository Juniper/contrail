name: Sanitizer Service Test
description: integration test of sanitizer service
cleanup:
- path: /virtual-network/vn_sanitize_blue
- path: /network-ipam/test_ipam_sanitize_blue
- path: /instance-ip/test_sanitize_iip
- path: /instance-ip/test_sanitize_iip_2
test_data:

  admin_project: &admin_project_sanitize
    uuid: admin_sanitize_project_uuid
    name: admin_sanitize_project
    parent_type: domain
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0002
    quota: {}

  network_ipam: &network_ipam_blue
    network_ipam_mgmt:
      host_routes:
        route:
          - prefix: "test_prefix"
            next_hop: "1.2.3.5"
    uuid: test_ipam_sanitize_blue
    display_name: test_ipam_sanitize_blue
    parent_type: project
    parent_uuid: admin_sanitize_project_uuid
    fq_name: ["domain","admin","test_ipam_sanitize_blue"]

  vn_sanitize: &vn_sanitize_blue
    fq_name: ["default", "admin_sanitize", "vn_sanitize_blue"]
    uuid: vn_sanitize_blue
    parent_type: project
    parent_uuid: admin_sanitize_project_uuid
    route_target_list:
      route_target: ["100:200"]
    network_ipam_refs:
      - uuid: test_ipam_sanitize_blue
        attr:
          ipam_subnets:
            - subnet_uuid: "054ca01e-cef3-444e-b4d5-4ac16554ac3d"
              subnet:
                ip_prefix: "10.0.0.0"
                ip_prefix_len: 24
            - subnet_uuid: "e76ab7ff-c47d-4faf-aec4-80dcc3658f0b"
              subnet:
                ip_prefix: "20.0.0.0"
                ip_prefix_len: 24

clients:
  default:
    id: alice
    password: alice_password
    domain: default
    insecure: true
    scope:
      project:
        name: admin

workflow:
- name: create project
  request:
    path: /projects
    method: POST
    expected:
    - 200
    data:
      project: *admin_project_sanitize
  expect:
    project: *admin_project_sanitize

- name: create network ipam
  request:
    path: /network-ipams
    method: POST
    expected:
    - 200
    data:
      network-ipam: *network_ipam_blue
  expect:
    network-ipam: *network_ipam_blue

- name: create virtual network
  request:
    path: /virtual-networks
    method: POST
    expected:
    - 200
    data:
      virtual-network: *vn_sanitize_blue
  expect:
    virtual-network: *vn_sanitize_blue

- name: create instance ip with refs with 'uuid' and 'to'
  request:
    path: /instance-ips
    method: POST
    expected:
    - 200
    data:
      instance-ip:
        fq_name: ["test_sanitize_iip"]
        uuid: "test_sanitize_iip"
        name: "test_sanitize_iip"
        subnet_uuid: "e76ab7ff-c47d-4faf-aec4-80dcc3658f0b"
        instance_ip_address: "10.0.0.1"
        network_ipam_refs:
        - to: ["domain","admin","test_ipam_sanitize_blue"]
        virtual_network_refs:
        - uuid: vn_sanitize_blue
  expect:
    instance-ip:
      fq_name: ["test_sanitize_iip"]
      uuid: "test_sanitize_iip"
      display_name: "test_sanitize_iip"
      network_ipam_refs:
      - uuid: test_ipam_sanitize_blue
        to: ["domain","admin","test_ipam_sanitize_blue"]
      virtual_network_refs:
      - uuid: vn_sanitize_blue

- name: try to create instance ip with ref with non existing 'to'
  request:
    path: /instance-ips
    method: POST
    expected:
    - 400
    data:
      instance-ip:
        fq_name: ["test_sanitize_iip_2"]
        uuid: "test_sanitize_iip_2"
        subnet_uuid: "e76ab7ff-c47d-4faf-aec4-80dcc3658f0b"
        instance_ip_address: "10.0.0.2"
        network_ipam_refs:
        - to: ["domain","admin","test_non_existing_ipam"]
        virtual_network_refs:
        - uuid: vn_sanitize_blue

- name: try to create instance ip with ref with invalid 'uuid' and valid 'to'
  request:
    path: /instance-ips
    method: POST
    expected:
    - 409
    data:
      instance-ip:
        fq_name: ["test_sanitize_iip_2"]
        uuid: "test_sanitize_iip_2"
        subnet_uuid: "e76ab7ff-c47d-4faf-aec4-80dcc3658f0b"
        instance_ip_address: "10.0.0.2"
        network_ipam_refs:
        - uuid: test_non_existing_ipam
          to: ["domain","admin","test_ipam_sanitize_blue"]
        virtual_network_refs:
        - uuid: vn_sanitize_blue

- name: create instance ip with ref with correct 'uuid' and invalid 'to'
  request:
    path: /instance-ips
    method: POST
    expected:
    - 200
    data:
      instance-ip:
        fq_name: ["test_sanitize_iip_2"]
        uuid: "test_sanitize_iip_2"
        subnet_uuid: "e76ab7ff-c47d-4faf-aec4-80dcc3658f0b"
        instance_ip_address: "10.0.0.2"
        network_ipam_refs:
        - uuid: test_ipam_sanitize_blue
          to: ["domain","admin","test_non_existing_ipam"]
        virtual_network_refs:
        - uuid: vn_sanitize_blue
  expect:
    instance-ip:
      network_ipam_refs:
      - uuid: test_ipam_sanitize_blue
      virtual_network_refs:
      - uuid: vn_sanitize_blue

- name: delete instance ip
  request:
    path: /instance-ip/test_sanitize_iip_2
    method: DELETE
    expected:
    - 200
  expect: null

- name: delete instance ip
  request:
    path: /instance-ip/test_sanitize_iip
    method: DELETE
    expected:
    - 200
  expect: null

- name: delete virtual network
  request:
    path: /virtual-network/vn_sanitize_blue
    method: DELETE
    expected:
    - 200
  expect: null

- name: delete network ipam
  request:
    path: /network-ipam/test_ipam_sanitize_blue
    method: DELETE
    expected:
    - 200
  expect: null