name: Firewall Rule Test
description:  basic firewall rule test
cleanup:
- path: /firewall-rule/test_firewall_rule_blue_uuid
- path: /firewall-rule/test_firewall_rule_red_uuid
- path: /tag/test_tag_blue_uuid
- path: /tag-type/tag_type_uuid
- path: /service-group/test_service_group_uuid

test_data:
  tag_type: &tag_type
    uuid: tag_type_uuid
    display_name: namespace
    fq_name:
      - namespace

  service_group: &test_service_group
    uuid: test_service_group_uuid
    parent_type: policy-management
    fq_name:
      - default-policy-management
      - test_service_group_uuid

  tag: &test_tag_blue
    uuid: test_tag_blue_uuid
    fq_name:
      - namespace=kube-system
    tag_type_name: namespace
    tag_value: kube-system

  firewall_rule_blue: &test_firewall_rule_blue
    uuid: test_firewall_rule_blue_uuid
    parent_type: policy-management
    fq_name:
      - default-policy-management
      - test_firewall_rule_blue_uuid
    endpoint_1:
      any: true
    endpoint_2:
      tags:
        - "namespace=kube-system"
    match_tags:
      tag_list:
        - application
    service:
      protocol: tcp

  firewall_rule_red: &test_firewall_rule_red
    uuid: test_firewall_rule_red_uuid
    parent_type: policy-management
    fq_name:
      - default-policy-management
      - test_firewall_rule_red_uuid
    endpoint_1:
      any: true
    endpoint_2:
      any: true
    match_tags:
      tag_list:
        - application
    service_group_refs:
      - uuid: test_service_group_uuid

clients:
  default:
    id: alice
    password: alice_password
    insecure: true
    scope:
      project:
        name: admin

workflow:
- name: create tag type
  request:
    path: /tag-types
    method: POST
    expected: [200]
    data:
      tag-type: *tag_type
  expect:
    tag-type:
      display_name: namespace
      fq_name:
      - namespace
      tag_type_id: "0x00ff"
      uuid: tag_type_uuid

- name: create tag blue
  request:
    path: /tags
    method: POST
    expected: [200]
    data:
      tag: *test_tag_blue
  expect:
    tag: *test_tag_blue

- name: create test service group
  request:
    path: /service-groups
    method: POST
    expected: [200]
    data:
      service-group: *test_service_group
  expect:
    service-group: *test_service_group

- name: try to create firewall rule with non existing tag reference
  request:
    path: /firewall-rules
    method: POST
    expected: [404]
    data:
      firewall-rule:
        <<: *test_firewall_rule_blue
        endpoint_1:
          any: false
          tags:
            - "namespace=default"

- name: try to create firewall rule red with non existing service group ref
  request:
    path: /firewall-rules
    method: POST
    expected: [404]
    data:
      firewall-rule:
        <<: *test_firewall_rule_red
        service_group_refs:
          - uuid: service_group_uuid

- name: create firewall rule red
  request:
    path: /firewall-rules
    method: POST
    expected: [200]
    data:
      firewall-rule: *test_firewall_rule_red
  expect:
    firewall-rule:
      <<: *test_firewall_rule_red
      service_group_refs:
        - uuid: test_service_group_uuid
          to: [default-policy-management, test_service_group_uuid]

- name: create firewall rule blue
  request:
    path: /firewall-rules
    method: POST
    expected: [200]
    data:
      firewall-rule:
        <<: *test_firewall_rule_blue
  expect:
    firewall-rule:
      <<: *test_firewall_rule_blue
      service:
        protocol_id: 6
      endpoint_2:
        tag_ids:
        - 0x00ff0002
      tag_refs:
        - uuid: test_tag_blue_uuid
          to: [namespace=kube-system]
  watchers:
    /contrail/firewall_rule/test_firewall_rule_blue_uuid:
      - data:
          <<: *test_firewall_rule_blue
          service:
            protocol_id: 6
          endpoint_2:
            tag_ids:
            - 0x00ff0002
          tag_refs:
            - uuid: test_tag_blue_uuid

- name: try to update firewall rule
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: PUT
    expected: [400]
    data:
      firewall-rule:
        uuid: test_firewall_rule_blue_uuid
        endpoint_1:
          tags:
            - "namespace=kube-system"
          any: true

- name: update firewall rule endpoints
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: PUT
    expected: [200]
    data:
      firewall-rule:
        uuid: test_firewall_rule_blue_uuid
        endpoint_1:
          tags:
            - "namespace=kube-system"
          any: false
        endpoint_2:
          any: true
          tags: []
          tag_ids: []
  expect:
    firewall-rule:
      uuid: test_firewall_rule_blue_uuid
      endpoint_1:
        tags:
          - "namespace=kube-system"
        tag_ids:
        - 0x00ff0002
      endpoint_2:
        any: true
        tags: $null
        tag_ids: $null
  watchers:
    /contrail/firewall_rule/test_firewall_rule_blue_uuid:
      - data:
          <<: *test_firewall_rule_blue
          endpoint_1:
            tags:
              - "namespace=kube-system"
            tag_ids:
            - 0x00ff0002
          endpoint_2:
            any: true
          tag_refs:
            - uuid: test_tag_blue_uuid

- name: get updated firewall rule
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: GET
    expected: [200]
  expect:
    firewall-rule:
      uuid: test_firewall_rule_blue_uuid
      endpoint_1:
        tags:
          - "namespace=kube-system"
        tag_ids:
          - 0x00ff0002

- name: update firewall rule with subnet
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: PUT
    expected: [200]
    data:
      firewall-rule:
        uuid: test_firewall_rule_blue_uuid
        endpoint_1:
          any: false
          subnet:
            ip_prefix: "10.0.0.0"
            ip_prefix_len: 24
        endpoint_2:
          any: false
  expect:
    firewall-rule:
      uuid: test_firewall_rule_blue_uuid
      endpoint_1:
        subnet:
          ip_prefix: "10.0.0.0"
          ip_prefix_len: 24
  watchers:
    /contrail/firewall_rule/test_firewall_rule_blue_uuid:
      - data:
          uuid: test_firewall_rule_blue_uuid
          tag_refs: $null
          endpoint_1:
            subnet:
              ip_prefix: "10.0.0.0"
              ip_prefix_len: 24

- name: update firewall rule service group refs
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: PUT
    expected: [200]
    data:
      firewall-rule:
        service: null
        service_group_refs:
          - uuid: test_service_group_uuid
  expect:
    firewall-rule:
        service: null
        service_group_refs:
          - uuid: test_service_group_uuid

- name: get updated firewall rule
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: GET
    expected: [200]
  expect:
    firewall-rule:
      uuid: test_firewall_rule_blue_uuid
      service:
        protocol_id: 0
      service_group_refs:
        - uuid: test_service_group_uuid
          to: [default-policy-management, test_service_group_uuid]

- name: delete firewall rule blue
  request:
    path: /firewall-rule/test_firewall_rule_blue_uuid
    method: DELETE
    expected: [200]
  expect: null

- name: delete firewall rule red
  request:
    path: /firewall-rule/test_firewall_rule_red_uuid
    method: DELETE
    expected: [200]
  expect: null

- name: delete test service group
  request:
    path: /service-group/test_service_group_uuid
    method: DELETE
    expected: [200]
  expect: null

- name: delete tag blue
  request:
    path: /tag/test_tag_blue_uuid
    method: DELETE
    expected: [200]
  expect: null
