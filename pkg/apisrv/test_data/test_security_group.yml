name: Security Group Test
description: security group test
cleanup:
- path: /security-group/security-group-with-security-group-rule
- path: /security-group/security-group-with-ipv6-rule
- path: /security-group/security-group-with-ipv4-rule
test_data:
  security_group_base: &security_group_base
    fq_name:
    - default-domain
    - default-project
    - security-group
    parent_type: project

  rule_base: &rule_base
    direction: ">"
    protocol: any
    dst_ports:
    - start_port: 0
      end_port: 65535
    src_addresses:
    - security_group: local
    src_ports:
    - start_port: 0
      end_port: 65535

  rule_ipv4: &rule_ipv4
    <<: *rule_base
    dst_addresses:
    - subnet:
        ip_prefix: 0.0.0.0
        ip_prefix_len: 0
    ethertype: IPv4

  rule_ipv6: &rule_ipv6
    <<: *rule_base
    dst_addresses:
    - subnet:
        ip_prefix: "::"
        ip_prefix_len: 0
    ethertype: IPv6

  rule_security_group: &rule_security_group
    <<: *rule_base
    dst_addresses:
      - security_group: default-domain:default-project:sg-with-ipv4-rule
    ethertype: IPv4

  rule_with_invalid_ethertype: &rule_with_invalid_ethertype
    <<: *rule_base
    dst_addresses:
    - subnet:
        ip_prefix: "::"
        ip_prefix_len: 0
    ethertype: IPv4

  security_group_with_id: &security_group_with_id
    <<: *security_group_base
    security_group_entries:
      policy_rule:
        - <<: *rule_ipv4
    security_group_id: 1

  security_group_with_same_rules: &security_group_with_same_rules
    <<: *security_group_base
    security_group_entries:
      policy_rule:
      - <<: *rule_ipv4
      - <<: *rule_ipv4

  security_group_with_no_local: &security_group_with_no_local
    <<: *security_group_base
    security_group_entries:
      policy_rule:
      - <<: *rule_ipv4
        src_addresses:
        - subnet:
            ip_prefix: 1.0.0.0
            ip_prefix_len: 0

  security_group_with_non_matching_ethertype: &security_group_with_non_matching_ethertype
    <<: *security_group_base
    security_group_entries:
      policy_rule:
      - <<: *rule_with_invalid_ethertype

  security_group_with_ipv4_rule: &security_group_with_ipv4_rule
    <<: *security_group_base
    uuid: security-group-with-ipv4-rule
    security_group_entries:
      policy_rule:
      - <<: *rule_ipv4

  security_group_with_ipv6_rule: &security_group_with_ipv6_rule
    uuid: security-group-with-ipv6-rule
    security_group_entries:
      policy_rule:
      - <<: *rule_ipv6
    fq_name:
    - default-domain
    - default-project
    - sg-with-ipv6-rule
    parent_type: project

  security_group_with_security_group_rule: &security_group_with_security_group_rule
    uuid: security-group-with-security-group-rule
    security_group_entries:
      policy_rule:
      - <<: *rule_security_group
    fq_name:
    - default-domain
    - default-project
    - sg-with-sg-rule
    parent_type: project

clients:
  default:
    id: alice
    password: alice_password
    insecure: true
    scope:
      project:
        name: admin

workflow:
- name: try to create security group with explicit ID
  request:
    path: /security-groups
    method: POST
    expected:
    - 403
    data:
      security-group: *security_group_with_id
  expect: null
- name: try to create security group with the same rules
  request:
    path: /security-groups
    method: POST
    expected:
    - 409
    data:
      security-group: *security_group_with_same_rules
  expect: null
- name: try to create security group with no local in rules
  request:
    path: /security-groups
    method: POST
    expected:
    - 400
    data:
      security-group: *security_group_with_no_local
  expect: null
- name: try to create security group with non mathing ethertype
  request:
    path: /security-groups
    method: POST
    expected:
    - 400
    data:
      security-group: *security_group_with_non_matching_ethertype
  expect: null
- name: create security group with rule IPv4
  request:
    path: /security-groups
    method: POST
    expected:
    - 200
    data:
      security-group: *security_group_with_ipv4_rule
  expect:
    security-group: *security_group_with_ipv4_rule
- name: create security group with rule IPv6 and check if rule uuid is filled
  request:
    path: /security-groups
    method: POST
    expected:
    - 200
    data:
      security-group: *security_group_with_ipv6_rule
  expect:
    security-group:
      <<: *security_group_with_ipv6_rule
      security_group_entries:
        policy_rule:
        - <<: *rule_ipv6
          rule_uuid: $uuid
- name: create security group with security group rule
  request:
    path: /security-groups
    method: POST
    expected:
    - 200
    data:
      security-group: *security_group_with_security_group_rule
  expect:
    security-group: *security_group_with_security_group_rule
- name: delete security group with security group rule
  request:
    path: /security-group/security-group-with-security-group-rule
    method: DELETE
    expected:
    - 200
  expect: null
- name: delete security group with rule IPv6
  request:
    path: /security-group/security-group-with-ipv6-rule
    method: DELETE
    expected:
    - 200
  expect: null
- name: delete security group with rule IPv4
  request:
    path: /security-group/security-group-with-ipv4-rule
    method: DELETE
    expected:
    - 200
  expect: null