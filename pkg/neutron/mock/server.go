// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/neutron/server.go

// Package neutronmock is a generated GoMock package.
package neutronmock

import (
	context "context"
	services "github.com/Juniper/contrail/pkg/services"
	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	reflect "reflect"
)

// MockuserAgentKVServer is a mock of userAgentKVServer interface
type MockuserAgentKVServer struct {
	ctrl     *gomock.Controller
	recorder *MockuserAgentKVServerMockRecorder
}

// MockuserAgentKVServerMockRecorder is the mock recorder for MockuserAgentKVServer
type MockuserAgentKVServerMockRecorder struct {
	mock *MockuserAgentKVServer
}

// NewMockuserAgentKVServer creates a new mock instance
func NewMockuserAgentKVServer(ctrl *gomock.Controller) *MockuserAgentKVServer {
	mock := &MockuserAgentKVServer{ctrl: ctrl}
	mock.recorder = &MockuserAgentKVServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserAgentKVServer) EXPECT() *MockuserAgentKVServerMockRecorder {
	return m.recorder
}

// StoreKeyValue mocks base method
func (m *MockuserAgentKVServer) StoreKeyValue(arg0 context.Context, arg1 *services.StoreKeyValueRequest) (*types.Empty, error) {
	ret := m.ctrl.Call(m, "StoreKeyValue", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreKeyValue indicates an expected call of StoreKeyValue
func (mr *MockuserAgentKVServerMockRecorder) StoreKeyValue(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKeyValue", reflect.TypeOf((*MockuserAgentKVServer)(nil).StoreKeyValue), arg0, arg1)
}

// RetrieveValues mocks base method
func (m *MockuserAgentKVServer) RetrieveValues(arg0 context.Context, arg1 *services.RetrieveValuesRequest) (*services.RetrieveValuesResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveValues", arg0, arg1)
	ret0, _ := ret[0].(*services.RetrieveValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveValues indicates an expected call of RetrieveValues
func (mr *MockuserAgentKVServerMockRecorder) RetrieveValues(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveValues", reflect.TypeOf((*MockuserAgentKVServer)(nil).RetrieveValues), arg0, arg1)
}

// RetrieveKVPs mocks base method
func (m *MockuserAgentKVServer) RetrieveKVPs(arg0 context.Context, arg1 *types.Empty) (*services.RetrieveKVPsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveKVPs", arg0, arg1)
	ret0, _ := ret[0].(*services.RetrieveKVPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKVPs indicates an expected call of RetrieveKVPs
func (mr *MockuserAgentKVServerMockRecorder) RetrieveKVPs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKVPs", reflect.TypeOf((*MockuserAgentKVServer)(nil).RetrieveKVPs), arg0, arg1)
}

// DeleteKey mocks base method
func (m *MockuserAgentKVServer) DeleteKey(arg0 context.Context, arg1 *services.DeleteKeyRequest) (*types.Empty, error) {
	ret := m.ctrl.Call(m, "DeleteKey", arg0, arg1)
	ret0, _ := ret[0].(*types.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey
func (mr *MockuserAgentKVServerMockRecorder) DeleteKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockuserAgentKVServer)(nil).DeleteKey), arg0, arg1)
}

// MockrouteRegistry is a mock of routeRegistry interface
type MockrouteRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockrouteRegistryMockRecorder
}

// MockrouteRegistryMockRecorder is the mock recorder for MockrouteRegistry
type MockrouteRegistryMockRecorder struct {
	mock *MockrouteRegistry
}

// NewMockrouteRegistry creates a new mock instance
func NewMockrouteRegistry(ctrl *gomock.Controller) *MockrouteRegistry {
	mock := &MockrouteRegistry{ctrl: ctrl}
	mock.recorder = &MockrouteRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrouteRegistry) EXPECT() *MockrouteRegistryMockRecorder {
	return m.recorder
}

// POST mocks base method
func (m_2 *MockrouteRegistry) POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route {
	varargs := []interface{}{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "POST", varargs...)
	ret0, _ := ret[0].(*echo.Route)
	return ret0
}

// POST indicates an expected call of POST
func (mr *MockrouteRegistryMockRecorder) POST(path, h interface{}, m ...interface{}) *gomock.Call {
	varargs := append([]interface{}{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockrouteRegistry)(nil).POST), varargs...)
}
