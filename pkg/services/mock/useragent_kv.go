// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/useragent_kv.go

// Package servicesmock is a generated GoMock package.
package servicesmock

import (
	context "context"
	services "github.com/Juniper/asf/pkg/services"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserAgentKVService is a mock of UserAgentKVService interface
type MockUserAgentKVService struct {
	ctrl     *gomock.Controller
	recorder *MockUserAgentKVServiceMockRecorder
}

// MockUserAgentKVServiceMockRecorder is the mock recorder for MockUserAgentKVService
type MockUserAgentKVServiceMockRecorder struct {
	mock *MockUserAgentKVService
}

// NewMockUserAgentKVService creates a new mock instance
func NewMockUserAgentKVService(ctrl *gomock.Controller) *MockUserAgentKVService {
	mock := &MockUserAgentKVService{ctrl: ctrl}
	mock.recorder = &MockUserAgentKVServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserAgentKVService) EXPECT() *MockUserAgentKVServiceMockRecorder {
	return m.recorder
}

// StoreKeyValue mocks base method
func (m *MockUserAgentKVService) StoreKeyValue(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKeyValue", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreKeyValue indicates an expected call of StoreKeyValue
func (mr *MockUserAgentKVServiceMockRecorder) StoreKeyValue(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKeyValue", reflect.TypeOf((*MockUserAgentKVService)(nil).StoreKeyValue), ctx, key, value)
}

// RetrieveValues mocks base method
func (m *MockUserAgentKVService) RetrieveValues(ctx context.Context, keys []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveValues", ctx, keys)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveValues indicates an expected call of RetrieveValues
func (mr *MockUserAgentKVServiceMockRecorder) RetrieveValues(ctx, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveValues", reflect.TypeOf((*MockUserAgentKVService)(nil).RetrieveValues), ctx, keys)
}

// DeleteKey mocks base method
func (m *MockUserAgentKVService) DeleteKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey
func (mr *MockUserAgentKVServiceMockRecorder) DeleteKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockUserAgentKVService)(nil).DeleteKey), ctx, key)
}

// RetrieveKVPs mocks base method
func (m *MockUserAgentKVService) RetrieveKVPs(ctx context.Context) ([]*services.KeyValuePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveKVPs", ctx)
	ret0, _ := ret[0].([]*services.KeyValuePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKVPs indicates an expected call of RetrieveKVPs
func (mr *MockUserAgentKVServiceMockRecorder) RetrieveKVPs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKVPs", reflect.TypeOf((*MockUserAgentKVService)(nil).RetrieveKVPs), ctx)
}
