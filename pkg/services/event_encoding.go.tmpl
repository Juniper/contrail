package services

import (
	"encoding/json"

	"github.com/pkg/errors"
	"github.com/gogo/protobuf/types"

	"github.com/Juniper/contrail/pkg/models/basemodels"
	"github.com/Juniper/contrail/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

// GetResource returns resource.
func (e *Event_Create{{ schema.JSONSchema.GoName }}Request) GetResource() basemodels.Object {
	return e.Create{{ schema.JSONSchema.GoName }}Request.Get{{ schema.JSONSchema.GoName }}()
}

// GetResource returns resource.
func (e *Event_Update{{ schema.JSONSchema.GoName }}Request) GetResource() basemodels.Object {
	return e.Update{{ schema.JSONSchema.GoName }}Request.Get{{ schema.JSONSchema.GoName }}()
}

// GetResource returns resource.
func (e *Event_Delete{{ schema.JSONSchema.GoName }}Request) GetResource() basemodels.Object {
	return &models.{{ schema.JSONSchema.GoName }}{
		UUID: e.Delete{{ schema.JSONSchema.GoName }}Request.ID,
	}
}

// Operation returns event type.
func (e *Event_Create{{ schema.JSONSchema.GoName }}Request) Operation() string {
	return OperationCreate
}

// Operation returns event type.
func (e *Event_Update{{ schema.JSONSchema.GoName }}Request) Operation() string {
	return OperationUpdate
}

// Operation returns event type.
func (e *Event_Delete{{ schema.JSONSchema.GoName }}Request) Operation() string {
	return OperationDelete
}

// SetFieldMask sets fieldMask of the event.
func (e *Event_Create{{ schema.JSONSchema.GoName }}Request) SetFieldMask(mask types.FieldMask) {
	e.Create{{ schema.JSONSchema.GoName }}Request.FieldMask = mask
}

// SetFieldMask sets fieldMask of the event.
func (e *Event_Update{{ schema.JSONSchema.GoName }}Request) SetFieldMask(mask types.FieldMask) {
	e.Update{{ schema.JSONSchema.GoName }}Request.FieldMask = mask
}

// SetID sets id of the event.
func (e *Event_Delete{{ schema.JSONSchema.GoName }}Request) SetID(id string) {
	e.Delete{{ schema.JSONSchema.GoName }}Request.ID = id
}

{% for _, reference in schema.References %}
{% set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}

func (e *Event_Create{{ refType }}Request) GetID() string {
	return e.Create{{refType}}Request.GetID()
}

func (e *Event_Delete{{ refType }}Request) GetID() string {
	return e.Delete{{refType}}Request.GetID()
}

func (e *Event_Create{{ refType }}Request) GetReference() Reference {
	return e.Create{{refType}}Request.Get{{ refType }}()
}

func (e *Event_Delete{{ refType }}Request) GetReference() Reference {
	return e.Delete{{refType}}Request.Get{{ refType }}()
}

func (e *Event_Create{{ refType }}Request) Operation() string {
	return OperationCreate
}

func (e *Event_Delete{{ refType }}Request) Operation() string {
	return OperationDelete
}

{% endfor %}
{% endif%}{% endfor %}

// NewEmptyCreateEventRequest makes new Create Event Request.
func NewEmptyCreateEventRequest(kind string) (CreateEventRequest, error) {
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
		case "{{ schema.TypeName }}":
		return &Event_Create{{ schema.JSONSchema.GoName }}Request{
			Create{{ schema.JSONSchema.GoName }}Request: &Create{{ schema.JSONSchema.GoName }}Request{
				{{ schema.JSONSchema.GoName }}: &models.{{ schema.JSONSchema.GoName }}{},
			},
		}, nil
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("create event of kind \"%s\" does not exist", kind)
}

// NewEmptyUpdateEventRequest makes new Update Event Request.
func NewEmptyUpdateEventRequest(kind string) (UpdateEventRequest, error) {
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
		case "{{ schema.TypeName }}":
		return &Event_Update{{ schema.JSONSchema.GoName }}Request{
			Update{{ schema.JSONSchema.GoName }}Request: &Update{{ schema.JSONSchema.GoName }}Request{
				{{ schema.JSONSchema.GoName }}: &models.{{ schema.JSONSchema.GoName }}{},
			},
		}, nil
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("update event of kind \"%s\" does not exist", kind)
}

// NewEmptyDeleteEventRequest makes new Delete Event Request.
func NewEmptyDeleteEventRequest(kind string) (DeleteEventRequest, error) {
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
		case "{{ schema.TypeName }}":
		return &Event_Delete{{ schema.JSONSchema.GoName }}Request{
			Delete{{ schema.JSONSchema.GoName }}Request: &Delete{{ schema.JSONSchema.GoName }}Request{},
		}, nil
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("delete event of kind \"%s\" does not exist", kind)
}

// NewRefUpdateEvent creates ref create or delete event for updating ref.
func NewRefUpdateEvent(option RefUpdateOption) (*Event, error) {
	e := &Event{}
	kind := option.ReferenceType
	operation := option.Operation
	if operation == "" {
		operation = RefOperationAdd
	}
	switch (kind) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
{% for _, reference in schema.References %}
{% set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}
		case "{{ schema.TypeName }}-{{ reference.LinkTo.TypeName }}":
			switch (operation) {
				case RefOperationAdd:
					request := &Event_Create{{ refType }}Request{
						Create{{ refType }}Request: &Create{{ refType }}Request{
								ID: option.FromUUID,
								{{ refType }}: &models.{{ refType }}{
									UUID: option.ToUUID,
								},
							},
					}
					{% if reference.RefType %}
					switch {
					case len(option.AttrData) > 0:
						err := json.Unmarshal(option.AttrData, &request.Create{{ refType }}Request.{{ refType }}.Attr)
						if err != nil {
							return nil, errors.Wrap(err, "bad attr data")
						}
					case option.Attr != nil:
						attr, ok := option.Attr.(*models.{{ reference.RefType }})
						if !ok {
							return nil, errors.Errorf("bad attr data: %v", option.Attr)
						}
						request.Create{{ refType }}Request.{{ refType }}.Attr = attr
					}
					{% endif %}
					e.Request = request
				case RefOperationDelete:
					e.Request = &Event_Delete{{ refType }}Request{
						Delete{{ refType }}Request: &Delete{{ refType }}Request{
								ID: option.FromUUID,
								{{ refType }}: &models.{{ refType }}{
									UUID: option.ToUUID,
								},
							},
					}
			}{% endfor %}{% endif%}{% endfor %}
		default:
			return nil, errors.Errorf("ref type %s does not exist", kind)
	}
	return e, nil
}
