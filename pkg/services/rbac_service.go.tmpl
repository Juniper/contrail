package services

import (
	"context"

	"github.com/Juniper/asf/pkg/auth"
	"github.com/Juniper/asf/pkg/services/baseservices"
	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/rbac"
)

// TODO(dfurman): move non-template code out of template

func (service *RBACService) getAllAPIAccessLists(ctx context.Context) []*models.APIAccessList {
	noAuthCtx := auth.NoAuth(ctx)
	listRequest := &ListAPIAccessListRequest{
		Spec: &baseservices.ListSpec{},
	}
	// Use a context with No auth for internal calls
	result, err := service.ReadService.ListAPIAccessList(noAuthCtx, listRequest)
	if err != nil {
		return nil
	}
	return result.APIAccessLists
}


{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func (r *RBACService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {
    model := request.{{ schema.JSONSchema.GoName }}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(),rbac.ActionCreate);
    if err != nil {
        return nil,err
    }
    if  !allowed  {
        if err := rbac.CheckPermissions(ctx,r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionCreate) ; err != nil {
		    return nil,err
	    }
	}
    return r.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
	model := request.{{ schema.JSONSchema.GoName }}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(), rbac.ActionUpdate);
    if err != nil {
        return nil,err
    }

    if  !allowed  {
        if err := rbac.CheckPermissions(ctx,r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionUpdate); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,model.UUID )
	    if err := rbac.CheckObjectPermissions(ctx,perms2,
		    r.AAAMode,model.Kind(),rbac.ActionUpdate) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Delete{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Delete{{ schema.JSONSchema.GoName }}Request,
) (*Delete{{ schema.JSONSchema.GoName }}Response, error) {
	model := models.{{ schema.JSONSchema.GoName }}{}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(), rbac.ActionDelete);
    if err != nil {
        return nil,err
    }

    if  !allowed  {
        if err := rbac.CheckPermissions(ctx,r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionDelete); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,request.GetID())
	    if err := rbac.CheckObjectPermissions(ctx,perms2,
		    r.AAAMode,model.Kind(),rbac.ActionDelete) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Get{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Get{{ schema.JSONSchema.GoName }}Request,
) (*Get{{ schema.JSONSchema.GoName }}Response, error) {
	model := models.{{ schema.JSONSchema.GoName }}{}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode, model.Kind(),rbac.ActionRead);
    if err != nil {
        return nil,err
    }

    if  !allowed  {

        if err := rbac.CheckPermissions(ctx,r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionRead); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,request.GetID())
	    if err := rbac.CheckObjectPermissions(ctx,perms2,
		    r.AAAMode,model.Kind(),rbac.ActionRead) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.Get{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) List{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *List{{ schema.JSONSchema.GoName }}Request,
) (*List{{ schema.JSONSchema.GoName }}Response, error) {
	model := models.{{ schema.JSONSchema.GoName }}{}

    allowed, err := rbac.CheckCommonPermissions(ctx, r.AAAMode,model.Kind(), rbac.ActionRead);

    if err != nil {
        return nil,err
    }

    if  !allowed  {

        if err := rbac.CheckPermissions(ctx,r.getAllAPIAccessLists(ctx),
		    r.AAAMode,model.Kind(),rbac.ActionRead); err != nil {
		    return nil,err
	    }
	    perms2 := r.Get{{ schema.JSONSchema.GoName }}Perms2(ctx,model.UUID)
	    if err := rbac.CheckObjectPermissions(ctx,perms2,
		    r.AAAMode,model.Kind(),rbac.ActionRead) ; err != nil {
		    return nil,err
	    }
    }
	return r.BaseService.List{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (r *RBACService) Get{{ schema.JSONSchema.GoName }}Perms2(ctx context.Context,uuid string) *models.PermType2 {
	if result, err := r.ReadService.Get{{ schema.JSONSchema.GoName }}(auth.NoAuth(ctx),  &Get{{ schema.JSONSchema.GoName }}Request{
                                            ID: uuid, }); err == nil {
		return result.{{ schema.JSONSchema.GoName }}.GetPerms2()
	}
	return nil
}
{% endif %}{% endfor %}
