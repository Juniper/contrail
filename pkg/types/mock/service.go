// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/service.go

// Package typesmock is a generated GoMock package.
package typesmock

import (
	context "context"
	models "github.com/Juniper/asf/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInTransactionDoer is a mock of InTransactionDoer interface
type MockInTransactionDoer struct {
	ctrl     *gomock.Controller
	recorder *MockInTransactionDoerMockRecorder
}

// MockInTransactionDoerMockRecorder is the mock recorder for MockInTransactionDoer
type MockInTransactionDoerMockRecorder struct {
	mock *MockInTransactionDoer
}

// NewMockInTransactionDoer creates a new mock instance
func NewMockInTransactionDoer(ctrl *gomock.Controller) *MockInTransactionDoer {
	mock := &MockInTransactionDoer{ctrl: ctrl}
	mock.recorder = &MockInTransactionDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInTransactionDoer) EXPECT() *MockInTransactionDoerMockRecorder {
	return m.recorder
}

// DoInTransaction mocks base method
func (m *MockInTransactionDoer) DoInTransaction(ctx context.Context, do func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTransaction", ctx, do)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInTransaction indicates an expected call of DoInTransaction
func (mr *MockInTransactionDoerMockRecorder) DoInTransaction(ctx, do interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTransaction", reflect.TypeOf((*MockInTransactionDoer)(nil).DoInTransaction), ctx, do)
}

// MockIntPoolAllocator is a mock of IntPoolAllocator interface
type MockIntPoolAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockIntPoolAllocatorMockRecorder
}

// MockIntPoolAllocatorMockRecorder is the mock recorder for MockIntPoolAllocator
type MockIntPoolAllocatorMockRecorder struct {
	mock *MockIntPoolAllocator
}

// NewMockIntPoolAllocator creates a new mock instance
func NewMockIntPoolAllocator(ctrl *gomock.Controller) *MockIntPoolAllocator {
	mock := &MockIntPoolAllocator{ctrl: ctrl}
	mock.recorder = &MockIntPoolAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIntPoolAllocator) EXPECT() *MockIntPoolAllocatorMockRecorder {
	return m.recorder
}

// CreateIntPool mocks base method
func (m *MockIntPoolAllocator) CreateIntPool(arg0 context.Context, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntPool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIntPool indicates an expected call of CreateIntPool
func (mr *MockIntPoolAllocatorMockRecorder) CreateIntPool(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntPool", reflect.TypeOf((*MockIntPoolAllocator)(nil).CreateIntPool), arg0, arg1, arg2, arg3)
}

// GetIntOwner mocks base method
func (m *MockIntPoolAllocator) GetIntOwner(arg0 context.Context, arg1 string, arg2 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntOwner indicates an expected call of GetIntOwner
func (mr *MockIntPoolAllocatorMockRecorder) GetIntOwner(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntOwner", reflect.TypeOf((*MockIntPoolAllocator)(nil).GetIntOwner), arg0, arg1, arg2)
}

// DeleteIntPool mocks base method
func (m *MockIntPoolAllocator) DeleteIntPool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntPool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIntPool indicates an expected call of DeleteIntPool
func (mr *MockIntPoolAllocatorMockRecorder) DeleteIntPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntPool", reflect.TypeOf((*MockIntPoolAllocator)(nil).DeleteIntPool), arg0, arg1)
}

// AllocateInt mocks base method
func (m *MockIntPoolAllocator) AllocateInt(arg0 context.Context, arg1, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateInt", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateInt indicates an expected call of AllocateInt
func (mr *MockIntPoolAllocatorMockRecorder) AllocateInt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateInt", reflect.TypeOf((*MockIntPoolAllocator)(nil).AllocateInt), arg0, arg1, arg2)
}

// SetInt mocks base method
func (m *MockIntPoolAllocator) SetInt(arg0 context.Context, arg1 string, arg2 int64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInt indicates an expected call of SetInt
func (mr *MockIntPoolAllocatorMockRecorder) SetInt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt", reflect.TypeOf((*MockIntPoolAllocator)(nil).SetInt), arg0, arg1, arg2, arg3)
}

// DeallocateInt mocks base method
func (m *MockIntPoolAllocator) DeallocateInt(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocateInt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocateInt indicates an expected call of DeallocateInt
func (mr *MockIntPoolAllocatorMockRecorder) DeallocateInt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateInt", reflect.TypeOf((*MockIntPoolAllocator)(nil).DeallocateInt), arg0, arg1, arg2)
}

// MockMetadataGetter is a mock of MetadataGetter interface
type MockMetadataGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataGetterMockRecorder
}

// MockMetadataGetterMockRecorder is the mock recorder for MockMetadataGetter
type MockMetadataGetterMockRecorder struct {
	mock *MockMetadataGetter
}

// NewMockMetadataGetter creates a new mock instance
func NewMockMetadataGetter(ctrl *gomock.Controller) *MockMetadataGetter {
	mock := &MockMetadataGetter{ctrl: ctrl}
	mock.recorder = &MockMetadataGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataGetter) EXPECT() *MockMetadataGetterMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method
func (m *MockMetadataGetter) GetMetadata(ctx context.Context, requested models.Metadata) (*models.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, requested)
	ret0, _ := ret[0].(*models.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockMetadataGetterMockRecorder) GetMetadata(ctx, requested interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetadataGetter)(nil).GetMetadata), ctx, requested)
}

// ListMetadata mocks base method
func (m *MockMetadataGetter) ListMetadata(ctx context.Context, requested []*models.Metadata) ([]*models.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadata", ctx, requested)
	ret0, _ := ret[0].([]*models.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadata indicates an expected call of ListMetadata
func (mr *MockMetadataGetterMockRecorder) ListMetadata(ctx, requested interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadata", reflect.TypeOf((*MockMetadataGetter)(nil).ListMetadata), ctx, requested)
}
