name: Create OnPrem Cloud resources
cleanup:
- path: /contrail-multicloud-gw-node/contrail_multicloud_gw_node_uuid
- path: /contrail-control-node/contrail_control_nodes_uuid
- path: /contrail-vrouter-node/contrail_vrouter_nodes_uuid
- path: /contrail-cluster/test_cluster_uuid
- path: /physical-router/tor_device_uuid
- path: /kubernetes-cluster/test_kubernetes_cluster_uuid
- path: /kubernetes-master-node/kubernetes_master_node_uuid
- path: /port/k8s_node_port_uuid
- path: /port/cloud_node_gw_pvt_port_uuid
- path: /port/cloud_node_controller_pvt_port_uuid
- path: /port/cloud_node_compute_pvt_port_uuid
- path: /node/cloud_node_controller_uuid
- path: /node/k8s_node_uuid
- path: /node/cloud_node_gw_uuid
- path: /node/cloud_node_compute_uuid
- path: /cloud-security-group-rule/cloud_security_group_rule_uuid
- path: /cloud-security-group/cloud_security_group_uuid
- path: /cloud-private-subnet/cloud_private_subnet_uuid
- path: /virtual-cloud/virtual_cloud_uuid
- path: /cloud-region/cloud_region_uuid
- path: /cloud-provider/cloud_provider_uuid
- path: /cloud/cloud_uuid_onprem
- path: /cloud-user/cloud_user_uuid
- path: /credential/cloud_credential_uuid
- path: /keypair/cloud_keypair_uuid
- path: /tag/public_cloud_tag_uuid
test_data:
  cloud_keypair: &cloud_keypair
    name: cloud_keypair
    uuid: cloud_keypair_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001
    ssh_key_dir_path: /tmp/

  cloud_credential: &cloud_credential
    name: cloud_credential
    uuid: cloud_credential_uuid
    ssh_user: centos
    keypair_refs:
      - uuid: cloud_keypair_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001

  cloud_user: &cloud_user
    name: cloud_user
    uuid: cloud_user_uuid
    credential_refs:
      - uuid: cloud_credential_uuid

  cloud: &cloud
    provisioning_state: NOSTATE
    prebuild_image_id: nightly
    name: cloud
    uuid: cloud_uuid_onprem
    parent_cluster_uuid: cluster_with_authorization_registries_uuid
    organization: unit_test
    cloud_user_refs:
      - uuid: cloud_user_uuid

  cloud_provider: &cloud_provider
    name: cloud_provider
    uuid: cloud_provider_uuid
    type: private
    parent_type: cloud
    parent_uuid: cloud_uuid_onprem
    project: test2

  cloud_region: &cloud_region
    parent_type: cloud-provider
    parent_uuid: cloud_provider_uuid
    uuid: cloud_region_uuid

  vc_tag: &vc_tag
    name: public_cloud_tag
    uuid: public_cloud_tag_uuid
    tag_type_name: namespace
    tag_value: vc1

  virtual_cloud: &virtual_cloud
    name: virtual_cloud
    uuid: virtual_cloud_uuid
    parent_type: cloud-region
    parent_uuid: cloud_region_uuid
    cidr_block: 192.168.10.0/16
    tag_refs:
      - uuid: public_cloud_tag_uuid

  cloud_private_subnet: &cloud_private_subnet
    name: cloud_private_subnet
    uuid: cloud_private_subnet_uuid
    cidr_block: 192.168.10.0/24
    parent_type: virtual-cloud
    parent_uuid: virtual_cloud_uuid

  cloud_security_group: &cloud_security_group
    name: cloud_security_group
    uuid: cloud_security_group_uuid
    parent_type: virtual-cloud
    parent_uuid: virtual_cloud_uuid
    cloud_private_subnet_refs:
      - uuid: cloud_private_subnet_uuid

  cloud_security_group_rule: &cloud_security_group_rule
    name: cloud_security_group_rule
    uuid: cloud_security_group_rule_uuid
    parent_type: cloud-security-group
    parent_uuid: cloud_security_group_uuid
    direction: ingress
    protocol: ANY

  tor_device: &tor_device
    uuid: tor_device_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001
    name: mx60
    physical_router_product_name: "mx60"
    physical_router_management_ip: 20.20.20.200
    physical_router_dataplane_ip: 10.10.10.100
    physical_router_user_credentials:
      username: test
      password: test123
    annotations:
      key_value_pair:
        - key: autonomous_system
          value: "6500"
        - key: interface
          value: irb.20,irb.21
        - key: private_subnet
          value: 10.10.10.0/24,30.10.10.0/24
    tag_refs:
      - uuid: public_cloud_tag_uuid

  cloud_node_gw: &cloud_node_gw
    name: cloud_node_gw
    uuid: cloud_node_gw_uuid
    hostname: cloud_node_gw
    cloud_info:
      roles:
        - gateway
    credential_refs:
      - uuid: cloud_credential_uuid
    cloud_private_subnet_refs:
      - uuid: cloud_private_subnet_uuid
    tag_refs:
      - uuid: public_cloud_tag_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001

  cloud_node_gw_pvt_port: &cloud_node_gw_pvt_port
    name: cloud_node_gw_pvt_port
    uuid: cloud_node_gw_pvt_port_uuid
    parent_type: node
    parent_uuid: cloud_node_gw_uuid
    ip_address: 10.10.10.10

  cloud_node_controller: &cloud_node_controller
    name: cloud_node_controller
    uuid: cloud_node_controller_uuid
    hostname: cloud_node_controller
    cloud_info:
      roles:
        - controller
    credential_refs:
      - uuid: cloud_credential_uuid
    tag_refs:
      - uuid: public_cloud_tag_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001

  cloud_node_controller_pvt_port: &cloud_node_controller_pvt_port
    name: cloud_node_controller_pvt_port
    uuid: cloud_node_controller_pvt_port_uuid
    parent_type: node
    parent_uuid: cloud_node_controller_uuid
    ip_address: 10.10.10.11

  cloud_node_compute: &cloud_node_compute
    name: cloud_node_compute
    uuid: cloud_node_compute_uuid
    hostname: cloud_node_compute
    cloud_info:
      roles:
        - compute
    credential_refs:
      - uuid: cloud_credential_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001

  k8s_node: &k8s_node
    uuid: k8s_node_uuid
    hostname: k8s_node
    interface_name: all_in_one_node_interface
    ip_address: 4.4.4.4
    credential_refs:
      - uuid: cloud_credential_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001

  k8s_node_pvt_port: &k8s_node_pvt_port
    name: k8s_node_port
    uuid: k8s_node_port_uuid
    parent_type: node
    parent_uuid: k8s_node_uuid
    ip_address: 10.10.10.13

  cloud_node_compute_pvt_port: &cloud_node_compute_pvt_port
    name: cloud_node_compute_pvt_port
    uuid: cloud_node_compute_pvt_port_uuid
    parent_type: node
    parent_uuid: cloud_node_compute_uuid
    ip_address: 10.10.10.12

  test_cluster: &test_cluster
    fq_name: ["default-global-system-config", "test_cluster"]
    uuid: test_cluster_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001
    default_gateway: 2.2.2.2
    provisioning_state: CREATED
    cloud_refs:
      - uuid: cloud_uuid_onprem
    kubernetes_cluster_refs:
      - uuid: test_kubernetes_cluster_uuid

  contrail_control_nodes: &contrail_control_nodes
    uuid: contrail_control_nodes_uuid
    parent_type: contrail-cluster
    parent_uuid: test_cluster_uuid
    node_refs:
      - uuid: cloud_node_controller_uuid

  contrail_vrouter_nodes: &contrail_vrouter_nodes
    uuid: contrail_vrouter_nodes_uuid
    parent_type: contrail-cluster
    parent_uuid: test_cluster_uuid
    node_refs:
      - uuid: cloud_node_compute_uuid

  contrail_multicloud_gw_node: &contrail_multicloud_gw_node
    uuid: contrail_multicloud_gw_node_uuid
    parent_type: contrail-cluster
    parent_uuid: test_cluster_uuid
    default_gateway: 1.1.1.1
    services:
      - bgp_rr
    node_refs:
      - uuid: cloud_node_gw_uuid
    protocols_mode:
      - ssl_client

  test_kubernetes_cluster: &test_kubernetes_cluster
    uuid: test_kubernetes_cluster_uuid
    parent_type: global-system-config
    parent_uuid: beefbeef-beef-beef-beef-beefbeef0001
    ntp_server: 10.1.1.100

  kubernetes_master_nodes: &kubernetes_master_nodes
    uuid: kubernetes_master_node_uuid
    parent_type: kubernetes-cluster
    parent_uuid: test_kubernetes_cluster_uuid
    node_refs:
      - uuid: k8s_node_uuid

clients:
  default:
    id: alice
    password: alice_password
    insecure: true
    scope:
      project:
        name: admin


workflow:
- name: create keypair
  request:
    path: /keypairs
    method: POST
    expected:
    - 200
    data:
      keypair: *cloud_keypair
  expect:
    keypair:
      <<: *cloud_keypair
      perms2:
        owner: admin

- name: create cloud credential
  request:
    path: /credentials
    method: POST
    expected:
    - 200
    data:
      credential: *cloud_credential
  expect:
    credential:
      <<: *cloud_credential
      perms2:
        owner: admin


- name: create cloud user
  request:
    path: /cloud-users
    method: POST
    expected:
    - 200
    data:
      cloud-user: *cloud_user
  expect:
    cloud-user:
      <<: *cloud_user
      perms2:
        owner: admin

- name: create cloud
  request:
    path: /clouds
    method: POST
    expected:
    - 200
    data:
      cloud: *cloud
  expect:
    cloud:
      <<: *cloud
      perms2:
        owner: admin

- name: create cloud provider
  request:
    path: /cloud-providers
    method: POST
    expected:
    - 200
    data:
      cloud-provider: *cloud_provider
  expect:
    cloud-provider:
      <<: *cloud_provider
      perms2:
        owner: admin

- name: create cloud region
  request:
    path: /cloud-regions
    method: POST
    expected:
    - 200
    data:
      cloud-region: *cloud_region
  expect:
    cloud-region:
      <<: *cloud_region
      perms2:
        owner: admin

- name: create virtual cloud tag
  request:
    path: /tags
    method: POST
    expected:
    - 200
    data:
      tag: *vc_tag
  expect:
    tag: *vc_tag

- name: create virtual cloud
  request:
    path: /virtual-clouds
    method: POST
    expected:
    - 200
    data:
      virtual-cloud: *virtual_cloud
  expect:
    virtual-cloud:
      <<: *virtual_cloud
      perms2:
        owner: admin

- name: create cloud private subnet
  request:
    path: /cloud-private-subnets
    method: POST
    expected:
    - 200
    data:
      cloud-private-subnet: *cloud_private_subnet
  expect:
    cloud-private-subnet:
      <<: *cloud_private_subnet
      perms2:
        owner: admin

- name: create cloud security group
  request:
    path: /cloud-security-groups
    method: POST
    expected:
    - 200
    data:
      cloud-security-group: *cloud_security_group
  expect:
    cloud-security-group:
      <<: *cloud_security_group
      perms2:
        owner: admin

- name: create cloud security group rule
  request:
    path: /cloud-security-group-rules
    method: POST
    expected:
    - 200
    data:
      cloud-security-group-rule: *cloud_security_group_rule
  expect:
    cloud-security-group-rule:
      <<: *cloud_security_group_rule
      perms2:
        owner: admin

- name: create TOR device
  request:
    path: /physical-routers
    method: POST
    expected:
    - 200
    data:
      physical-router: *tor_device
  expect:
    physical-router:
      <<: *tor_device
      perms2:
        owner: admin

- name: create cloud node gw
  request:
    path: /nodes
    method: POST
    expected:
    - 200
    data:
      node: *cloud_node_gw
  expect:
    node: *cloud_node_gw

- name: create cloud node controller
  request:
    path: /nodes
    method: POST
    expected:
    - 200
    data:
      node: *cloud_node_controller
  expect:
    node: *cloud_node_controller

- name: create cloud node compute
  request:
    path: /nodes
    method: POST
    expected:
    - 200
    data:
      node: *cloud_node_compute
  expect:
    node: *cloud_node_compute

- name: create k8s node
  request:
    path: /nodes
    method: POST
    expected:
    - 200
    data:
      node: *k8s_node
  expect:
    node: *k8s_node

- name: create k8s node private port
  request:
    path: /ports
    method: POST
    expected:
    - 200
    data:
      port: *k8s_node_pvt_port
  expect:
    port: *k8s_node_pvt_port

- name: create cloud node gw private port
  request:
    path: /ports
    method: POST
    expected:
    - 200
    data:
      port: *cloud_node_gw_pvt_port
  expect:
    port: *cloud_node_gw_pvt_port

- name: create cloud node controller private port
  request:
    path: /ports
    method: POST
    expected:
    - 200
    data:
      port: *cloud_node_controller_pvt_port
  expect:
    port: *cloud_node_controller_pvt_port

- name: create cloud node compute private port
  request:
    path: /ports
    method: POST
    expected:
    - 200
    data:
      port: *cloud_node_compute_pvt_port
  expect:
    port: *cloud_node_compute_pvt_port

- name: create k8s cluster
  request:
    path: /kubernetes-clusters
    method: POST
    expected:
    - 200
    data:
      kubernetes-cluster: *test_kubernetes_cluster
  expect:
    kubernetes-cluster: *test_kubernetes_cluster

- name: create test cluster
  request:
    path: /contrail-clusters
    method: POST
    expected:
    - 200
    data:
      contrail-cluster: *test_cluster
  expect:
    contrail-cluster: *test_cluster

- name: create multi cloud gateway node
  request:
    path: /contrail-multicloud-gw-nodes
    method: POST
    expected:
    - 200
    data:
      contrail-multicloud-gw-node: *contrail_multicloud_gw_node
  expect:
    contrail-multicloud-gw-node: *contrail_multicloud_gw_node

- name: create control node
  request:
    path: /contrail-control-nodes
    method: POST
    expected:
    - 200
    data:
      contrail-control-node: *contrail_control_nodes
  expect:
    contrail-control-node: *contrail_control_nodes

- name: create vrouter node
  request:
    path: /contrail-vrouter-nodes
    method: POST
    expected:
    - 200
    data:
      contrail-vrouter-node: *contrail_vrouter_nodes
  expect:
    contrail-vrouter-node: *contrail_vrouter_nodes

- name: create kubernetes master node
  request:
    path: /kubernetes-master-nodes
    method: POST
    expected:
    - 200
    data:
      kubernetes-master-node: *kubernetes_master_nodes
  expect:
    kubernetes-master-node: *kubernetes_master_nodes
