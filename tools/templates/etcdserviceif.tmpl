package etcd

import (
    "context"

    "github.com/pkg/errors"

    "{{ option.PackagePath }}/pkg/services"
    "{{ option.PackagePath }}/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func (ns *NotifierService) Create{{ schema.JSONSchema.GoName }}(
    ctx context.Context, request *services.Create{{ schema.JSONSchema.GoName }}Request,
) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
    response, err := ns.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        return nil, err
    }

    o := response.Get{{ schema.JSONSchema.GoName }}()
    key := models.ResourceKey("{{ schema.ID }}", o.UUID)
    if key == "" {
        return nil, errors.New("etcd object key is empty")
    }

    jsonStr, err := ns.Codec.Encode(o)
    if err != nil {
        return nil, errors.New("error encoding create data")
    }

    err = ns.Client.Put(ctx, key, jsonStr)
    if err != nil {
        return nil, errors.Wrapf(err, "failed to create {{ schema.JSONSchema.GoName }} with UUID %q in etcd", o.UUID)
    }

    ns.log.WithField("uuid", o.UUID).Debug("Created {{ schema.JSONSchema.GoName }} in etcd")
    return response, nil
}

func (ns *NotifierService) Update{{ schema.JSONSchema.GoName }}(
    ctx context.Context, request *services.Update{{ schema.JSONSchema.GoName }}Request,
) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
    response, err := ns.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        return nil, err
    }

    o := response.Get{{ schema.JSONSchema.GoName }}()
    key := models.ResourceKey("{{ schema.ID }}", o.UUID)
    if key == "" {
        return nil, errors.New("etcd object key is empty")
    }

    ns.log.WithField("uuid", o.UUID).Debug("Updated {{ schema.JSONSchema.GoName }} in etcd")
    return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
        txn := GetTxn(ctx)
        oldData := txn.Get(key)
        newData, err := models.UpdateData(ns.Codec, oldData, o, request.GetFieldMask())
        if err != nil {
            return errors.Wrap(err, "error processing update data for etcd")
        }
        txn.Put(key, newData)
        return nil
    })
}

func (ns *NotifierService) Delete{{ schema.JSONSchema.GoName }}(
    ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request,
) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
    response, err := ns.BaseService.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        return nil, err
    }

    key := models.ResourceKey("{{ schema.ID }}", response.GetID())
    if key == "" {
        return nil, errors.New("etcd object key is empty")
    }

    err = ns.Client.Delete(ctx, key)
    if err != nil {
        return nil, errors.Wrapf(err, "failed to delete {{ schema.JSONSchema.GoName }} with UUID %q in etcd", response.GetID())
    }

    ns.log.WithField("uuid", response.GetID()).Debug("Deleted {{ schema.JSONSchema.GoName }} in etcd")
    return response, nil
}

{% endif %}{% endfor %}
