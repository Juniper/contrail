// nolint
package etcd

import (
    "context"

	"github.com/pkg/errors"
    log "github.com/sirupsen/logrus"

    "github.com/Juniper/contrail/pkg/services"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (service *NotifierService) Create{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Create{{ schema.JSONSchema.GoName }}Request) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
    response, err := service.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        log.WithError(err).WithField("resource", "{{ schema.ID }}").Debug("Create {{ schema.JSONSchema.GoName }} failed")
        return nil, err
    }

    obj := response.Get{{ schema.JSONSchema.GoName }}()
    key, jsonStr := service.EtcdNotifierMarshal("{{ schema.ID }}", obj.UUID, obj)
    if key == "" {
        return nil, errors.New("etcd object key is empty")
    }

    err = service.Client.Put(ctx, key, jsonStr)
    if err != nil {
        log.WithError(err).WithField("resource", "{{ schema.ID }}").Debug(
            "Create {{ schema.JSONSchema.GoName }}[%s]: Failed to Write to ETCD", obj.UUID)
        return nil, err
    }

    log.WithField("resource", "{{ schema.ID }}").Debugf(
        "Create {{ schema.JSONSchema.GoName }}[%s]: Write to ETCD successful", obj.UUID)

    return response, nil
}

func (service *NotifierService) Update{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Update{{ schema.JSONSchema.GoName }}Request) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
    response, err := service.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        log.WithError(err).WithField("resource", "{{ schema.ID }}").Debug("Update {{ schema.JSONSchema.GoName }} failed")
        return nil, err
    }

    obj := response.Get{{ schema.JSONSchema.GoName }}()
    key, jsonStr := service.EtcdNotifierMarshal("{{ schema.ID }}", obj.UUID, obj)
    if key == "" {
        return nil, errors.New("etcd object key is empty")
    }

    err = service.Client.Put(ctx, key, jsonStr)
    if err != nil {
        log.WithError(err).WithField("resource", "{{ schema.ID }}").Debug(
            "Update {{ schema.JSONSchema.GoName }}[%s]: Failed to Write to ETCD", obj.UUID)
        return nil, err
    }

    log.WithError(err).WithField("resource", "{{ schema.ID }}").Debugf(
        "Update {{ schema.JSONSchema.GoName }}[%s]: Write to ETCD successful", obj.UUID)

    return response, nil
}

func (service *NotifierService) Delete{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
    response, err := service.BaseService.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        log.WithError(err).WithField("resource", "{{ schema.ID }}").Debug("Delete {{ schema.JSONSchema.GoName }} failed")
        return nil, err
    }

    UUID := response.GetID()
    key, _ := service.EtcdNotifierMarshal("{{ schema.ID }}", UUID, nil)
    if key == "" {
        return nil, errors.New("etcd object key is empty")
    }

    err = service.Client.Delete(ctx, key)
    if err != nil {
        log.WithError(err).WithField("resource", "{{ schema.ID }}").Debug(
            "Delete {{ schema.JSONSchema.GoName }}[%s]: Failed to Write to ETCD", UUID)
        return nil, err
    }

    log.WithField("resource", "{{ schema.ID }}").Debugf(
        "Delete {{ schema.JSONSchema.GoName }}[%s]: Write to ETCD successful", UUID)

    return response, nil
}
{% endif%}{% endfor %}
