package etcd

import (
	"context"

	"github.com/pkg/errors"

	"{{ option.PackagePath }}/pkg/services"
	"{{ option.PackagePath }}/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func (ns *NotifierService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *services.Create{{ schema.JSONSchema.GoName }}Request,
) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
	response, err := ns.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
	if err != nil {
		return nil, err
	}

	o := response.Get{{ schema.JSONSchema.GoName }}()
    key := models.ResourceKey("{{ schema.ID }}", o.UUID)

	jsonStr, err := ns.Codec.Encode(o)
	if err != nil {
		return nil, errors.New("error encoding create data")
	}

	err = ns.Client.Put(ctx, key, jsonStr)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to create {{ schema.JSONSchema.GoName }} with UUID %q in etcd", o.UUID)
	}

	ns.log.WithField("uuid", o.UUID).Debug("Created {{ schema.JSONSchema.GoName }} in etcd")
	return response, nil
}

func (ns *NotifierService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *services.Update{{ schema.JSONSchema.GoName }}Request,
) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
	response, err := ns.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
	if err != nil {
		return nil, err
	}

	o := response.Get{{ schema.JSONSchema.GoName }}()
    key := models.ResourceKey("{{ schema.ID }}", o.UUID)

	ns.log.WithField("uuid", o.UUID).Debug("Updating {{ schema.JSONSchema.GoName }} in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		txn := GetTxn(ctx)
		oldData := txn.Get(key)
		newData, err := models.UpdateData(ns.Codec, oldData, o, request.GetFieldMask())
		if err != nil {
			return errors.Wrap(err, "error processing update data for etcd")
		}
		txn.Put(key, newData)
		return nil
	})
}

func (ns *NotifierService) Delete{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request,
) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
	response, err := ns.BaseService.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
	if err != nil {
		return nil, err
	}

	err = ns.Client.Delete(ctx, models.ResourceKey("{{ schema.ID }}", response.GetID()))
	if err != nil {
		return nil, errors.Wrapf(err, "failed to delete {{ schema.JSONSchema.GoName }} with UUID %q in etcd", response.GetID())
	}

	ns.log.WithField("uuid", response.GetID()).Debug("Deleted {{ schema.JSONSchema.GoName }} in etcd")
	return response, nil
}

{% for _, reference in schema.References %}
{% set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}

func (ns *NotifierService) Create{{ refType }}(
	ctx context.Context, request *services.Create{{ refType }}Request,
) (*services.Create{{ refType }}Response, error) {
	response, err := ns.BaseService.Create{{ refType }}(ctx, request)
	if err != nil {
		return nil, err
	}

	ref := response.Get{{ refType }}()
	fromKey := models.ResourceKey("{{ schema.ID }}", response.ID)
	toKey := models.ResourceKey("{{ reference.LinkTo.ID }}", ref.UUID)

	ns.log.WithField("from-key", fromKey).WithField("to-key", toKey).Debug("Creating {{ refType }} in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		txn := GetTxn(ctx)

		oldFromData, oldToData := txn.Get(fromKey), txn.Get(toKey)
		newFrom, newTo := &models.{{ schema.JSONSchema.GoName }}{}, &models.{{ reference.GoName }}{}
		if err := ns.Codec.Decode(oldFromData, newFrom); err != nil {
			return err
		}
		if err := ns.Codec.Decode(oldToData, newTo); err != nil {
			return err
		}

		newFrom.Add{{ reference.GoName }}Ref(ref)
		newTo.Add{{ schema.JSONSchema.GoName }}Backref(&models.{{ schema.JSONSchema.GoName }}{UUID: response.ID})

		newFromData, err := ns.Codec.Encode(newFrom)
		if err != nil {
			return err
		}
		newToData, err := ns.Codec.Encode(newTo)
		if err != nil {
			return err
		}

		txn.Put(fromKey, newFromData)
		txn.Put(toKey, newToData)
		return nil
	})
}

func (ns *NotifierService) Delete{{ refType }}(
	ctx context.Context, request *services.Delete{{ refType }}Request,
) (*services.Delete{{ refType }}Response, error) {
	response, err := ns.BaseService.Delete{{ refType }}(ctx, request)
	if err != nil {
		return nil, err
	}

	ref := response.Get{{ refType }}()
	fromKey := models.ResourceKey("{{ schema.ID }}", response.ID)
	toKey := models.ResourceKey("{{ reference.LinkTo.ID }}", ref.UUID)

	ns.log.WithField("from-key", fromKey).WithField("to-key", toKey).Debug("Deleting {{ refType }} in etcd")
	return response, ns.Client.InTransaction(ctx, func(ctx context.Context) error {
		txn := GetTxn(ctx)

		oldFromData, oldToData := txn.Get(fromKey), txn.Get(toKey)
		newFrom, newTo := &models.{{ schema.JSONSchema.GoName }}{}, &models.{{ reference.GoName }}{}
		if err := ns.Codec.Decode(oldFromData, newFrom); err != nil {
			return err
		}
		if err := ns.Codec.Decode(oldToData, newTo); err != nil {
			return err
		}

		newFrom.Remove{{ reference.GoName }}Ref(ref)
		newTo.Remove{{ schema.JSONSchema.GoName }}Backref(&models.{{ schema.JSONSchema.GoName }}{UUID: response.ID})

		newFromData, err := ns.Codec.Encode(newFrom)
		if err != nil {
			return err
		}
		newToData, err := ns.Codec.Encode(newTo)
		if err != nil {
			return err
		}

		txn.Put(fromKey, newFromData)
		txn.Put(toKey, newToData)
		return nil
	})
}

{% endfor %}

{% endif %}{% endfor %}
