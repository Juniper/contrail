{% autoescape off %}
package models

import (
	//"context"
	//"fmt"

	"github.com/Juniper/contrail/pkg/common"
)

//To skip import error.
var _ = common.OPERATION

{% if type.Type == "object" %}
// Make{{ name }} makes {{ name }}
// nolint
func Make{{ name }}() *{{name}}{
    return &{{name}}{
    //TODO(nati): Apply default
    {% for property in type.OrderedProperties %}{% if property.GoType == "string" %}{{ property.GoName }}: "",
        {% elif property.GoType == "[]string" %}{{ property.GoName }}: []string{},
        {% elif property.GoType == "[]interface" %}{{ property.GoName }}: []interface{},
        {% elif property.GoType == "map[string]string" %}{{ property.GoName }}: map[string]string{},
        {% elif property.GoType == "map[string]interface{}" %}{{ property.GoName }}: map[string]interface{}{},
        {% elif property.GoType == "bool" %}{{ property.GoName }}: false,
        {% elif property.GoType == "int64" %}{{ property.GoName }}: 0,
        {% elif property.GoType == "float" %}{{ property.GoName }}: 0,
        {% elif property.Type == "array"%}
            {% if property.Items.Type == "string" %}
                {{ property.GoName }}: []string{},
            {% elif property.Items.Type == "integer"%}
                {{ property.GoName }}: []int64{},
            {% elif property.Items.GoType %}
                {{ property.GoName }}:  Make{{ property.Items.GoType }}Slice(),
            {% endif %}
        {% else %}{{ property.GoName }}: Make{{ property.GoType }}(),
        {% endif %}{% endfor %}
    }
}

// Make{{ name }} makes {{ name }}
// nolint
func InterfaceTo{{ name }}(i interface{}) *{{name}}{
    m, ok := i.(map[string]interface{})
    _ = m
    if !ok {
        return nil
    }
    return &{{name}}{
    //TODO(nati): Apply default
    {% for property in type.OrderedProperties %}{% if property.GoType == "string" %}{{ property.GoName }}: common.InterfaceToString(m["{{ property.ID }}"]),
        {% elif property.GoType == "[]string" %}{{ property.GoName }}: common.InterfaceToStringList(m["{{ property.ID }}"]),
        {% elif property.GoType == "[]interface" %}{{ property.GoName }}: common.InterfaceToStringList(m["{{ property.ID }}"]),
        {% elif property.GoType == "map[string]string" %}{{ property.GoName }}: common.InterfaceToStringMap(m["{{ property.ID }}"]),
        {% elif property.GoType == "map[string]interface{}" %}{{ property.GoName }}: common.InterfaceToInterfaceMap(m["{{ property.ID }}"]),
        {% elif property.GoType == "bool" %}{{ property.GoName }}: common.InterfaceToBool(m["{{ property.ID }}"]),
        {% elif property.GoType == "int64" %}{{ property.GoName }}: common.InterfaceToInt64(m["{{ property.ID }}"]),
        {% elif property.GoType == "float" %}{{ property.GoName }}: common.InterfaceToFloat(m["{{ property.ID }}"]),,
        {% elif property.Type == "array"%}
            {% if property.Items.Type == "string" %}
                {{ property.GoName }}: common.InterfaceToStringList(m["{{ property.ID }}"]),
            {% elif property.Items.Type == "integer"%}
                {{ property.GoName }}: common.InterfaceToInt64List(m["{{ property.ID }}"]),
            {% elif property.Items.GoType %}
                {{ property.GoName }}:  InterfaceTo{{ property.Items.GoType }}Slice(m["{{ property.ID }}"]),
            {% endif %}
        {% else %}{{ property.GoName }}: InterfaceTo{{ property.GoType }}(m["{{ property.ID }}"]),
        {% endif %}{% endfor %}
        {% for linkTo, reference in references %}
            {{ reference.GoName }}Refs : InterfaceTo{{ type.GoName }}{{ reference.GoName }}Refs(m["{{ linkTo }}_refs"]),
        {% endfor %}
    }
}

{% for linkTo, reference in references %}
func InterfaceTo{{ type.GoName  }}{{ reference.GoName }}Refs(i interface{}) []*{{ name }}{{ reference.GoName }}Ref {
    list, ok := i.([]interface{})
    if !ok {
        return nil
    }
    result := []*{{ type.GoName  }}{{ reference.GoName }}Ref{}
    for _, item := range list {
        m, ok := item.(map[string]interface{})
        _ = m
        if !ok {
            return nil
        }
        result = append(result, &{{ type.GoName  }}{{ reference.GoName }}Ref{
            UUID: common.InterfaceToString(m["uuid"]),
            To: common.InterfaceToStringList(m["to"]),
            {% if reference.RefType %}
            Attr: InterfaceTo{{ reference.RefType }}(m["attr"]),
            {% endif %}
        })
    }

    return result
}
{% endfor %}

// Make{{ name }}Slice() makes a slice of {{ name }}
// nolint
func Make{{ name }}Slice() []{% if type.Properties %}*{% endif %}{{ name }} {
    return []{% if type.Properties %}*{% endif %}{{ name }}{}
}

// InterfaceTo{{ name }}Slice() makes a slice of {{ name }}
// nolint
func InterfaceTo{{ name }}Slice(i interface{}) []{% if type.Properties %}*{% endif %}{{ name }} {
    list := common.InterfaceToInterfaceList(i)
    if list == nil {
        return nil
    }
    result := []{% if type.Properties %}*{% endif %}{{ name }}{}
    for _, item := range list {
        result = append(result, InterfaceTo{{ name }}(item) )
    }
    return result
}

/*
{% if parents %}
// GetProject retrieves project UUID for given object (if possible)
func (obj {{ name }}) GetProject(ctx context.Context) (uuid string, err error) {
	{% if name == "Project" %}return obj.GetUUID()
	{% else %}{% for ptype, pdef in parents %}if obj.GetParentType() == "{{ ptype }}" {
		{% if ptype == "project" %}return obj.GetParentUUID(), nil{% else %}parent := obj.GetParentUUID(){% endif %}
		parentREsp, err := service.DB.Get{{ pdef.GoName }}(ctx, &Get{{ pdef.GoName }}Request{
			ID: parent,
		})
		if err != nil {
			return "", fmt.Errorf("Error retrieving parent for object {{ name }} with uuid %v: %v", obj.GetUUID(), err)
		}
		return parentREsp.{{ pdef.GoName }}.GetProject(ctx)
	}
	{% endfor %}
	return "", fmt.Errorf("No 'Project' for type {{ name }} for object with UUID: %v", obj.GetUUID()){%endif%}
}
{% else %}
// GetProject for object without parent returns always error
func (obj {{ name }}) GetProject(ctx context.Context) (uuid string, err error) {
	return "", fmt.Errorf("Resource type {{ name }} is orphan - no Parent type")
}
{% endif %}
*/

{% endif %}

{% endautoescape %}
