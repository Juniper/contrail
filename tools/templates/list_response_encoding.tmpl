package services

import (
	"encoding/json"

	"github.com/pkg/errors"

	"github.com/Juniper/contrail/pkg/errutil"
	"github.com/Juniper/contrail/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
{% set name = schema.JSONSchema.GoName %}
{% set single = schema.Path %}
{% set plural = schema.PluralPath %}


func (r List{{ name }}Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.toMap())
}

func (r *List{{ name }}Response) UnmarshalJSON(data []byte) error {
	return r.unmarshalWith(func(dest interface{}) error {
		return json.Unmarshal(data, dest)
	})
}

func (r List{{ name }}Response) MarshalYAML() (interface{}, error) {
	return r.toMap(), nil
}

func (r *List{{ name }}Response) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return r.unmarshalWith(unmarshal)
}

func (r List{{ name }}Response) toMap() map[string]interface{} {
	if r.{{ name }}s == nil {
		return map[string]interface{}{
			"{{ plural }}": map[string]interface{}{
				"count": r.{{ name }}Count,
			},
		}
	}

	result := make([]map[string]interface{}, 0)
	for _, obj := range r.{{ name }}s {
		result = append(result,
			map[string]interface{}{
				"{{ single }}": obj.{{ name }},
			},
		)
	} 
	return map[string]interface{}{
		"{{ plural }}": result,
	}
}

func (r List{{ name }}Response) NoDetailResponse() interface{} {
	if r.{{ name }}s == nil {
		return &r
	}

	objects := make([]interface{}, len(r.{{ name }}s))
	for i := 0; i < len(r.{{ name }}s); i++ {
		objects[i] = r.{{ name }}s[i].{{ name }}
	}

	return map[string]interface{} {
		"{{ plural }}": objects,
	}
}

func (r *List{{ name }}Response) unmarshalWith(unmarshal func(interface{}) error) error {
	type getResponse struct {
		Resource *models.{{ name }} `json:"{{ single }}" yaml:"{{ single }}"`
	}
	var listResponse struct {
		Resources []*getResponse `json:"{{ plural }}" yaml:"{{ plural }}"`
	}
	err := unmarshal(&listResponse)
	if err == nil {
		list := listResponse.Resources
		var result []*Get{{ name }}Response
		for _, obj := range list {
			result = append(result, &Get{{ name }}Response{
				{{ name }}: obj.Resource,
			})
		}
		*r = List{{ name }}Response{
			{{ name }}s:	 result,
			{{ name }}Count: int64(len(list)),
		}
		return nil
	}

	// err != nil is not necessarily an error: the response could be a count response
	errs := errutil.MultiError{err}
	var countResponse struct {
		Resources struct {
			Count int64 `json:"count" yaml="count"`
		} `json:"{{ plural }}" yaml:"{{ plural }}"`
	}
	if err = unmarshal(&countResponse); err != nil {
		errs = append(errs, err)
		return errors.Wrap(errs, "failed to unmarshal List{{ name }}Response")
	}

	*r = List{{ name }}Response{
		{{ name }}s:	 nil,
		{{ name }}Count: countResponse.Resources.Count,
	}
	return nil
}

{% endif %}{% endfor %}
