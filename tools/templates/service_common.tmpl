package services

import (
    "context"

    "github.com/labstack/echo"
    "github.com/pkg/errors"

    "github.com/Juniper/contrail/pkg/models"
)

func getObject(ctx context.Context, rs ReadService, schemaID, uuid string) (models.Object, error) {
    switch (schemaID) { {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    case "{{ schema.ID }}":
        resp, err := rs.Get{{ schema.JSONSchema.GoName }}(ctx, &Get{{ schema.JSONSchema.GoName }}Request{ID: uuid})
        return resp.Get{{ schema.JSONSchema.GoName }}(), err{% endif%}{% endfor %}
    }
    return nil, errors.Errorf("unknown type provided: %v", schemaID)
}

type routeRegistry interface {
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

//RegisterRESTAPI register REST API service for path.
// nolint
func (service *ContrailService) RegisterRESTAPI(r routeRegistry) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	r.POST("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTCreate{{ schema.JSONSchema.GoName }})
	r.GET("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTList{{ schema.JSONSchema.GoName }})
	r.PUT("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTUpdate{{ schema.JSONSchema.GoName }})
	r.GET("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTGet{{ schema.JSONSchema.GoName }})
	r.DELETE("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTDelete{{ schema.JSONSchema.GoName }})
{% endif%}{% endfor %}
	r.POST("sync", service.RESTSync)
	r.POST("ref-update", service.RESTRefUpdate)
	r.POST("prop-collection-update", service.RESTPropCollectionUpdate)
	r.POST("ref-relax-for-delete", service.RESTRefRelaxForDelete)
}

type registerFunc func(path string, name string)

//RegisterSingularPaths registers singular paths of resources for discovery.
func RegisterSingularPaths (register registerFunc) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	register("{{ schema.Prefix }}{{ schema.Path }}", "{{ schema.Path }}")
{% endif %}{% endfor %}
}

// RegisterPluralPaths registers plural paths of resources for discovery.
func RegisterPluralPaths (register registerFunc) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	register("{{ schema.Prefix }}{{ schema.PluralPath }}", "{{ schema.Path }}")
{% endif %}{% endfor %}
}
