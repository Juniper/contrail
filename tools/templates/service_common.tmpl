package services

import (
    "context"
    "encoding/json"
    "github.com/Juniper/contrail/pkg/models"
    "github.com/labstack/echo"
    "github.com/Juniper/contrail/pkg/common"
    "github.com/Juniper/contrail/pkg/serviceif"
)

func (resource *ResourceEvent) Process(ctx context.Context, service serviceif.Service) (*ResourceEvent, error) {
    switch(resource.Kind) {
    {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    case "{{ schema.ID }}":
        model := models.InterfaceTo{{ schema.JSONSchema.GoName }}(resource.Data)
        operation := resource.Operation
        if operation == "" {
            operation = create
            if model.UUID != "" {
                _, err := service.Get{{ schema.JSONSchema.GoName }}(ctx,
                    &models.Get{{ schema.JSONSchema.GoName }}Request{
                        ID: model.UUID,
                })
                if err == nil {
                    operation = update
                }
            }
        }
        switch(operation) {
            case create:
                request := &models.Create{{ schema.JSONSchema.GoName }}Request{
                    {{ schema.JSONSchema.GoName }}: model,
                }
                response, err := service.Create{{ schema.JSONSchema.GoName }}(ctx, request)
                if err != nil {
                    return nil, common.ToHTTPError(err)
                }
                return &ResourceEvent{
                    Kind: resource.Kind,
                    Data: response.{{ schema.JSONSchema.GoName }},
                    Operation: operation,
                }, nil
            case update:
                    request := &models.Update{{ schema.JSONSchema.GoName }}Request{
                        {{ schema.JSONSchema.GoName }}: model,
                        FieldMask: MapToFieldMask(resource.Data.(map[string]interface{})),
                    }
                    response, err := service.Update{{ schema.JSONSchema.GoName }}(ctx, request)
                    if err != nil {
                        return nil, common.ToHTTPError(err)
                    }
                    return &ResourceEvent{
                        Kind: resource.Kind,
                        Data: response.{{ schema.JSONSchema.GoName }},
                        Operation: operation,
                    }, nil
            case delete:
                request := &models.Delete{{ schema.JSONSchema.GoName }}Request{
                    ID: model.UUID,
                }
                response, err := service.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
                if err != nil {
                    return nil, common.ToHTTPError(err)
                }
                return &ResourceEvent{
                    Kind: resource.Kind,
                    Data: response.ID,
                    Operation: operation,
                }, nil
        }
    {% endif%}{% endfor %}
    }
    return nil, nil
}

//TODO: improve performance
func toMap(v interface{}) interface{} {
    b, err := json.Marshal(v)
    if err != nil {
        return nil
    }
    var data map[string]interface{}
    err = json.Unmarshal(b, &data)
    if err != nil {
        return nil
    }
    return data
}

func Dump(ctx context.Context, service serviceif.Service) ([]*ResourceEvent, error) {
    response := []*ResourceEvent{}
    {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    list{{ schema.JSONSchema.GoName }}, err := service.List{{ schema.JSONSchema.GoName }}(ctx,
        &models.List{{ schema.JSONSchema.GoName }}Request{
           &models.ListSpec{
               Detail: true,
           },
        },
    )
    if err != nil {
        return nil, common.ToHTTPError(err)
    }
    for _, resource := range list{{ schema.JSONSchema.GoName }}.{{ schema.JSONSchema.GoName }}s {
        response = append(response, &ResourceEvent{
            Kind: "{{ schema.ID }}",
            Data: toMap(resource),
        })
    }
    {% endif %}{% endfor %}
    return response, nil
}

//RegisterRESTAPI register REST API service for path.
// nolint
func (service *ContrailService) RegisterRESTAPI(e *echo.Echo) {
 {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
   e.POST("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTCreate{{ schema.JSONSchema.GoName }})
   e.GET("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTList{{ schema.JSONSchema.GoName }})
   e.PUT("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTUpdate{{ schema.JSONSchema.GoName }})
   e.GET("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTGet{{ schema.JSONSchema.GoName }})
   e.DELETE("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTDelete{{ schema.JSONSchema.GoName }})
{% endif%}{% endfor %}
  e.POST("sync", service.RESTSync)
}
