package services

import (
	"context"
	"strconv"
	"strings"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo"
	"github.com/pkg/errors"

	"github.com/Juniper/contrail/pkg/common"
	"{{ option.PackagePath }}/pkg/models"
	"github.com/Juniper/contrail/pkg/models/basemodels"
	"github.com/Juniper/contrail/pkg/services/baseservices"
)

const (
	SyncPath                 = "sync"
	RefUpdatePath            = "ref-update"
	PropCollectionUpdatePath = "prop-collection-update"
	RefRelaxForDeletePath    = "ref-relax-for-delete"
	SetTagPath               = "set-tag"
	IntPoolPath              = "int-pool/:pool-name"
)

// Chain setup chain of services.
func Chain(services ...Service) {
	if len(services) < 2 {
		return
	}
	previous := services[0]
	for _, current := range services[1:] {
		previous.SetNext(current)
		previous = current
	}
}

// BaseService is a service that is a link in service chain and has implemented
// all Service methods as noops. Can be embedded in struct to create new service.
type BaseService struct {
	next Service
}

// Next gets next service to call in service chain.
func (service *BaseService) Next() Service {
	return service.next
}

// SetNext sets next service in service chain.
func (service *BaseService) SetNext(next Service) {
	service.next = next
}

// InTransactionDoer executes do function atomically.
type InTransactionDoer interface {
	DoInTransaction(ctx context.Context, do func(context.Context) error) error
}

// IntPoolAllocator (de)allocates integers in an integer pool.
type IntPoolAllocator interface {
	AllocateInt(context.Context, string) (int64, error)
	DeallocateInt(context.Context, string, int64) error
	SetInt(context.Context, string, int64) error
}

// RefUpdateToUpdateService is a service that promotes CreateRef and DeleteRef
// methods to Update method by fetching the object and updating reference
// field with fieldmask applied.
type RefUpdateToUpdateService struct {
	BaseService

	ReadService       ReadService
	InTransactionDoer InTransactionDoer
}

//EventProcessor can handle events on generic way.
type EventProcessor interface {
	Process(ctx context.Context, event *Event) (*Event, error)
}

//EventProducerService can dispatch method call for event processor.
type EventProducerService struct {
	BaseService
	Processor EventProcessor
	Timeout   time.Duration
}

//ServiceEventProcessor dispatch event to method call.
type ServiceEventProcessor struct {
	Service Service
}

//Process processes event.
func (p *ServiceEventProcessor) Process(ctx context.Context, event *Event) (*Event, error) {
	return event.Process(ctx, p.Service)
}

// ContrailService implementation.
type ContrailService struct {
	BaseService

	MetadataGetter baseservices.MetadataGetter
	TypeValidator  *models.TypeValidator
	InTransactionDoer InTransactionDoer
	IntPoolAllocator IntPoolAllocator
}

// RESTSync handles Sync API request.
func (service *ContrailService) RESTSync(c echo.Context) error {
	events := &EventList{}
	if err := c.Bind(events); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("invalid JSON format: %v", err))
	}

	// TODO: Call events.Sort()

	responses, err := events.Process(c.Request().Context(), service)
	if err != nil {
		return common.ToHTTPError(err)
	}
	return c.JSON(http.StatusOK, responses.Events)
}

// RefOperation is enum type for ref-update operation.
type RefOperation string

// RefOperation values.
const (
	RefOperationAdd    RefOperation = "ADD"
	RefOperationDelete RefOperation = "DELETE"
)

// RefUpdate represents ref-update input data.
type RefUpdate struct {
	Operation RefOperation    `json:"operation"`
	Type      string          `json:"type"`
	UUID      string          `json:"uuid"`
	RefType   string          `json:"ref-type"`
	RefUUID   string          `json:"ref-uuid"`
	RefFQName []string        `json:"ref-fq-name"`
	Attr      json.RawMessage `json:"attr"`
}

func (r *RefUpdate) validate() error {
	if r.UUID == "" || r.Type == "" || r.RefType == "" || r.Operation == "" {
		return common.ErrorBadRequestf(
			"uuid/type/ref-type/operation is null: %s, %s, %s, %s",
			r.UUID, r.Type, r.RefType, r.Operation,
		)
	}

	if r.Operation != RefOperationAdd && r.Operation != RefOperationDelete {
		return common.ErrorBadRequestf("operation should be ADD or DELETE, was %s", r.Operation)
	}

	return nil
}

// RESTRefUpdate handles a ref-update request.
func (service *ContrailService) RESTRefUpdate(c echo.Context) error {
	var data RefUpdate
	if err := c.Bind(&data); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "invalid JSON format")
	}

	if err := data.validate(); err != nil {
		return common.ToHTTPError(err)
	}

	ctx := c.Request().Context()
	if data.RefUUID == "" {
		m, err := service.MetadataGetter.GetMetadata(ctx, basemodels.Metadata{Type: data.RefType, FQName: data.RefFQName})
		if err != nil {
			return common.ToHTTPError(common.ErrorBadRequestf("error resolving ref-uuid using ref-fq-name: %v", err))
		}
		data.RefUUID = m.UUID
	}

	e, err := NewEventFromRefUpdate(&data)
	if err != nil {
		return common.ToHTTPError(common.ErrorBadRequest(err.Error()))
	}
	if _, err = e.Process(ctx, service); err != nil {
		return common.ToHTTPError(err)
	}

	return c.JSON(http.StatusOK, map[string]interface{}{"uuid": data.UUID})
}

// RefRelax represents ref-relax-for-delete input data.
type RefRelax struct {
	UUID    string `json:"uuid"`
	RefUUID string `json:"ref-uuid"`
}

func (r *RefRelax) validate() error {
	if r.UUID == "" || r.RefUUID == "" {
		return common.ErrorBadRequestf(
			"bad request: both uuid and ref-uuid should be specified: %s, %s", r.UUID, r.RefUUID)
	}

	return nil
}

// RESTRefRelaxForDelete handles a ref-relax-for-delete request.
func (service *ContrailService) RESTRefRelaxForDelete(c echo.Context) error {
	var data RefRelax
	if err := c.Bind(&data); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "invalid JSON format")
	}

	if err := data.validate(); err != nil {
		return common.ToHTTPError(err)
	}

	// TODO (Kamil): implement ref-relax logic

	return c.JSON(http.StatusOK, map[string]interface{}{"uuid": data.UUID})
}

// PropCollectionUpdateRequest is input request for /prop-collection-update endpoint.
type PropCollectionUpdateRequest struct {
	UUID    string                            `json:"uuid"`
	Updates []basemodels.PropCollectionUpdate `json:"updates"`
}

func (p *PropCollectionUpdateRequest) validate() error {
	if p.UUID == "" {
		return common.ErrorBadRequest("prop-collection-update needs object UUID")
	}
	return nil
}

// RESTPropCollectionUpdate handles a prop-collection-update request.
func (service *ContrailService) RESTPropCollectionUpdate(c echo.Context) error {
	var data PropCollectionUpdateRequest
	if err := c.Bind(&data); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "invalid JSON format")
	}

	if err := data.validate(); err != nil {
		return common.ToHTTPError(err)
	}

	if err := service.updatePropCollection(c.Request().Context(), &data); err != nil {
		return err
	}

	return c.NoContent(http.StatusOK)
}

func (service *ContrailService) updatePropCollection(
	ctx context.Context,
	data *PropCollectionUpdateRequest,
) error {
	err := service.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		m, err := service.MetadataGetter.GetMetadata(ctx, basemodels.Metadata{UUID: data.UUID})
		if err != nil {
			return errors.Wrap(err, "error getting metadata for provided UUID: %v")
		}

		o, err := GetObject(ctx, service.Next(), m.Type, data.UUID)
		if err != nil {
			return errors.Wrapf(err, "error getting %v with UUID = %v", m.Type, data.UUID)
		}

		updateMap, err := createUpdateMap(o, data.Updates)
		if err != nil {
			return common.ErrorBadRequest(err.Error())
		}

		e, err := NewEvent(&EventOption{
			Data:      updateMap,
			Kind:      m.Type,
			UUID:      data.UUID,
			Operation: OperationUpdate,
		})
		if err != nil {
			return err
		}

		_, err = e.Process(ctx, service)
		return err
	})
	if err != nil {
		return common.ToHTTPError(err)
	}
	return nil
}

func createUpdateMap(
	object basemodels.Object, updates []basemodels.PropCollectionUpdate,
) (map[string]interface{}, error) {
	updateMap := map[string]interface{}{}
	for _, update := range updates {
		updated, err := object.ApplyPropCollectionUpdate(&update)
		if err != nil {
			return nil, err
		}
		for key, value := range updated {
			updateMap[key] = value
		}
	}
	return updateMap, nil
}

//TagAttr is a part of set-tag input data. TODO: Investigate it
type TagAttr struct {
	IsGlobal bool   `json:"is_global"`
	Value    string `json:"value"`
}

// SetTag represents set-tag input data.
type SetTag struct {
	ObjUUID string          `json:"obj_uuid"`
	ObjType string          `json:"obj_type"`
	Tags    map[string]TagAttr
}

func (t *SetTag) validate() error {
	if t.ObjUUID == "" || t.ObjType == "" {
		return common.ErrorBadRequestf(
			"both obj_uuid and obj_type should be specified but got uuid: '%s' and type: '%s",
			t.ObjUUID, t.ObjType,
		)
	}
	//TODO additional validation
	return nil
}

// RESTSetTag handles set-tag request.
func (service *ContrailService) RESTSetTag(c echo.Context) error {
	var data SetTag

	if err := c.Bind(&data); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "invalid JSON format")
	}

	if err := data.validate(); err != nil {
		return common.ToHTTPError(err)
	}

	// TODO (Ignacy): implement set-tag logic

	return c.JSON(http.StatusOK, map[string]interface{}{})
}

// RESTIntPool handles a POST on int-pool/:pool-name/:value and int-pool/:pool-name request.
// TODO(Michal): gRPC endpoint
func (service *ContrailService) RESTIntPoolAllocate(c echo.Context) error {
	ctx := c.Request().Context()
	auth := common.GetAuthCTX(ctx)
	if !auth.IsAdmin() {
		return common.ToHTTPError(common.ErrorPermissionDenied)
	}
	pool := c.Param("pool-name")
	v := c.Param("value")
	var i64 int64
	var err error
	if v == "" {
		i64, err = service.allocateNextInt(ctx, pool)
		if err != nil {
			return err
		}
	} else {
		i, err := strconv.Atoi(v)
		if err != nil {
			return common.ErrorBadRequestf("Invalid int to allocate (%v): %s", v, err.Error())
		}
		i64 = int64(i)
		if err = service.allocateInt(ctx, pool, i64); err != nil {
			return err
		}
	}

	return c.JSON(http.StatusOK, map[string]interface{}{"value": i64})
}

func (service *ContrailService) allocateNextInt(ctx context.Context, poolID string) (int64, error) {
	var v int64
	err := service.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		var err error
		v, err = service.IntPoolAllocator.AllocateInt(ctx, poolID)
		if err != nil {
			return common.ErrorBadRequestf("Failed to allocate next int: %s", err.Error())
		}
		return nil
	})
	if err != nil {
		return 0, common.ToHTTPError(err)
	}
	return v, nil
}

func (service *ContrailService) allocateInt(ctx context.Context, poolID string, i64 int64) error {
	err := service.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		var err error
		err = service.IntPoolAllocator.SetInt(ctx, poolID, i64)
		if err != nil {
			return common.ErrorBadRequestf("Failed to allocate specified int: ", err.Error())
		}
		return nil
	})
	if err != nil {
		return common.ToHTTPError(err)
	}
	return nil
}

// RESTIntPoolDeallocate handles a DELETE on int-pool/:pool-name/:value request.
// TODO(Michal): gRPC endpoint
func (service *ContrailService) RESTIntPoolDeallocate(c echo.Context) error {
	ctx := c.Request().Context()
	auth := common.GetAuthCTX(ctx)
	if !auth.IsAdmin() {
		return common.ToHTTPError(common.ErrorPermissionDenied)
	}
	pool := c.Param("pool-name")
	v := c.Param("value")
	i, err := strconv.Atoi(v)
	if err != nil {
		return common.ErrorBadRequest("Invalid int value to deallocate")
	}

	err = service.deallocateInt(ctx, pool, int64(i))
	if err != nil {
		return err
	}

	return c.NoContent(http.StatusOK)
}

func (service *ContrailService) deallocateInt(ctx context.Context, poolID string, i64 int64) error {
	err := service.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		var err error
		err = service.IntPoolAllocator.DeallocateInt(ctx, poolID, i64)
		if err != nil {
			return common.ErrorBadRequest(err.Error())
		}
		return nil
	})
	if err != nil {
		return common.ToHTTPError(err)
	}
	return nil
}

type routeRegistry interface {
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

//RegisterRESTAPI register REST API service for path.
func (service *ContrailService) RegisterRESTAPI(r routeRegistry) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	r.POST("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTCreate{{ schema.JSONSchema.GoName }})
	r.GET("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTList{{ schema.JSONSchema.GoName }})
	r.PUT("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTUpdate{{ schema.JSONSchema.GoName }})
	r.GET("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTGet{{ schema.JSONSchema.GoName }})
	r.DELETE("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTDelete{{ schema.JSONSchema.GoName }})
{% endif%}{% endfor %}

	r.POST(SyncPath, service.RESTSync)
	r.POST(RefUpdatePath, service.RESTRefUpdate)
	r.POST(RefRelaxForDeletePath, service.RESTRefRelaxForDelete)
	r.POST(PropCollectionUpdatePath, service.RESTPropCollectionUpdate)
	r.POST(SetTagPath, service.RESTSetTag)
	r.POST(IntPoolPath, service.RESTIntPoolAllocate)
	r.POST(IntPoolPath + "/:value", service.RESTIntPoolAllocate)
	r.DELETE(IntPoolPath + "/:value", service.RESTIntPoolDeallocate)
	// TODO: Handle gRPC "set-tag" endpoint
}

type registerFunc func(path string, name string)

//RegisterSingularPaths registers singular paths of resources for discovery.
func RegisterSingularPaths (register registerFunc) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	register("{{ schema.Prefix }}{{ schema.Path }}", "{{ schema.Path }}")
{% endif %}{% endfor %}
}

// RegisterPluralPaths registers plural paths of resources for discovery.
func RegisterPluralPaths (register registerFunc) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	register("{{ schema.Prefix }}{{ schema.PluralPath }}", "{{ schema.Path }}")
{% endif %}{% endfor %}
}

// GetObject retrieves object dynamically from ReadService by its schema ID and UUID.
func GetObject(ctx context.Context, rs ReadService, typeName, uuid string) (basemodels.Object, error) {
	return getObject(ctx, rs, typeName, uuid)
}

func getObject(ctx context.Context, rs ReadService, typeName, uuid string) (basemodels.Object, error) {
	kind := strings.Replace(typeName, "_", "-", -1)
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	case "{{ schema.TypeName }}":
		resp, err := rs.Get{{ schema.JSONSchema.GoName }}(ctx, &Get{{ schema.JSONSchema.GoName }}Request{ID: uuid})
		return resp.Get{{ schema.JSONSchema.GoName }}(), err
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("unknown type provided: %v", kind)
}
