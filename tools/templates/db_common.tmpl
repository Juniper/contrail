package db

import (
    "context"

    "github.com/Juniper/contrail/pkg/models"
)

func (db *DB) initQueryBuilders() {
    queryBuilders := map[string]*QueryBuilder{}
    db.queryBuilders = queryBuilders

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    queryBuilders["{{ schema.ID }}"] = NewQueryBuilder(db.Dialect,
       "{{ schema.ID | lower }}", {{ schema.JSONSchema.GoName }}Fields,
       {{ schema.JSONSchema.GoName }}RefFields,
       {{ schema.JSONSchema.GoName }}BackRefFields)
{% endif%}{% endfor %}
}


func (db *DB) dump(ctx context.Context, rw RowWriter) error {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    list{{ schema.JSONSchema.GoName }}Request := &models.List{{ schema.JSONSchema.GoName }}Request{&models.ListSpec{}}
    list{{ schema.JSONSchema.GoName }}Response, err := db.list{{ schema.JSONSchema.GoName }}(
        ctx,
        list{{ schema.JSONSchema.GoName }}Request,
    )
    if err != nil {
        return err
    }

    for _, item := range list{{ schema.JSONSchema.GoName }}Response.{{ schema.JSONSchema.GoName }}s {
        if err = rw.WriteRow("{{ schema.ID }}", item.GetUUID(), item); err != nil {
            return err
        }
    }
{% endif%}{% endfor %}

    return nil
}
