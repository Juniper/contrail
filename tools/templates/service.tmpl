package services

import (
    "context"
    "net/http"
    "github.com/Juniper/contrail/pkg/models"
    "github.com/satori/go.uuid"
    "github.com/labstack/echo"
    "github.com/Juniper/contrail/pkg/common"

	log "github.com/sirupsen/logrus"
)

type RESTUpdate{{ schema.JSONSchema.GoName }}Request struct{
    {{ schema.JSONSchema.GoName }} map[string]interface{} `json:"{{ schema.Path }}"`
}

//RESTCreate{{ schema.JSONSchema.GoName }} handle a Create REST service.
// nolint
func (service *ContrailService) RESTCreate{{ schema.JSONSchema.GoName }}(c echo.Context) error {
    requestData := &models.Create{{ schema.JSONSchema.GoName }}Request{
    }
    if err := c.Bind(requestData); err != nil {
        log.WithFields(log.Fields{
            "err": err,
            "resource": "{{ schema.ID }}",
        }).Debug("bind failed on create")
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid JSON format")
	}
    ctx := c.Request().Context()
    response, err := service.Create{{ schema.JSONSchema.GoName }}(ctx, requestData)
    if err != nil {
        return common.ToHTTPError(err)
    }
    return c.JSON(http.StatusCreated, response)
}

//Create{{ schema.JSONSchema.GoName }} handle a Create API
// nolint
func (service *ContrailService) Create{{ schema.JSONSchema.GoName }}(
    ctx context.Context,
    request *models.Create{{ schema.JSONSchema.GoName }}Request) (*models.Create{{ schema.JSONSchema.GoName }}Response, error) {
    model := request.{{ schema.JSONSchema.GoName }}
    if model.UUID == "" {
        model.UUID = uuid.NewV4().String()
    }
    auth := common.GetAuthCTX(ctx)
    if auth == nil {
        return nil, common.ErrorUnauthenticated
    }

    if model.FQName == nil {
        if model.DisplayName != "" {
            model.FQName = []string{auth.DomainID(), auth.ProjectID(), model.DisplayName}
        } else {
            model.FQName = []string{auth.DomainID(), auth.ProjectID(), model.UUID}
        }
    }
    model.Perms2 = &models.PermType2{}
    model.Perms2.Owner = auth.ProjectID()

    return service.Next().Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

//RESTUpdate{{ schema.JSONSchema.GoName }} handles a REST Update request.
// nolint
func (service *ContrailService) RESTUpdate{{ schema.JSONSchema.GoName }}(c echo.Context) error {
    id := c.Param("id")
    request := &RESTUpdate{{ schema.JSONSchema.GoName }}Request{}
    if err := c.Bind(request); err != nil {
            log.WithFields(log.Fields{
                "err": err,
                "resource": "{{ schema.ID }}",
            }).Debug("bind failed on update")
            return echo.NewHTTPError(http.StatusBadRequest, "Invalid JSON format")
    }
    ctx := c.Request().Context()
    model := models.InterfaceTo{{ schema.JSONSchema.GoName }}(request.{{ schema.JSONSchema.GoName }})
    model.UUID = id
    response, err := service.Update{{ schema.JSONSchema.GoName }}(ctx, &models.Update{{ schema.JSONSchema.GoName }}Request{
        {{ schema.JSONSchema.GoName }}: models.InterfaceTo{{ schema.JSONSchema.GoName }}(request.{{ schema.JSONSchema.GoName }}),
        FieldMask: MapToFieldMask(request.{{ schema.JSONSchema.GoName }}),
    })
    if err != nil {
        return common.ToHTTPError(err)
    }
    return c.JSON(http.StatusOK, response)
}

//Update{{ schema.JSONSchema.GoName }} handles a Update request.
// nolint
func (service *ContrailService) Update{{ schema.JSONSchema.GoName }}(
    ctx context.Context,
    request *models.Update{{ schema.JSONSchema.GoName }}Request) (*models.Update{{ schema.JSONSchema.GoName }}Response, error) {
    model := request.{{ schema.JSONSchema.GoName }}
    if model == nil {
        return nil, common.ErrorBadRequest("Update body is empty")
    }
    return service.Next().Update{{ schema.JSONSchema.GoName }}(ctx, request)
}

//RESTDelete{{ schema.JSONSchema.GoName }} delete a resource using REST service.
// nolint
func (service *ContrailService) RESTDelete{{ schema.JSONSchema.GoName }}(c echo.Context) error {
    id := c.Param("id")
    request := &models.Delete{{ schema.JSONSchema.GoName }}Request{
        ID: id,
    }
    ctx := c.Request().Context()
    _, err := service.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        return common.ToHTTPError(err)
    }
    return c.JSON(http.StatusNoContent, nil)
}


//RESTGet{{ schema.JSONSchema.GoName }} a REST Get request.
// nolint
func (service *ContrailService) RESTGet{{ schema.JSONSchema.GoName }}(c echo.Context) (error) {
    id := c.Param("id")
    request := &models.Get{{ schema.JSONSchema.GoName }}Request{
        ID: id,
    }
    ctx := c.Request().Context()
    response, err := service.Get{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        return common.ToHTTPError(err)
    }
    return c.JSON(http.StatusOK, response)
}

//RESTList{{ schema.JSONSchema.GoName }} handles a List REST service Request.
// nolint
func (service *ContrailService) RESTList{{ schema.JSONSchema.GoName }}(c echo.Context) (error) {
    var err error
    spec := models.GetListSpec(c)
    request := &models.List{{ schema.JSONSchema.GoName }}Request{
        Spec: spec,
    }
    ctx := c.Request().Context()
    response, err := service.List{{ schema.JSONSchema.GoName }}(ctx, request)
    if err != nil {
        return common.ToHTTPError(err)
    }
    return c.JSON(http.StatusOK, response)
}