SET GLOBAL group_concat_max_len=100000;

create table metadata (
    `uuid` varchar(255),
    `type` varchar(255),
    `fq_name` varchar(255),
    primary key (`uuid`),
    UNIQUE(`type`, `fq_name`),
    index fq_name_index (`fq_name`)
 ) CHARACTER SET utf8mb4;

create table int_pool (
    `key` varchar(255),
    `start` int,
    `end` int
);

create table int_pool_owner (
	`key` varchar(255),
	`value` int,
	`owner` varchar(255) DEFAULT ""
);

insert into int_pool (`key`, `start`, `end`) values ("virtual_network_id", 5, 65535);
insert into int_pool (`key`, `start`, `end`) values ("security_group_id", 1, 65535);
insert into int_pool (`key`, `start`, `end`) values ("tag_id", 2, 65535);
insert into int_pool (`key`, `start`, `end`) values ("tag_type_id", 255, 65535);

insert into int_pool_owner (`key`, `value`) values ("virtual_network_id", 5);
insert into int_pool_owner (`key`, `value`) values ("security_group_id", 1);
insert into int_pool_owner (`key`, `value`) values ("tag_id", 2);
insert into int_pool_owner (`key`, `value`) values ("tag_type_id", 255);

-- TODO check range
insert into int_pool (`key`, `start`, `end`) values ("route_target_number", 8000100, 8010002);
insert into int_pool_owner (`key`, `value`) values ("route_target_number", 8000100);

create table ipaddress_pool (
    `key` varchar(255),
    `start` binary(16),
    `end` binary(16)
);

create table kv_store (
	`key` varchar(255),
	`value` varchar(255),
	primary key (`key`)
);

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
create table {{ schema.Table  }} (
    {% for column in schema.Columns %}`{{column.Column}}` {{column.JSONSchema.SQL}},
    {% endfor %} primary key(`uuid`),
    index parent_uuid_index (`parent_uuid`)
    ) CHARACTER SET utf8mb4;
{% endif %}
{% endfor %}
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
{% for _, reference in schema.References %}

create table {{ reference.Table }} (
    `from` varchar(255),
    `to` varchar(255),
    primary key (`from`,`to`),
    `relaxed` boolean,
    {%- for column in reference.Columns %}
    `{{column.Column}}` {{column.JSONSchema.SQL}},
    {%- endfor %}
    foreign key (`from`) references {{ schema.Table  }}(uuid) on delete cascade,
    foreign key (`to`) references {{ reference.LinkTo.Table  }}(uuid)
    {%- if reference.Derived == true %} on delete cascade{% endif %},
    index from_index (`from`)) CHARACTER SET utf8mb4;
{% endfor %}

{% for _, reference in schema.Parents %}
create table {{ reference.Table }} (
    `from` varchar(255),
    `to` varchar(255),
    primary key (`from`,`to`),
    foreign key (`from`) references {{ schema.Table  }}(uuid) on delete cascade,
    foreign key (`to`) references {{ reference.LinkTo.Table }}(uuid)
    {%- if reference.Derived == true %} on delete cascade{% endif %},
    index from_index (`from`)) CHARACTER SET utf8mb4;
{% endfor %}

create table tenant_share_{{ schema.Table  }} (
    `uuid` varchar(255),
    `to` varchar(255),
    primary key (`uuid`,`to`),
    `access` integer,
    foreign key (`uuid`) references {{ schema.Table }}(uuid) on delete cascade,
    foreign key (`to`) references project(uuid) on delete cascade,
    index uuid_index (`uuid`),
    index to_index (`to`)
    ) CHARACTER SET utf8mb4;

create table domain_share_{{ schema.Table  }} (
    `uuid` varchar(255),
    `to` varchar(255),
    primary key (`uuid`,`to`),
    `access` integer,
    foreign key (`uuid`) references {{ schema.Table  }}(uuid) on delete cascade,
    foreign key (`to`) references domain(uuid) on delete cascade,
    index uuid_index (`uuid`),
    index to_index (`to`)
    ) CHARACTER SET utf8mb4;

{% endif %}
{% endfor %}
