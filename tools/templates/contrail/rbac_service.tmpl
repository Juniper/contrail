package services

import (
	"context"

	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/apisrv/rbac"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func (sv *RBACService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {

        model := models.{{ schema.JSONSchema.GoName }}{}
    	if err := rbac.CheckPermissions(ctx,sv.getAllAPIAccessLists(ctx),
                       model.Kind(),rbac.ActionCreate) ; err != nil {
       			return nil,err
    	}
	return sv.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *RBACService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
	
        model := models.{{ schema.JSONSchema.GoName }}{}
	if err := rbac.CheckPermissions(ctx,sv.getAllAPIAccessLists(ctx),
                       model.Kind(),rbac.ActionUpdate); err != nil {
       		return nil,err
    	}

	return sv.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *RBACService) Delete{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Delete{{ schema.JSONSchema.GoName }}Request,
) (*Delete{{ schema.JSONSchema.GoName }}Response, error) {
	
	model := models.{{ schema.JSONSchema.GoName }}{}
	if err := rbac.CheckPermissions(ctx,sv.getAllAPIAccessLists(ctx),
                       model.Kind(),rbac.ActionDelete); err != nil {
       		return nil,err
    	}
	return sv.BaseService.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *RBACService) Get{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Get{{ schema.JSONSchema.GoName }}Request,
) (*Get{{ schema.JSONSchema.GoName }}Response, error) {
	
	model := models.{{ schema.JSONSchema.GoName }}{}
	if err := rbac.CheckPermissions(ctx,sv.getAllAPIAccessLists(ctx),
                       model.Kind(),rbac.ActionRead); err != nil {
       		return nil,err
    	}
	return sv.BaseService.Get{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *RBACService) List{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *List{{ schema.JSONSchema.GoName }}Request,
) (*List{{ schema.JSONSchema.GoName }}Response, error) {
	
	model := models.{{ schema.JSONSchema.GoName }}{}
	if err := rbac.CheckPermissions(ctx,sv.getAllAPIAccessLists(ctx),
                       model.Kind(),rbac.ActionRead); err != nil {
       		return nil,err
    	}
	return sv.BaseService.List{{ schema.JSONSchema.GoName }}(ctx, request)
}
{% endif %}{% endfor %}
