package services

import (
	"context"
	"fmt"
	"encoding/json"
	"strings"

	"github.com/pkg/errors"

	"github.com/Juniper/contrail/pkg/errutil"
	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/models/basemodels"
)

//RegisterRESTAPI register REST API service for path.
func (service *ContrailService) RegisterRESTAPI(r routeRegistry) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	r.POST("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTCreate{{ schema.JSONSchema.GoName }})
	r.GET("{{ schema.Prefix }}{{ schema.PluralPath }}", service.RESTList{{ schema.JSONSchema.GoName }})
	r.PUT("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTUpdate{{ schema.JSONSchema.GoName }})
	r.GET("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTGet{{ schema.JSONSchema.GoName }})
	r.DELETE("{{ schema.Prefix }}{{ schema.Path }}/:id", service.RESTDelete{{ schema.JSONSchema.GoName }})
{% endif%}{% endfor %}

	r.POST(SyncPath, service.RESTSync)
	r.POST(RefUpdatePath, service.RESTRefUpdate)
	r.POST(RefRelaxForDeletePath, service.RESTRefRelaxForDelete)
	r.POST(PropCollectionUpdatePath, service.RESTPropCollectionUpdate)
	r.POST(SetTagPath, service.RESTSetTag)
	r.POST(ChownPath, service.RESTChown)
	r.POST(IntPoolPath, service.RESTIntPoolAllocate)
	r.DELETE(IntPoolPath, service.RESTIntPoolDeallocate)
	r.POST(IntPoolsPath, service.RESTCreateIntPool)
	r.DELETE(IntPoolsPath, service.RESTDeleteIntPool)
}

type registerFunc func(path string, name string)

//RegisterSingularPaths registers singular paths of resources for discovery.
func RegisterSingularPaths (register registerFunc) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	register("{{ schema.Prefix }}{{ schema.Path }}", "{{ schema.Path }}")
{% endif %}{% endfor %}
}

// RegisterPluralPaths registers plural paths of resources for discovery.
func RegisterPluralPaths (register registerFunc) {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	register("{{ schema.Prefix }}{{ schema.PluralPath }}", "{{ schema.Path }}")
{% endif %}{% endfor %}
}

// GetObject retrieves object dynamically from ReadService by its schema ID and UUID.
func GetObject(ctx context.Context, rs ReadService, typeName, uuid string) (basemodels.Object, error) {
	return getObject(ctx, rs, typeName, uuid)
}

func getObject(ctx context.Context, rs ReadService, typeName, uuid string) (basemodels.Object, error) {
	kind := strings.Replace(typeName, "_", "-", -1)
	switch kind {
		{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	case "{{ schema.TypeName }}":
		resp, err := rs.Get{{ schema.JSONSchema.GoName }}(ctx, &Get{{ schema.JSONSchema.GoName }}Request{ID: uuid})
		return resp.Get{{ schema.JSONSchema.GoName }}(), err
		{% endif %}{% endfor %}
	}
	return nil, errors.Errorf("unknown type provided: %v", kind)
}


func (c *PropCollectionChange) SetValue(v interface{}) {
	switch t := v.(type) {
	{% for type, definition in types %}{% if definition.CollectionType == "map" or definition.CollectionType == "list" %}
	{%- set collectionType = definition.OrderedProperties | first %}{% set itemType = collectionType.Items.ProtoType %}
	case {% if itemType != "string" %}*models.{% endif %}{{ itemType }}:
		c.Value = &PropCollectionChange_{{itemType | capfirst}}Value{t}
	{% endif %}{% endfor %}
	}
}

func (v *PropCollectionChange) UnmarshalJSON(b []byte) error {
	fmt.Printf("%+v %T\n", v.Value, v.Value)
	switch c := v.Value.(type) {
{% for type, definition in types %}{% if definition.CollectionType == "map" or definition.CollectionType == "list" %}
{%- set collectionType = definition.OrderedProperties | first %}{% set itemType = collectionType.Items.ProtoType %}
	case *PropCollectionChange_{{itemType | capfirst}}Value:
		return json.Unmarshal(b, &c.{{itemType | capfirst}}Value)
{% endif %}{% endfor %}
	default:
		return errutil.ErrorBadRequestf("bad collection type: %T", c)
	}
}
