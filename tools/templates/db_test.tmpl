package db

import ("fmt"
        "testing"
        "database/sql"

        "github.com/Juniper/contrail/pkg/common"
        "github.com/Juniper/contrail/pkg/generated/models")

func Test{{ schema.JSONSchema.GoName }}(t *testing.T) {
    t.Parallel()
    db := testDB
    common.UseTable(db, "metadata")
    common.UseTable(db, "{{ schema.ID }}")
    defer func(){
        common.ClearTable(db, "{{ schema.ID }}")
        common.ClearTable(db, "metadata")
        if p := recover(); p != nil {
			panic(p)
		}
    }()
    model := models.Make{{ schema.JSONSchema.GoName }}()
    model.UUID = "{{ schema.ID }}_dummy_uuid"
    model.FQName = []string{"default", "default-domain", "{{ schema.ID }}_dummy"}
    model.Perms2.Owner = "admin"
    updateMap := map[string]interface{}{}
    {% for column in schema.Columns %}
        {% if column.Bind == "json" %}
            common.SetValueByPath(updateMap, "{{ column.Path }}", ".", `{"test":"test"}`)
        {% elif column.Bind == "int" %}
            common.SetValueByPath(updateMap, "{{ column.Path }}", ".", 1.0)
        {% elif column.Bind == "bool" %}
             common.SetValueByPath(updateMap, "{{ column.Path }}", ".", true)
        {% elif column.Bind == "string" %}
             common.SetValueByPath(updateMap, "{{ column.Path }}", ".", "test")
        {% else %}
            common.SetValueByPath(updateMap, "{{ column.Path }}", ".", "test")
        {% endif %}
    {% endfor %}
    common.SetValueByPath(updateMap, "uuid", ".", "{{ schema.ID }}_dummy_uuid")

    common.SetValueByPath(updateMap, "fq_name", ".", []string{"default", "default-domain", "access_control_list_dummy"})

    common.SetValueByPath(updateMap, "perms2.owner", ".", "admin")

    err := common.DoInTransaction(db, func (tx *sql.Tx) error {
        return Create{{ schema.JSONSchema.GoName }}(tx, model)
    })
    if err != nil {
        t.Fatal("create failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        return Update{{ schema.JSONSchema.GoName }}(tx, model.UUID, updateMap)
    })
    if err != nil {
        t.Fatal("update failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        models, err := List{{ schema.JSONSchema.GoName }}(tx, &common.ListSpec{Limit: 1})
        if err != nil {
            return err
        }
        if len(models) != 1 {
            return fmt.Errorf("expected one element")
        }
        return nil
    })
    if err != nil {
        t.Fatal("list failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        return Delete{{ schema.JSONSchema.GoName }}(tx, model.UUID, 
            common.NewAuthContext("default", "demo", "demo", []string{}), 
        )
    })
    if err == nil {
        t.Fatal("auth failed")
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        return Delete{{ schema.JSONSchema.GoName }}(tx, model.UUID, nil)
    })
    if err != nil {
        t.Fatal("delete failed", err)
    }

    err = common.DoInTransaction(db, func (tx *sql.Tx) error {
        models, err := List{{ schema.JSONSchema.GoName }}(tx, &common.ListSpec{Limit: 1})
        if err != nil {
            return err
        }
        if len(models) != 0 {
            return fmt.Errorf("expected no element")
        }
        return nil
    })
    if err != nil {
        t.Fatal("list failed", err)
    }
    return
}
