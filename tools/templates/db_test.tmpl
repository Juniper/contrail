// nolint
package db

import (
        "context"
        "time"
        "testing"
        "github.com/stretchr/testify/assert"
        "github.com/satori/go.uuid"
        "github.com/gogo/protobuf/types"
        "github.com/Juniper/contrail/pkg/common"
        "github.com/Juniper/contrail/pkg/models"
        "github.com/Juniper/contrail/pkg/services"
        "github.com/pkg/errors"
        )

//For skip import error.
var _ = errors.New("")

func Test{{ schema.JSONSchema.GoName }}(t *testing.T) {
    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

    model := models.Make{{ schema.JSONSchema.GoName }}()
    model.UUID = uuid.NewV4().String()
    model.FQName = []string{"default", "default-domain", model.UUID}
    model.Perms2.Owner = "admin"
    var err error

    // Create referred objects
    {% for linkTo, reference in schema.References %}
    var {{ reference.GoName }}CreateRef []*models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref
    var {{ reference.GoName }}RefModel *models.{{ reference.GoName }}

    {{ reference.GoName }}RefUUID := uuid.NewV4().String()
    {{ reference.GoName }}RefUUID1 := uuid.NewV4().String()
    {{ reference.GoName }}RefUUID2 := uuid.NewV4().String()

    {{ reference.GoName }}RefModel = models.Make{{ reference.GoName }}()
	{{ reference.GoName }}RefModel.UUID = {{ reference.GoName }}RefUUID
    {{ reference.GoName }}RefModel.FQName = []string{"test", {{ reference.GoName }}RefUUID}
    _, err = db.Create{{ reference.GoName }}(ctx, &services.Create{{ reference.GoName }}Request{
            {{ reference.GoName }}: {{ reference.GoName }}RefModel,
    })
    assert.NoError(t, err, "Create reference object failed")
    {{ reference.GoName }}RefModel.UUID = {{ reference.GoName }}RefUUID1
    {{ reference.GoName }}RefModel.FQName = []string{"test", {{ reference.GoName }}RefUUID1}
    _, err = db.Create{{ reference.GoName }}(ctx, &services.Create{{ reference.GoName }}Request{
            {{ reference.GoName }}: {{ reference.GoName }}RefModel,
    })
    assert.NoError(t, err, "Create reference object failed")
    {{ reference.GoName }}RefModel.UUID = {{ reference.GoName }}RefUUID2
    {{ reference.GoName }}RefModel.FQName = []string{"test", {{ reference.GoName }}RefUUID2}
    _, err = db.Create{{ reference.GoName }}(ctx, &services.Create{{ reference.GoName }}Request{
            {{ reference.GoName }}: {{ reference.GoName }}RefModel,
    })
    assert.NoError(t, err, "Create reference object failed")
    {{ reference.GoName }}CreateRef = append({{ reference.GoName }}CreateRef,
        &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{UUID: {{ reference.GoName }}RefUUID, To: []string{"test", {{ reference.GoName }}RefUUID}})
    {{ reference.GoName }}CreateRef = append({{ reference.GoName }}CreateRef,
        &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{UUID: {{ reference.GoName }}RefUUID2, To: []string{"test", {{ reference.GoName }}RefUUID2}})
    model.{{ reference.GoName }}Refs = {{ reference.GoName }}CreateRef
    {% endfor %}

    //create project to which resource is shared
    projectModel := models.MakeProject()
    projectModel.UUID = uuid.NewV4().String()
    projectModel.FQName = []string{"defualt-domain-test", projectModel.UUID}
    projectModel.Perms2.Owner = "admin"

    var createShare []*models.ShareType
    createShare = append(createShare, &models.ShareType{Tenant:"tenant:" + projectModel.UUID, TenantAccess:7})
    model.Perms2.Share = createShare

    _, err = db.CreateProject(ctx, &services.CreateProjectRequest{
        Project: projectModel,
    })
    assert.NoError(t, err, "Create project object failed")

    _, err = db.Create{{ schema.JSONSchema.GoName }}(ctx,
            &services.Create{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model,
    })

    assert.NoError(t, err, "Create object failed")

    response, err := db.List{{ schema.JSONSchema.GoName }}(ctx, &services.List{{ schema.JSONSchema.GoName }}Request{
            Spec: &services.ListSpec{Limit: 1,
                    Filters: []*services.Filter{
                        &services.Filter{
                            Key: "uuid",
                            Values: []string{model.UUID},
                        },
                    },
            }})
    assert.NoError(t, err, "list failed")
    assert.Equal(t, 1, len(response.{{ schema.JSONSchema.GoName }}s), "expected one element")

    model.DisplayName = "updated"
    {% for linkTo, reference in schema.References %}
    model.{{ reference.GoName }}Refs = []*models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{
        &models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref{
                UUID: {{ reference.GoName }}RefUUID1,
                To: []string{"test", {{ reference.GoName }}RefUUID1}},
    }
    {% endfor %}

    _, err = db.Update{{ schema.JSONSchema.GoName }}(ctx,
            &services.Update{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model,
                FieldMask: types.FieldMask{
                    Paths: []string{
                        "display_name",
                    {% for linkTo, reference in schema.References %}
                        "{{ linkTo | lower }}_refs",
                    {% endfor %}
                    },
                },
    })
    assert.NoError(t, err, "updated failed")

    getResponse, err := db.Get{{ schema.JSONSchema.GoName }}(ctx, &services.Get{{ schema.JSONSchema.GoName }}Request{
            ID: model.UUID})
    updatedModel := getResponse.{{ schema.JSONSchema.GoName }}
    assert.NoError(t, err, "get response failed")
    assert.Equal(t, model.DisplayName, updatedModel.DisplayName, "update failed")

    {% for linkTo, reference in schema.References %}
    assert.Equal(t, {{ reference.GoName }}RefUUID1, updatedModel.{{ reference.GoName }}Refs[0].UUID, "update failed")
    {% endfor %}

    ctxDemo := context.WithValue(ctx, "auth", common.NewAuthContext("default", "demo", "demo", []string{}))
    _, err = db.Delete{{ schema.JSONSchema.GoName }}(ctxDemo,
            &services.Delete{{ schema.JSONSchema.GoName }}Request{
                ID: model.UUID},
    )
    assert.Error(t, err, "authentication failed")

    {% for linkTo, reference in schema.References %}

    _, err = db.Delete{{ reference.GoName }}(ctx, &services.Delete{{ reference.GoName }}Request{
            ID: {{ reference.GoName }}RefUUID1,
    })
    assert.Error(t, err, "Delete reference should fail")

    {% endfor %}

    _, err = db.Create{{ schema.JSONSchema.GoName }}(ctx,
            &services.Create{{ schema.JSONSchema.GoName }}Request{
                {{ schema.JSONSchema.GoName }}: model})
    assert.Error(t, err, "Raise Error On Duplicate Create failed")

    _, err = db.Delete{{ schema.JSONSchema.GoName }}(ctx,
            &services.Delete{{ schema.JSONSchema.GoName }}Request{
                ID: model.UUID})
    assert.NoError(t, err, "Delete failed")

    _, err = db.Get{{ schema.JSONSchema.GoName }}(ctx, &services.Get{{ schema.JSONSchema.GoName }}Request{
            ID: model.UUID})
    assert.Error(t, err, "Expected not found error")

  {% for linkTo, reference in schema.References %}
    _, err = db.Delete{{ reference.GoName }}(ctx, &services.Delete{{ reference.GoName }}Request{
            ID: {{ reference.GoName }}RefUUID,
    })
    assert.NoError(t, err, "Delete reference failed")

    _, err = db.Delete{{ reference.GoName }}(ctx, &services.Delete{{ reference.GoName }}Request{
            ID: {{ reference.GoName }}RefUUID1,
    })
    assert.NoError(t, err, "Delete reference failed")

    _, err = db.Delete{{ reference.GoName }}(ctx, &services.Delete{{ reference.GoName }}Request{
            ID: {{ reference.GoName }}RefUUID2,
    })
    assert.NoError(t, err, "Delete reference failed")
    {% endfor %}

    //Delete the project created for sharing
    _, err = db.DeleteProject(ctx, &services.DeleteProjectRequest{
            ID: projectModel.UUID})
    assert.NoError(t, err, "delete project failed")
    return
}
