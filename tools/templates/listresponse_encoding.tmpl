package services

import (
    "encoding/json"
    "fmt"
    "github.com/Juniper/contrail/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

func (r *List{{ schema.JSONSchema.GoName }}Response) MarshalJSON() ([]byte, error) {
    return json.Marshal(r.toMap())
}

func (r *List{{ schema.JSONSchema.GoName }}Response) UnmarshalJSON(data []byte) error {
    return r.unmarshalWith(func(dest interface{}) error {
        return json.Unmarshal(data, dest)
    })
}

func (r *List{{ schema.JSONSchema.GoName }}Response) MarshalYAML() (interface{}, error) {
    return r.toMap(), nil
}

func (r *List{{ schema.JSONSchema.GoName }}Response) UnmarshalYAML(unmarshal func(interface{}) error) error {
    return r.unmarshalWith(unmarshal)
}

func (r *List{{ schema.JSONSchema.GoName }}Response) unmarshalWith(unmarshal func(interface{}) error) error {
    type ListResponse struct {
        Resources []*models.{{ schema.JSONSchema.GoName }} `json:"{{ schema.PluralPath }}" yaml:"{{ schema.PluralPath }}"`
    }

    type CountResponse struct {
        Resources struct {
            Count int64 `json:"count"`
        } `json:"{{ schema.PluralPath }}" yaml:"{{ schema.PluralPath }}"`
    }

    var listResponse ListResponse
    err := unmarshal(&listResponse)
    if err == nil {
        list := listResponse.Resources
        *r = List{{ schema.JSONSchema.GoName }}Response{
            {{ schema.JSONSchema.GoName }}s:     list,
            {{ schema.JSONSchema.GoName }}Count: int64(len(list)),
        }
        return nil
    }

    // err != nil is not necessarily an error: the response could be a count response
    var countResponse CountResponse
    errCount := unmarshal(&countResponse)
    if errCount != nil {
        return fmt.Errorf("%s\n%s", err, errCount)
    }

    *r = List{{ schema.JSONSchema.GoName }}Response{
        {{ schema.JSONSchema.GoName }}s:     nil,
        {{ schema.JSONSchema.GoName }}Count: countResponse.Resources.Count,
    }
    return nil
}

func (r *List{{ schema.JSONSchema.GoName }}Response) toMap() map[string]interface{} {
    if r.{{ schema.JSONSchema.GoName }}s == nil {
        return map[string]interface{}{
            "{{ schema.PluralPath }}": map[string]interface{}{
                "count": r.{{ schema.JSONSchema.GoName }}Count,
            },
        }
    } else {
        return map[string]interface{}{
            "{{ schema.PluralPath }}": r.{{ schema.JSONSchema.GoName }}s,
        }
    }

}

{% endif %}{% endfor %}
