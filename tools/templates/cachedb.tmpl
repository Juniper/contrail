package cache

import (
	"context"
	"reflect"

	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/common"
	"github.com/Juniper/contrail/pkg/services"
)

{% import "tools/templates/schema_macros.tmpl" schemaName, schemaPlural, resourceCount, getResource, getRequest, getCreateRequest, getResponse, listResource, listRequest, listResponse %}

{% for schema in schemas -%}
{% if schema.Type != "abstract" and schema.ID %}
func (cache *DB) {{ getResource(schema) }}(
	_ context.Context,
	request *services.{{ getRequest(schema) }},
) (*services.{{ getResponse(schema) }}, error) {
	response := &services.{{ getResponse(schema) }}{}
	resourceMap, ok := cache.resources[reflect.TypeOf(response.{{ schemaName(schema) }})]
	if !ok {
		return nil, common.ErrorNotFoundf("no {{schemaPlural(schema)}} found")
	}
	node, ok := resourceMap[request.ID]
	if !ok {
		return nil, common.ErrorNotFoundf("no {{schemaName(schema)}} found with uuid: %s", request.ID)
	}
	resource, ok := node.event.GetResource().(*models.{{ schemaName(schema) }})
	if !ok {
		return nil, common.ErrorNotFoundf("failed to get {{schemaName(schema)}} with uuid: %s", request.ID)
	}
	response.{{ schemaName(schema) }} = resource
	return response, nil
}

func (cache *DB) {{ listResource(schema) }}(
	context.Context,
	*services.{{ listRequest(schema) }},
) (*services.{{ listResponse(schema) }}, error) {
	response := &services.{{ listResponse(schema) }}{}
	resourceMap := cache.resources[reflect.TypeOf(response.{{ schemaPlural(schema) }}).Elem()]
	{# TODO: implement list spec #}
	for _, node := range resourceMap {
		resource, ok := node.event.GetResource().(*models.{{ schemaName(schema) }})
		if ok {
		response.{{ schemaPlural(schema) }} = append(response.{{ schemaPlural(schema) }}, resource)
		}
	}
	response.{{ resourceCount(schema) }} = int64(len(response.{{ schemaPlural(schema) }}))
	return response, nil
}
{% endif -%}
{% endfor %}