package serviceif

import (
    "context"
    "github.com/Juniper/contrail/pkg/models"
    "github.com/Juniper/contrail/pkg/common"
	log "github.com/sirupsen/logrus"
)

type Service interface {
    Next() Service
    SetNext(Service)
 {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    Create{{ schema.JSONSchema.GoName }}(context.Context, *models.Create{{ schema.JSONSchema.GoName }}Request) (*models.Create{{ schema.JSONSchema.GoName }}Response, error)
    Update{{ schema.JSONSchema.GoName }}(context.Context, *models.Update{{ schema.JSONSchema.GoName }}Request) (*models.Update{{ schema.JSONSchema.GoName }}Response, error)
    Delete{{ schema.JSONSchema.GoName }}(context.Context, *models.Delete{{ schema.JSONSchema.GoName }}Request) (*models.Delete{{ schema.JSONSchema.GoName }}Response, error)
    Get{{ schema.JSONSchema.GoName }}(context.Context, *models.Get{{ schema.JSONSchema.GoName }}Request) (*models.Get{{ schema.JSONSchema.GoName }}Response, error)
    List{{ schema.JSONSchema.GoName }}(context.Context, *models.List{{ schema.JSONSchema.GoName }}Request) (*models.List{{ schema.JSONSchema.GoName }}Response, error)
{% endif%}{% endfor %}
}

//Chain setup chain of services.
func Chain(services []Service) {
    if len(services) < 2 {
        return
    }
    previous := services[0]
    for i := 1; i < len(services); i++ {
        current := services[i]
        previous.SetNext(current)
        previous = current
    }
}

type BaseService struct{
    next Service
}

func (service *BaseService) Next() Service {
    return service.next
}

func (service *BaseService) SetNext(next Service) {
    service.next = next
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (service *BaseService) Create{{ schema.JSONSchema.GoName }}(ctx context.Context, request *models.Create{{ schema.JSONSchema.GoName }}Request) (*models.Create{{ schema.JSONSchema.GoName }}Response, error) {
    if service.next == nil {
        return &models.Create{{ schema.JSONSchema.GoName }}Response{
            {{ schema.JSONSchema.GoName }}: request.Get{{ schema.JSONSchema.GoName }}(),
        }, nil
    }
    return service.Next().Create{{ schema.JSONSchema.GoName }}(ctx, request)
}
func (service *BaseService) Update{{ schema.JSONSchema.GoName }}(ctx context.Context, request *models.Update{{ schema.JSONSchema.GoName }}Request) (*models.Update{{ schema.JSONSchema.GoName }}Response, error) {
    if service.next == nil {
        return &models.Update{{ schema.JSONSchema.GoName }}Response{
            {{ schema.JSONSchema.GoName }}: request.Get{{ schema.JSONSchema.GoName }}(),
        }, nil
    }
    return service.Next().Update{{ schema.JSONSchema.GoName }}(ctx, request)
}
func (service *BaseService) Delete{{ schema.JSONSchema.GoName }}(ctx context.Context, request *models.Delete{{ schema.JSONSchema.GoName }}Request) (*models.Delete{{ schema.JSONSchema.GoName }}Response, error) {
    if service.next == nil {
        return &models.Delete{{ schema.JSONSchema.GoName }}Response{
            ID: request.ID,
        }, nil
    }
    return service.Next().Delete{{ schema.JSONSchema.GoName }}(ctx, request)
}
func (service *BaseService) Get{{ schema.JSONSchema.GoName }}(ctx context.Context, request *models.Get{{ schema.JSONSchema.GoName }}Request) (*models.Get{{ schema.JSONSchema.GoName }}Response, error) {
    if service.next == nil {
        return nil, nil
    }
    return service.Next().Get{{ schema.JSONSchema.GoName }}(ctx, request)
}
func (service *BaseService) List{{ schema.JSONSchema.GoName }}(ctx context.Context, request *models.List{{ schema.JSONSchema.GoName }}Request) (*models.List{{ schema.JSONSchema.GoName }}Response, error) {
    if service.next == nil {
        return nil, nil
    }
    return service.Next().List{{ schema.JSONSchema.GoName }}(ctx, request)
}
{% endif%}{% endfor %}

//ProcessEvent dispatches resource event to call correcponding service functions.
func ProcessEvent(ctx context.Context, service Service, event *models.Event) (*models.Event, error) {
    switch requestEvent := event.Request.(type) {
    {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    case *models.Event_Create{{ schema.JSONSchema.GoName }}Request:
        request := requestEvent.Create{{ schema.JSONSchema.GoName }}Request
        model := request.{{ schema.JSONSchema.GoName }}
        uuid := model.GetUUID()
        if uuid != "" {
            _, err := service.Get{{ schema.JSONSchema.GoName }}(ctx,
                &models.Get{{ schema.JSONSchema.GoName }}Request{
                    ID: uuid,
            })
            if err == nil {
                model := request.{{ schema.JSONSchema.GoName }}
                response, err := service.Update{{ schema.JSONSchema.GoName }}(ctx, &models.Update{{ schema.JSONSchema.GoName }}Request{
                    {{ schema.JSONSchema.GoName }}: model,
                    FieldMask: models.MapToFieldMask(model.ToMap()),
                })
                if err != nil {
                    return nil, err
                }
                return &models.Event{
                    Request: &models.Event_Update{{ schema.JSONSchema.GoName }}Request{
                        Update{{ schema.JSONSchema.GoName }}Request: &models.Update{{ schema.JSONSchema.GoName }}Request{
                            {{ schema.JSONSchema.GoName }}: response.Get{{ schema.JSONSchema.GoName }}(),
                        },
                    },
                }, nil
            }
        }
        response, err := service.Create{{ schema.JSONSchema.GoName }}(ctx, request)
        if err != nil {
            return nil, err
        }
        return &models.Event{
            Request: &models.Event_Create{{ schema.JSONSchema.GoName }}Request{
                Create{{ schema.JSONSchema.GoName }}Request: &models.Create{{ schema.JSONSchema.GoName }}Request{
                    {{ schema.JSONSchema.GoName }}: response.Get{{ schema.JSONSchema.GoName }}(),
                },
            },
        }, nil
    case *models.Event_Update{{ schema.JSONSchema.GoName }}Request:
        request := requestEvent.Update{{ schema.JSONSchema.GoName }}Request
        response, err := service.Update{{ schema.JSONSchema.GoName }}(ctx, request)
        if err != nil {
            return nil, err
        }
        return &models.Event{
            Request: &models.Event_Update{{ schema.JSONSchema.GoName }}Request{
                Update{{ schema.JSONSchema.GoName }}Request: &models.Update{{ schema.JSONSchema.GoName }}Request{
                    {{ schema.JSONSchema.GoName }}: response.Get{{ schema.JSONSchema.GoName }}(),
                },
            },
        }, nil
    case *models.Event_Delete{{ schema.JSONSchema.GoName }}Request:
        request := requestEvent.Delete{{ schema.JSONSchema.GoName }}Request
        _, err := service.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
        if err != nil {
            return nil, err
        }
        return &models.Event{
            Request: &models.Event_Delete{{ schema.JSONSchema.GoName }}Request{
                Delete{{ schema.JSONSchema.GoName }}Request: &models.Delete{{ schema.JSONSchema.GoName }}Request{
                    ID: request.ID,
                },
            },
        }, nil
    {% endif%}{% endfor %}
    }
    return nil, nil
}

//Dump dumps all service data.
func Dump(ctx context.Context, service Service) (*models.EventList, error) {
    response := []*models.Event{}
    {% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
    list{{ schema.JSONSchema.GoName }}, err := service.List{{ schema.JSONSchema.GoName }}(ctx,
        &models.List{{ schema.JSONSchema.GoName }}Request{
           &models.ListSpec{
               Detail: true,
           },
        },
    )
    if err != nil {
        return nil, common.ToHTTPError(err)
    }
    for _, resource := range list{{ schema.JSONSchema.GoName }}.{{ schema.JSONSchema.GoName }}s {
        response = append(response, &models.Event{
                    Request: &models.Event_Create{{ schema.JSONSchema.GoName }}Request{
                        Create{{ schema.JSONSchema.GoName }}Request: &models.Create{{ schema.JSONSchema.GoName }}Request{
                            {{ schema.JSONSchema.GoName }}: resource,
                        }}})
    }
    {% endif %}{% endfor %}
    return &models.EventList{
        Events: response,
    }, nil
}

//ProcessEvents process list of events.
func ProcessEvents(ctx context.Context, service Service, eventList *models.EventList) (*models.EventList, error) {
	responses := []*models.Event{}
	for _, event := range eventList.Events {
		response, err := ProcessEvent(ctx, service, event)
		if err != nil {
			log.Debug(response, err)
			return nil, err
		}
		responses = append(responses, response)
	}
    return &models.EventList{
        Events: responses,
    }, nil
}
