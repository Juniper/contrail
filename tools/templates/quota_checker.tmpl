{% autoescape off %}
package services

import (
	"context"
	"runtime/debug"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"

	"github.com/Juniper/contrail/pkg/common"
	"{{ option.PackagePath }}/pkg/models"
)

//preventing import error
var _ = log.Debug
var _ = common.ErrorNotFound

type QuotaCheckerService struct {
	BaseService
	ReadService  ReadService
	quotaCounter QuotaCounter
}

type QuotaCounter interface {
{%- for schema in schemas -%}
{%- if schema.Type != "abstract" and schema.ID -%}
{%- set ThisID = schema.ID -%}
{%- set name = schema.JSONSchema.GoName -%}
{%- set QuotaDef = types.QuotaType.Properties|dict_get_JSONSchema_by_string_key:ThisID -%}
{%- if QuotaDef %}
	Count{{ name }}(ctx context.Context, obj *models.{{ name }}, prj *models.Project) (int64, error)
{%- endif -%}
{%- endif -%}
{%- endfor %}
}


{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %} {% set ThisID = schema.ID %}
{% set name = schema.JSONSchema.GoName %}
{% set QuotaDef = types.QuotaType.Properties|dict_get_JSONSchema_by_string_key:ThisID %}
{% if QuotaDef %}

// Handle{{ name }} retrieves project for handled resource and counts all the resources of this type, then verify quota values
func (svc *QuotaCheckerService) Handle{{ name }}(ctx context.Context, obj *models.{{ name }}) error {
	{% if name != "InstanceIP" %}
	projectID, err := svc.GetProjectFor{{ name }}(ctx, obj)
	if err != nil || projectID == "" {
		return errors.Wrapf(err, "error searching Project for {{ name }} with UUID %v (got '%v' Project UUID)", obj.GetUUID(), projectID)
	}
	project, err := svc.ReadService.GetProject(ctx, &GetProjectRequest{ ID: projectID })
	if err != nil {
		return errors.Wrapf(err, "error (when handling {{ name }}) retrieving Project with UUID %v", projectID)
	}

	limit := project.Project.Quota.{{ name }}
	if limit == 0 {
		log.Infof("[Create] Quota for {{ name }}(%v) in project %v is not set - continue", obj.GetUUID(), project.Project.GetUUID())
		return nil
	}
	log.Infof("[Create] Checking quota for {{ name }}(%v) in project %v", obj.GetUUID(), project.Project.GetUUID())
	count, err := svc.quotaCounter.Count{{ name }}(ctx, obj, project.Project)
	log.Infof("Quota limit for {{ name }} is %v, count is %v (in project %v)", limit, count, project.Project.GetUUID())
	if count >= limit {
		return common.ErrorBadRequestf("Quota exceeded for resource {{ name }}; under project %s (%v) there are already %v resources count", project.Project.DisplayName, project.Project.GetUUID(), count)
	}
	{% endif %}
	return nil
}

// Create{{ name }} is an implementation of handling quota verificatin during object creation
func (svc *QuotaCheckerService) Create{{ name }}(ctx context.Context, request *Create{{ name }}Request) (*Create{{ name }}Response, error) {
	log.Debugf("Create{{ name }} request = %+v;", request)
	if err := svc.Handle{{ name }}(ctx, request.{{ name }}); err != nil {
		return nil, err
	}
	if svc.next == nil {
		return nil, nil
	}
	return svc.Next().Create{{ name }}(ctx, request)
}

/* TODO might be not needed
func (svc *QuotaCheckerService) Update{{ name }}(ctx context.Context, request *Update{{ name }}Request) (*Update{{ name }}Response, error) {
	if err := svc.Handle{{ name }}(ctx, request.{{ name }}); err != nil {
		return nil, err
	}
	if svc.next == nil {
		return nil, nil
	}
	return svc.Next().Update{{ name }}(ctx, request)
}
*/
{% else %}// Type {{ name }} is not under quota{% endif %}

{% if schema.Parents|length >= 1 %}
// GetProjectFor{{ name }} retrieves project UUID for given {{ name }} object (if possible) // Parents count: {{ schema.Parents|length }};
func (svc *QuotaCheckerService) GetProjectFor{{ name }}(ctx context.Context, obj *models.{{ name }}) (string, error) {
	log.Debugf("GetProject lookup on {{ name }} with UUID: %v -> %v, %v", obj.GetUUID(), obj.GetParentType(), obj.GetParentUUID())
	{% if name == "Project" %}
	log.Debugf("GetProject returns Project with UUID: %v", obj.GetUUID())
	return obj.GetUUID(), nil
	{% else %}{% for _, pdef in schema.Parents %}{% set ptype = pdef.LinkTo.TypeName %}
		if obj.GetParentType() == "{{ ptype }}" {
		log.Debugf("GetProject lookup {{ ptype }} with UUID: %v", obj.GetParentUUID())
		{% if ptype == "project" %}
		parentUUID := obj.GetParentUUID()
		if parentUUID == "" {
			return "", errors.Errorf("Object {{ name }} with UUID %v has no parent attached", obj.GetUUID())
		}
		return parentUUID, nil
		{% else %}
		parent := obj.GetParentUUID()
		parentResp, err := svc.ReadService.Get{{ pdef.GoName }}(ctx, &Get{{ pdef.GoName }}Request{ ID: parent, })
		if err != nil {
			return "", errors.Wrapf(err, "error retrieving parent for object {{ name }} with uuid %v", obj.GetUUID())
		}
		return svc.GetProjectFor{{ pdef.GoName }}(ctx, parentResp.{{ pdef.GoName }}){% endif %}
	}
	{% endfor %}
	return "", errors.Errorf("no parent specified for type {{ name }} in object with UUID: %v", obj.GetUUID()){%endif%}
}
{% else %}
// GetProjectFor{{ name }} for object without parent returns always error
func (svc *QuotaCheckerService) GetProjectFor{{ name }}(ctx context.Context, obj *models.{{ name }}) (string, error) {
	debug.PrintStack()
	return "", errors.Errorf("resource type {{ name }} is orphan - no Parent type")
}
{% endif %}

{% endif %}{% endfor %}

{% endautoescape %}
