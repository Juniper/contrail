{% autoescape off %}
package services

import (
	"context"
	"runtime/debug"

	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/serviceif"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
)

type BaseQuotaCheckerService struct {
	serviceif.BaseService
	db serviceif.Service
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %} {% set ThisID = schema.ID %}
{% set name = schema.JSONSchema.GoName %}
{% set QuotaDef = types.QuotaType.Properties|dict_get_JSONSchema_by_string_key:ThisID %}
{% if QuotaDef %}

// Handle{{ name }} retrieves project for handled resource and counts all the resources of this type, then verify quota values
func (svc *BaseQuotaCheckerService) Handle{{ name }}(ctx context.Context, obj *models.{{ name }}) error {
	projectID, err := svc.GetProjectFor{{ name }}(ctx, obj)
	if err != nil || projectID == "" {
		return errors.Errorf("Error searching Project for {{ name }} with UUID %v (got '%v' Project UUID): %v", obj.GetUUID(), projectID, err)
	}
	project, err := svc.db.GetProject(ctx, &models.GetProjectRequest{ ID: projectID })
	if err != nil {
		return errors.Errorf("Error (when hadling {{ name }}) retrieving Project with UUID %v: %v", projectID, err)
	}
	log.Infof("[Create] Checking quota for {{ name }}(%v) in project %v", obj.GetUUID(), project.Project.GetUUID())

	limit := project.Project.Quota.{{ name }}
	if limit == 0 {
		return nil
	}
	count, err := svc.Count{{ name }}(ctx, obj, project.Project)
	log.Infof("Quota limit for {{ name }} is %v, count is %v (in project %v)", limit, count, project.Project.GetUUID())
	if count >= limit {
		return errors.Errorf("Quota exceeded for resource {{ name }}; under project %s (%v) there are already %v resources count", project.Project.DisplayName, project.Project.GetUUID(), count)
	}

	return nil
}

// Count{{ name }} is a resource counting function, should be implemented elsewhere for all resources specified in QuotaType resource
func (svc *BaseQuotaCheckerService) Count{{ name }}(ctx context.Context, obj *models.{{ name }}, prj *models.Project) (int64, error) {
	return 0, errors.New("This is a bug! This function should be implemented in specific quota counter class!")
}

// Create{{ name }} is an implementation of handling quota verificatin during object creation
func (svc *BaseQuotaCheckerService) Create{{ name }}(ctx context.Context, request *models.Create{{ name }}Request) (*models.Create{{ name }}Response, error) {
	if err := svc.Handle{{ name }}(ctx, request.{{ name }}); err != nil {
		return nil, err
	}
	if svc.Next == nil {
		return nil, nil
	}
	return svc.Next().Create{{ name }}(ctx, request)
}

/* TODO might be not needed
func (svc *BaseQuotaCheckerService) Update{{ name }}(ctx context.Context, request *models.Update{{ name }}Request) (*models.Update{{ name }}Response, error) {
	if err := svc.Handle{{ name }}(ctx, request.{{ name }}); err != nil {
		return nil, err
	}
	if svc.Next == nil {
		return nil, nil
	}
	return svc.Next().Update{{ name }}(ctx, request)
}
*/
{% else %}// Type {{ name }} is not under quota{% endif %}

{% if schema.Parents|length >= 1 %}
// GetProjectFor{{ name }} retrieves project UUID for given {{ name }} object (if possible) // Parents count: {{ schema.Parents|length }};
func (svc BaseQuotaCheckerService) GetProjectFor{{ name }}(ctx context.Context, obj *models.{{ name }}) (string, error) {
	{% if name == "Project" %}return obj.GetUUID(), nil
	{% else %}{% for ptype, pdef in schema.Parents %}if obj.GetParentType() == "{{ ptype }}" {
		{% if ptype == "project" %}
		parentUUID := obj.GetParentUUID()
		if parentUUID == "" {
			return "", errors.Errorf("Object {{ name }} with UUID %v has no parent attached", obj.GetUUID())
		}
		return parentUUID, nil{% else %}parent := obj.GetParentUUID()
		parentResp, err := svc.db.Get{{ pdef.GoName }}(ctx, &models.Get{{ pdef.GoName }}Request{ ID: parent, })
		if err != nil {
			return "", errors.Errorf("Error retrieving parent for object {{ name }} with uuid %v: %v", obj.GetUUID(), err)
		}
		return svc.GetProjectFor{{ pdef.GoName }}(ctx, parentResp.{{ pdef.GoName }}){% endif %}
	}
	{% endfor %}
	return "", errors.Errorf("No parent specified for type {{ name }} in object with UUID: %v", obj.GetUUID()){%endif%}
}
{% else %}
// GetProjectFor{{ name }} for object without parent returns always error
func (svc BaseQuotaCheckerService) GetProjectFor{{ name }}(ctx context.Context, obj *models.{{ name }}) (string, error) {
	debug.PrintStack()
	return "", errors.WithStack(errors.Errorf("Resource type {{ name }} is orphan - no Parent type"))
}
{% endif %}

{% endif %}{% endfor %}

{% endautoescape %}
