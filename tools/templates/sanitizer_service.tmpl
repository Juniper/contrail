package services

import (
	"context"

	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/errutil"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (sv *SanitizerService) sanitize{{ schema.JSONSchema.GoName }}DisplayName(ctx context.Context, m *models.{{ schema.JSONSchema.GoName }}) {
	if m.DisplayName == "" {
		m.DisplayName = m.Name
	}
}

func (sv *SanitizerService) Create{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {
	m := request.Get{{ schema.JSONSchema.GoName }}()
	sv.sanitize{{ schema.JSONSchema.GoName }}DisplayName(ctx, m)

	{% if schema.References | length != 0 %}
	if err := sv.sanitizeRefs(ctx, m.GetReferences()); err != nil {
		return nil, errutil.ErrorBadRequestf("couldn't sanitize refs of {{ schema.JSONSchema.GoName }} %v: %v", m.GetUUID(), err)
	}
	{% endif %}

	return sv.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *SanitizerService) Update{{ schema.JSONSchema.GoName }}(
	ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
	{% if schema.References | length != 0 %}
	m := request.Get{{ schema.JSONSchema.GoName }}()

	if err := sv.sanitizeRefs(ctx, m.GetReferences()); err != nil {
		return nil, errutil.ErrorBadRequestf("couldn't sanitize refs of {{ schema.JSONSchema.GoName }} %v: %v", m.GetUUID(), err)
	}
	{% endif %}

	return sv.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}
{% endif %}{% endfor %}
