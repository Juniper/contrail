package services

import (
    "context"

    "github.com/pkg/errors"

    "github.com/Juniper/contrail/pkg/models"
)

type SanitizerService struct {
    BaseService
    MetadataGetter metadataGetter
}

func (sv *SanitizerService) sanitizeRefs(ctx context.Context, refs []models.Reference) error {
    fqNameToRef:= make(map[string] models.Reference)
    var fqNameUUIDPairs []*models.FQNameUUIDPair
    for _, ref := range refs {
        if ref.GetUUID() != "" {
            continue
        }
        fqNameToRef[models.FQNameToString(ref.GetTo())] = ref
        fqNameUUIDPairs = append(fqNameUUIDPairs, &models.FQNameUUIDPair{FQName: ref.GetTo()})
    }

    if len(fqNameUUIDPairs) == 0 {
        return nil
    }

    metadatas, err := sv.MetadataGetter.ListMetadata(ctx, fqNameUUIDPairs)
    if err != nil {
        return err
    }

    for _, metadata := range metadatas {
        fqNameToRef[models.FQNameToString(metadata.FQName)].SetUUID(metadata.UUID)
    }
    return nil
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID and schema.References | length != 0 %}
func (sv *SanitizerService) Create{{ schema.JSONSchema.GoName }}(
    ctx context.Context, request *Create{{ schema.JSONSchema.GoName }}Request,
) (*Create{{ schema.JSONSchema.GoName }}Response, error) {
    m := request.Get{{ schema.JSONSchema.GoName }}()

    err := sv.sanitizeRefs(ctx, m.GetReferences())
    if err != nil {
        return nil, errors.Wrapf(err, "couldn't sanitize refs of {{ schema.JSONSchema.GoName }}(%v)", m.GetUUID())
    }

    return sv.BaseService.Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

func (sv *SanitizerService) Update{{ schema.JSONSchema.GoName }}(
    ctx context.Context, request *Update{{ schema.JSONSchema.GoName }}Request,
) (*Update{{ schema.JSONSchema.GoName }}Response, error) {
    m := request.Get{{ schema.JSONSchema.GoName }}()

    err := sv.sanitizeRefs(ctx, m.GetReferences())
    if err != nil {
        return nil, errors.Wrapf(err, "couldn't sanitize refs of {{ schema.JSONSchema.GoName }}(%v)", m.GetUUID())
    }

    return sv.BaseService.Update{{ schema.JSONSchema.GoName }}(ctx, request)
}
{% endif %}{% endfor %}
