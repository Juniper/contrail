package client

import (
    "context"
    
    "github.com/Juniper/contrail/pkg/services"
    "github.com/Juniper/contrail/pkg/models"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (h *HTTP) Create{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Create{{ schema.JSONSchema.GoName }}Request) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
    response := &services.Create{{ schema.JSONSchema.GoName }}Response{}
    _, err := h.Create(ctx, "{{ schema.Prefix }}{{ schema.PluralPath }}",  request, response)
    return response, err
}

func (h *HTTP) Update{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Update{{ schema.JSONSchema.GoName }}Request) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
    response := &services.Update{{ schema.JSONSchema.GoName }}Response{}
    _, err := h.Update(ctx, "{{ schema.Prefix }}{{ schema.Path }}/" + request.{{ schema.JSONSchema.GoName }}.UUID,
        request, &response)
    return response, err
}

func (h *HTTP) Delete{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
    response := &services.Delete{{ schema.JSONSchema.GoName }}Response{}
    _, err := h.Delete(ctx, "{{ schema.Prefix }}{{ schema.Path }}/" + request.ID, nil)
    return response, err
}

func (h *HTTP) Get{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Get{{ schema.JSONSchema.GoName }}Request) (*services.Get{{ schema.JSONSchema.GoName }}Response, error) {
    response := &services.Get{{ schema.JSONSchema.GoName }}Response{}
    _, err := h.Read(ctx, "{{ schema.Prefix }}{{ schema.Path }}/" + request.ID, response)
    return response, err
}

func (h *HTTP) List{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.List{{ schema.JSONSchema.GoName }}Request) (*services.List{{ schema.JSONSchema.GoName }}Response, error) {
    //TODO(nati) support encoding list spec for query param.
    response := &services.List{{ schema.JSONSchema.GoName }}Response{}
    _, err := h.Read(ctx, "{{ schema.Prefix }}{{ schema.PluralPath }}", response)
    return response, err
}

{% for _, reference in schema.References %}
{% set refType = schema.JSONSchema.GoName| add:reference.GoName | add:"Ref" %}
func (h *HTTP) Create{{ refType }}(ctx context.Context, request *services.Create{{ refType }}Request) (*services.Create{{ refType }}Response, error) {
    response := &services.Create{{ refType }}Response{}
    data := h.getRefUpdateFromCreateRequest{{ refType }} (request)
    _, err := h.CreateRef(ctx, data, response)
    return response, err
}

func (h *HTTP) Delete{{ refType }}(ctx context.Context, request *services.Delete{{ refType }}Request) (*services.Delete{{ refType }}Response, error) {
    response := &services.Delete{{ refType }}Response{}
    data := h.getRefUpdateFromDeleteRequest{{ refType }} (request)
    _, err := h.DeleteRef(ctx, data)
    return response, err
}

type refUpdateFor{{ refType }} struct {
    services.RefUpdate{% if reference.RefType  %}
    Attr *models.{{reference.RefType}} `json:"attr"`{% endif %}
}

func (h *HTTP) getRefUpdateFromCreateRequest{{ refType }} (request *services.Create{{ refType }}Request) refUpdateFor{{ refType }} {
    id := request.GetID()
    riRiRef := request.Get{{ refType }}()

    data := refUpdateFor{{ refType }}{
        services.RefUpdate{
        Operation: services.RefOperationAdd,
        Type: "{{ schema.Path }}",
        UUID: id,
        RefType: "{{ reference.LinkTo.Path }}",
        RefUUID: riRiRef.GetUUID(),
        },{% if reference.RefType  %}
        riRiRef.GetAttr(),{% endif %}
    }
    return data
}

func (h *HTTP) getRefUpdateFromDeleteRequest{{ refType }} (request *services.Delete{{ refType }}Request) refUpdateFor{{ refType }} {
    id := request.GetID()
    riRiRef := request.Get{{ refType }}()

    data := refUpdateFor{{ refType }}{
        services.RefUpdate{
        Operation: services.RefOperationDelete,
        Type: "{{ schema.Path }}",
        UUID: id,
        RefType: "{{ reference.LinkTo.Path }}",
        RefUUID: riRiRef.GetUUID(),
        },{% if reference.RefType  %}
        riRiRef.GetAttr(),{% endif %}
    }
    return data
}{% endfor %}
{% endif%}{% endfor %}
