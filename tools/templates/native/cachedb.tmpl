package cache

import (
	"context"

	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/errutil"
	"github.com/Juniper/contrail/pkg/services"
)

{% macro schemaName(schema) export %}{{ schema.JSONSchema.GoName }}{% endmacro %}
{% macro schemaTypeNameString(schema) export %}"{{ schema.TypeName }}"{% endmacro %}
{% macro schemaPlural(schema) export %}{{ schemaName(schema) }}s{% endmacro %}
{% macro resourceCount(schema) export %}{{ schemaName(schema) }}Count{% endmacro %}

{% macro getResource(schema) export %}Get{{ schemaName(schema) }}{% endmacro %}
{% macro getRequest(schema) export %}Get{{ schemaName(schema) }}Request{% endmacro %}
{% macro getCreateRequest(schema) export %}GetCreate{{ schemaName(schema) }}Request(){% endmacro %}
{% macro getResponse(schema) export %}Get{{ schemaName(schema) }}Response{% endmacro %}

{% macro listResource(schema) export %}List{{ schemaName(schema) }}{% endmacro %}
{% macro listRequest(schema) export %}List{{ schemaName(schema) }}Request{% endmacro %}
{% macro getListRequest(schema) export %}GetList{{ schemaName(schema) }}Request(){% endmacro %}
{% macro listResponse(schema) export %}List{{ schemaName(schema) }}Response{% endmacro %}


{%- macro errorNotFound(schema) -%}
errutil.ErrorNotFoundf("no {{schemaName(schema)}} found with uuid: %s", request.ID)
{%- endmacro %}

{% for schema in schemas -%}
{% if schema.Type != "abstract" and schema.ID %}
func (cache *DB) {{ getResource(schema) }}(
	_ context.Context,
	request *services.{{ getRequest(schema) }},
) (*services.{{ getResponse(schema) }}, error) {
	response := &services.{{ getResponse(schema) }}{}
	resourceMap, ok := cache.resources[{{ schemaTypeNameString(schema) }}]
	if !ok {
		return nil, {{ errorNotFound(schema) }}
	}
	node, ok := resourceMap[request.ID]
	if !ok {
		return nil, {{ errorNotFound(schema) }}
	}
	resource, ok := node.event.GetResource().(*models.{{ schemaName(schema) }})
	if !ok {
		return nil, errutil.ErrorNotFoundf("failed to get {{schemaName(schema)}} with uuid: %s", request.ID)
	}
	response.{{ schemaName(schema) }} = resource
	return response, nil
}

func (cache *DB) {{ listResource(schema) }}(
	context.Context,
	*services.{{ listRequest(schema) }},
) (*services.{{ listResponse(schema) }}, error) {
	response := &services.{{ listResponse(schema) }}{}
	resourceMap := cache.resources[{{ schemaTypeNameString(schema) }}]
	{# TODO: implement list spec #}
	for _, node := range resourceMap {
		resource, ok := node.event.GetResource().(*models.{{ schemaName(schema) }})
		if ok {
		response.{{ schemaPlural(schema) }} = append(response.{{ schemaPlural(schema) }}, resource)
		}
	}
	response.{{ resourceCount(schema) }} = int64(len(response.{{ schemaPlural(schema) }}))
	return response, nil
}
{% endif -%}
{% endfor %}