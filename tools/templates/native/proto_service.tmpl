syntax = "proto3";
package {{ option.ProtoPackage }}.pkg.services;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/Juniper/contrail/pkg/services/baseservices/base.proto";
import "{{ option.PackagePath }}/pkg/models/generated.proto";
import "google/protobuf/field_mask.proto";


option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.gostring_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.verbose_equal_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = false;
option (gogoproto.benchgen_all) = false;
option (gogoproto.marshaler_all) = false;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.protosizer_all) = false;

option go_package = "services";

message Empty {}

service ContrailService {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
rpc Get{{ schema.JSONSchema.GoName }} (Get{{ schema.JSONSchema.GoName }}Request) returns (Get{{ schema.JSONSchema.GoName }}Response);
rpc List{{ schema.JSONSchema.GoName }} (List{{ schema.JSONSchema.GoName }}Request) returns (List{{ schema.JSONSchema.GoName }}Response);
rpc Create{{ schema.JSONSchema.GoName }} (Create{{ schema.JSONSchema.GoName }}Request) returns (Create{{ schema.JSONSchema.GoName }}Response);
rpc Update{{ schema.JSONSchema.GoName }} (Update{{ schema.JSONSchema.GoName }}Request) returns (Update{{ schema.JSONSchema.GoName }}Response);
rpc Delete{{ schema.JSONSchema.GoName }} (Delete{{ schema.JSONSchema.GoName }}Request) returns (Delete{{ schema.JSONSchema.GoName }}Response);
{% for _, reference in schema.References %}
rpc Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref (Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest) returns (Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse);
rpc Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref (Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest) returns (Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse);
{% endfor %}
{% endif %}{% endfor %}
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

message Create{{ schema.JSONSchema.GoName }}Request {
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }} {{ schema.ID }} = 1 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}",(gogoproto.jsontag) = "{{ schema.Path }}"];
}

message Create{{ schema.JSONSchema.GoName }}Response {
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }} {{ schema.ID }} = 1 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}" ,(gogoproto.jsontag) = "{{ schema.Path }}"];
}

message Update{{ schema.JSONSchema.GoName }}Request {
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }} {{ schema.ID }} = 1 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}",(gogoproto.jsontag) = "{{ schema.Path }}"];
    google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message Update{{ schema.JSONSchema.GoName }}Response {
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }} {{ schema.ID }} = 1 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}",(gogoproto.jsontag) = "{{ schema.Path }}"];
}

message Delete{{ schema.JSONSchema.GoName }}Request {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message Delete{{ schema.JSONSchema.GoName }}Response {
    string id = 1 [(gogoproto.customname) = "ID"];
}

message List{{ schema.JSONSchema.GoName }}Request {
    github.com.Juniper.contrail.pkg.services.baseservices.ListSpec spec = 1 [(gogoproto.customname) = "Spec"];
}

message List{{ schema.JSONSchema.GoName }}Response {
    repeated {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }} {{ schema.Plural }} = 1 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}s"];
    int64 {{ schema.ID }}_count = 2 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}Count"];
}

message Get{{ schema.JSONSchema.GoName }}Request {
    string id = 1 [(gogoproto.customname) = "ID"];
    repeated string fields = 13 [(gogoproto.customname) = "Fields"]; // limit displayed fields
}

message Get{{ schema.JSONSchema.GoName }}Response {
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }} {{ schema.ID }} = 1 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}", (gogoproto.jsontag) = "{{ schema.Path }}"];
}

{% for linkTo, reference in schema.References %}
message Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref {{ schema.ID }} = 2 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref",(gogoproto.jsontag) = "{{ schema.Path }}_{{ linkTo }}_ref"];
}

message Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref {{ schema.ID }} = 2 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref",(gogoproto.jsontag) = "{{ schema.Path }}_{{ linkTo }}_ref"];
}

message Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest {
    string id = 1 [(gogoproto.customname) = "ID"];
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref {{ schema.ID }} = 2 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref",(gogoproto.jsontag) = "{{ schema.Path }}_{{ linkTo }}_ref"];
}

message Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefResponse {
    string id = 1 [(gogoproto.customname) = "ID"];
    {{ option.ProtoPackage }}.pkg.models.{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref {{ schema.ID }} = 2 [(gogoproto.customname) = "{{ schema.JSONSchema.GoName }}{{ reference.GoName }}Ref",(gogoproto.jsontag) = "{{ schema.Path }}_{{ linkTo }}_ref"];
}{% endfor %}
{% endif %}{% endfor %}

message Event {
    uint64 version = 1;
    oneof request { {% set index = 2 %}{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
        Create{{ schema.JSONSchema.GoName }}Request create_{{ schema.ID }} = {{ index }} [(gogoproto.customname) = "Create{{ schema.JSONSchema.GoName }}Request"];
        Update{{ schema.JSONSchema.GoName }}Request update_{{ schema.ID }} = {{ index+1 }} [(gogoproto.customname) = "Update{{ schema.JSONSchema.GoName }}Request"];
        Delete{{ schema.JSONSchema.GoName }}Request delete_{{ schema.ID }} = {{ index+2 }} [(gogoproto.customname) = "Delete{{ schema.JSONSchema.GoName }}Request"];
{% set index = index + 3 %}{% for linkTo, reference in schema.References %}
{% set offset = forloop.Counter0 * 2 %}
        Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest create_{{ schema.ID }}_{{ linkTo }}_ref = {{ index + offset }} [(gogoproto.customname) = "Create{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest"];
        Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest delete_{{ schema.ID }}_{{ linkTo }}_ref = {{ index + offset + 1 }} [(gogoproto.customname) = "Delete{{ schema.JSONSchema.GoName }}{{ reference.GoName }}RefRequest"];
{% endfor %}
{% set index = index + 2 * (schema.References|length)%}{# pongo2 variables are scoped so we need to add offset #}
{% endif %}{% endfor %}
    }
}

service Chown {
    rpc Chown(ChownRequest) returns (Empty);
}

message ChownRequest {
    string UUID = 1 [(gogoproto.customname) = "UUID",(gogoproto.jsontag) = "uuid"];
    string Owner = 2 [(gogoproto.customname) = "Owner",(gogoproto.jsontag) = "owner"];
}

service IPAM {
    rpc AllocateInt (AllocateIntRequest) returns (AllocateIntResponse);
    rpc SetInt (SetIntRequest) returns (Empty);
    rpc DeallocateInt (DeallocateIntRequest) returns (Empty);
}

message AllocateIntRequest {
    string Pool = 1 [(gogoproto.customname) = "Pool"];
}

message AllocateIntResponse {
    int64 Value = 1 [(gogoproto.customname) = "Value"];
}

message SetIntRequest {
    string Pool = 1 [(gogoproto.customname) = "Pool"];
    int64 Value = 2 [(gogoproto.customname) = "Value"];
}

message DeallocateIntRequest {
    string Pool = 1 [(gogoproto.customname) = "Pool"];
    int64 Value = 2 [(gogoproto.customname) = "Value"];
}

service Watch {
  rpc Watch(stream WatchRequest) returns (stream WatchResponse) {
  }
}

message WatchRequest {
  // request_union is a request to either create a new watcher or cancel an existing watcher.
  oneof request_union {
    WatchCreateRequest create_request = 1;
    WatchCancelRequest cancel_request = 2;
  }
}

message WatchCreateRequest {
  string key = 1;
  int64 start_revision = 3;
  int64 watch_id = 7;
}

message WatchCancelRequest {
  int64 watch_id = 1;
}

message WatchResponse {
  int64 watch_id = 1;
  bool created = 2;
  bool canceled = 3;
  string cancel_reason = 4;
  repeated Event events = 5;
}
