// nolint
// Generated Code, DO NOT EDIT.

package compilationif

import (
	"context"
	"errors"
	"encoding/json"

    "github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/services"
	"github.com/coreos/etcd/mvcc/mvccpb"
	log "github.com/sirupsen/logrus"
)

// ObjCallback to Handle Objects CRUD
type ObjCallback func(*CompilationService, context.Context, int32, string, string) (error)

var functions = map[string]ObjCallback {
{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	"{{ schema.ID }}": (*CompilationService).Handle{{ schema.JSONSchema.GoName }},
{% endif%}{% endfor %}
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
func (service *CompilationService) Handle{{ schema.JSONSchema.GoName }}(ctx context.Context, oper int32, uuid, jsonStr string) error {
	switch (oper) {
	case int32(mvccpb.PUT):
		// Unmarshal
		var obj models.{{ schema.JSONSchema.GoName }}
		err := json.Unmarshal([]byte(jsonStr), &obj)
		if err != nil {
			log.WithFields(log.Fields{
				"err": err,
				"resource": "{{ schema.ID }}",
			}).Debug("%s: Failed JSON Unmarshal", "{{ schema.ID }}")
			return err
		}
		update := false
	        _, err = service.Get{{ schema.JSONSchema.GoName }}(ctx,
			&services.Get{{ schema.JSONSchema.GoName }}Request{
				ID: uuid,
			})
		if err == nil {
			update = true
		}
		if update {
			request := &services.Update{{ schema.JSONSchema.GoName }}Request {
				{{ schema.JSONSchema.GoName }}: &obj,
			}
			_, err := service.Update{{ schema.JSONSchema.GoName }}(ctx, request)
			if err != nil {
				err := errors.New("Cannot Update {{ schema.JSONSchema.GoName }}")
				log.WithFields(log.Fields{
					"err": err,
					"resource": "{{ schema.ID }}",
				}).Debug("Update {{ schema.JSONSchema.GoName }}: Cannot Update {{ schema.JSONSchema.GoName }}")
				return err
			}
		} else {
			request := &services.Create{{ schema.JSONSchema.GoName }}Request {
				{{ schema.JSONSchema.GoName }}: &obj,
			}
			_, err := service.Create{{ schema.JSONSchema.GoName }}(ctx, request)
			if err != nil {
				err := errors.New("Cannot Create {{ schema.JSONSchema.GoName }}")
				log.WithFields(log.Fields{
					"err": err,
					"resource": "{{ schema.ID }}",
				}).Debug("Create {{ schema.JSONSchema.GoName }}: Cannot Create {{ schema.JSONSchema.GoName }}")
				return err
			}
		}
	case int32(mvccpb.DELETE):
		request := &services.Delete{{ schema.JSONSchema.GoName }}Request {
			ID: uuid,
		}
		_, err := service.Delete{{ schema.JSONSchema.GoName }}(ctx, request)
		if err != nil {
			err := errors.New("Cannot Delete {{ schema.JSONSchema.GoName }}")
			log.WithFields(log.Fields{
				"err": err,
				"resource": "{{ schema.ID }}",
			}).Debug("Delete {{ schema.JSONSchema.GoName }}: Cannot Delete {{ schema.JSONSchema.GoName }}")
			return err
		}
	}
	return nil
}
{% endif%}{% endfor %}
