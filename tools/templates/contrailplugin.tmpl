package contrailplugin

import (
	"context"
	"errors"
	"sync"

	"github.com/Juniper/contrail/pkg/compilationif"
	"github.com/Juniper/contrail/pkg/models"
	"github.com/Juniper/contrail/pkg/services"
	log "github.com/sirupsen/logrus"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}

// Create{{ schema.JSONSchema.GoName }} handles create request
func (service *PluginService) Create{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Create{{ schema.JSONSchema.GoName }}Request) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
	log.Println(" Create{{ schema.JSONSchema.GoName }} Entered")

	obj := request.Get{{ schema.JSONSchema.GoName }}()

	intentObj := {{ schema.JSONSchema.GoName }}Intent {
		UUID: obj.GetUUID(),
	}

	if _, ok := compilationif.ObjsCache.Load("{{ schema.JSONSchema.GoName }}Intent"); !ok {
		compilationif.ObjsCache.Store("{{ schema.JSONSchema.GoName }}Intent", &sync.Map{})
	}
	objMap, ok := compilationif.ObjsCache.Load("{{ schema.JSONSchema.GoName }}Intent")
	if ok {
		objMap.(*sync.Map).Store(obj.GetUUID(), intentObj)
	}

	service.Debug("Create{{ schema.JSONSchema.GoName }}", objMap.(*sync.Map))

	service.EvaluateDependencies(ctx, obj, "{{ schema.JSONSchema.GoName }}")

	if service.Next() == nil {
		return nil, nil
	}
	return service.Next().Create{{ schema.JSONSchema.GoName }}(ctx, request)
}

// Update{{ schema.JSONSchema.GoName }} handles update request
func (service *PluginService) Update{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Update{{ schema.JSONSchema.GoName }}Request) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
	log.Println(" Update{{ schema.JSONSchema.GoName }} ENTERED")

	obj := request.Get{{ schema.JSONSchema.GoName }}()

	intentObj := {{ schema.JSONSchema.GoName }}Intent {
		UUID: obj.GetUUID(),
	}

	if _, ok := compilationif.ObjsCache.Load("{{ schema.JSONSchema.GoName }}Intent"); !ok {
		compilationif.ObjsCache.Store("{{ schema.JSONSchema.GoName }}Intent", &sync.Map{})
	}

	service.EvaluateDependencies(ctx, obj, "{{ schema.JSONSchema.GoName }}")

	objMap, ok := compilationif.ObjsCache.Load("{{ schemschema.JSONSchema.GoName }}Intent")
	if ok {
		objMap.(*sync.Map).Store(obj.GetUUID(), intentObj)
	}

	service.Debug("Update{{ schema.JSONSchema.GoName }}", objMap.(*sync.Map))

	if service.Next() == nil {
		return nil, nil
	}
	return service.Next().Update{{ schema.JSONSchema.GoName }}(ctx, request)
}

// Delete{{ schema.JSONSchema.GoName }} handles delete request
func (service *PluginService) Delete{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
	log.Println(" Delete{{ schema.JSONSchema.GoName }} ENTERED")

	objUUID := request.GetID()

	//intentObj := {{ schema.JSONSchema.GoName }}Intent {
		//{{ schema.JSONSchema.GoName }}: *obj,
	//}

	//service.EvaluateDependencies(ctx, intentObj, "{{ schema.JSONSchema.GoName }}")

	objMap, ok := compilationif.ObjsCache.Load("{{ schema.JSONSchema.GoName }}Intent")
	if ok {
		objMap.(*sync.Map).Delete(objUUID)
	}

	service.Debug("Delete{{ schema.JSONSchema.GoName }}", objMap.(*sync.Map))

	if service.Next() == nil {
		return nil, nil
	}
	return service.Next().Delete{{ schema.JSONSchema.GoName }}(ctx, request)
}

// Get{{ schema.JSONSchema.GoName }} handles get request
func (service *PluginService) Get{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Get{{ schema.JSONSchema.GoName }}Request) (*services.Get{{ schema.JSONSchema.GoName }}Response, error) {
	objMap, ok := compilationif.ObjsCache.Load("{{ schema.JSONSchema.GoName }}")
	if !ok {
		return nil, errors.New("{{ schema.JSONSchema.GoName }} get failed ")
	}

	obj, ok := objMap.(*sync.Map).Load(request.GetID())
	if !ok {
		return nil, errors.New("{{ schema.JSONSchema.GoName }} get failed ")
	}

	response := &services.Get{{ schema.JSONSchema.GoName }}Response{
		{{ schema.JSONSchema.GoName }}: obj.(*models.{{ schema.JSONSchema.GoName }}),
	}
	return response, nil
}
{% endif%}{% endfor %}
