package services

import (
	"net/url"

	"github.com/pkg/errors"
)

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
{% set name = schema.JSONSchema.GoName %}

{% macro applyHref(prefix, obj, type, name) %} objURL, err := url.Parse("{{ schema.Prefix }}{{ schema.Path }}/" + {{ prefix }}{{ obj }}.UUID)
	if err != nil {
		return errors.Wrap(err, "failed to apply href to {{ type }}{{ name }}Response")
	}
    {{ prefix }}{{ obj }}.Href = objURL.String(){% endmacro %}

func (r* Create{{ name }}Response) ApplyHref(collectionURL *url.URL) error {
	{{ applyHref("r.", name, "Create", name) }}
	return nil
}

func (r* Update{{ name }}Response) ApplyHref(collectionURL *url.URL) error {
	{{ applyHref("r.", name, "Update", name) }}
	return nil
}

func (r* Get{{ name }}Response) ApplyHref(collectionURL *url.URL) error {
	{{ applyHref("r.", name, "Get", name) }}
	return nil
}

func (r *List{{name}}Response) ApplyHref(collectionURL *url.URL) error {
	for _, obj := range r.{{ name }}s {
		{{ applyHref("", "obj", "List", name) }}
	}
	return nil
}

{% endif %}{% endfor %}