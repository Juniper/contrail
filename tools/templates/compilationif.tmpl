// nolint
// Generated Code, DO NOT EDIT.

package compilationif

import (
	"context"
	"errors"
	"log"
	"sync"

	"{{ option.PackagePath }}/pkg/models"
	"{{ option.PackagePath }}/pkg/services"
)

var ObjsCache *sync.Map

func (service *CompilationService) Init() {
	ObjsCache = &sync.Map{}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
	ObjsCache.Store("{{ schema.JSONSchema.GoName }}", &sync.Map{})
{% endif%}{% endfor %}
}

func (service *CompilationService) Debug(objStr string, objValue *sync.Map) {
	oMap := make(map[interface{}]interface{})
	objValue.Range(func(k, v interface{}) bool {
	        oMap[k] = v
	        return true
	})
	log.Printf("%s: %v", objStr, oMap)
}

{% for schema in schemas %}{% if schema.Type != "abstract" and schema.ID %}
// Create{{ schema.JSONSchema.GoName }}
func (service *CompilationService) Create{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Create{{ schema.JSONSchema.GoName }}Request) (*services.Create{{ schema.JSONSchema.GoName }}Response, error) {
	// Check if request Object exists
	obj := request.Get{{ schema.JSONSchema.GoName }}()
	_, err := service.Get{{ schema.JSONSchema.GoName }}(ctx,
		&services.Get{{ schema.JSONSchema.GoName }}Request{
			ID: obj.UUID,
		})
	if err == nil {
		return nil, nil
	}

        if _, ok := ObjsCache.Load("{{ schema.JSONSchema.GoName }}"); !ok {
                ObjsCache.Store("{{ schema.JSONSchema.GoName }}", &sync.Map{})
        }
        objMap, ok := ObjsCache.Load("{{ schema.JSONSchema.GoName }}")
        if ok {
                objMap.(*sync.Map).Store(obj.GetUUID(), obj)
        }

	service.Debug("Create{{ schema.JSONSchema.GoName }}", objMap.(*sync.Map))

	if service.Next() == nil {
		return nil, nil
	}
	return service.Next().Create{{ schema.JSONSchema.GoName }}(ctx, request)
}
// Update{{ schema.JSONSchema.GoName }}
func (service *CompilationService) Update{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Update{{ schema.JSONSchema.GoName }}Request) (*services.Update{{ schema.JSONSchema.GoName }}Response, error) {
	// Check if request Object exists
	obj := request.Get{{ schema.JSONSchema.GoName }}()
	_, err := service.Get{{ schema.JSONSchema.GoName }}(ctx,
		&services.Get{{ schema.JSONSchema.GoName }}Request{
			ID: obj.UUID,
		})
	if err != nil {
		return nil, nil
	}

        if _, ok := ObjsCache.Load("{{ schema.JSONSchema.GoName }}"); !ok {
                ObjsCache.Store("{{ schema.JSONSchema.GoName }}", &sync.Map{})
        }
        objMap, ok := ObjsCache.Load("{{ schema.JSONSchema.GoName }}")
        if ok {
                objMap.(*sync.Map).Store(obj.GetUUID(), obj)
        }

	service.Debug("Update{{ schema.JSONSchema.GoName }}", objMap.(*sync.Map))

	if service.Next() == nil {
		return nil, nil
	}
	return service.Next().Update{{ schema.JSONSchema.GoName }}(ctx, request)
}
// Delete{{ schema.JSONSchema.GoName }}
func (service *CompilationService) Delete{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Delete{{ schema.JSONSchema.GoName }}Request) (*services.Delete{{ schema.JSONSchema.GoName }}Response, error) {
	// Check if request Object exists
	objUUID := request.GetID()
	_, err := service.Get{{ schema.JSONSchema.GoName }}(ctx,
		&services.Get{{ schema.JSONSchema.GoName }}Request{
			ID: objUUID,
		})
	if err != nil {
		return nil, nil
	}

        objMap, ok := ObjsCache.Load("{{ schema.JSONSchema.GoName }}")
        if ok {
		objMap.(*sync.Map).Delete(objUUID)
        }

	service.Debug("Delete{{ schema.JSONSchema.GoName }}", objMap.(*sync.Map))

	if service.Next() == nil {
		return nil, nil
	}
	return service.Next().Delete{{ schema.JSONSchema.GoName }}(ctx, request)
}
// Get{{ schema.JSONSchema.GoName }}
func (service *CompilationService) Get{{ schema.JSONSchema.GoName }}(ctx context.Context, request *services.Get{{ schema.JSONSchema.GoName }}Request) (*services.Get{{ schema.JSONSchema.GoName }}Response, error) {
	objMap, ok := ObjsCache.Load("{{ schema.JSONSchema.GoName }}")
	if !ok {
		return nil, errors.New("{{ schema.JSONSchema.GoName }} get failed ")
	}

	obj, ok := objMap.(*sync.Map).Load(request.GetID())
	if !ok {
		return nil, errors.New("{{ schema.JSONSchema.GoName }} get failed ")
	}

	response := &services.Get{{ schema.JSONSchema.GoName }}Response{
		{{ schema.JSONSchema.GoName }}: obj.(*models.{{ schema.JSONSchema.GoName }}),
	}
	return response, nil
}
{% endif%}{% endfor %}
